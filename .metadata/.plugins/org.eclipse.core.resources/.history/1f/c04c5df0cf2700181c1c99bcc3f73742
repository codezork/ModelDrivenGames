package com.hypermodel.games.engine.jvmmodel

import com.hypermodel.games.engine.gameDSL.Game
import com.hypermodel.games.engine.gameDSL.GamePackage
import java.util.regex.Pattern
import javax.inject.Inject
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import com.badlogic.gdx.ApplicationAdapter
import android.os.Bundle
import de.hypermodels.games.MyGame
import com.badlogic.gdx.backends.android.AndroidApplication
import com.badlogic.gdx.backends.android.AndroidApplicationConfiguration

class GameDSLJvmModelInferrer extends AbstractModelInferrer {
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider

	var rootClassName = ""
	
   	def dispatch void infer(GamePackage gamePkg, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		for (game : gamePkg.games) {
			// core module
			rootClassName = game.className.toFirstUpper
			val rootClass = gamePkg.toClass(rootClassName);
			rootClass.superTypes.add(_typeReferenceBuilder.typeRef(ApplicationAdapter))
			rootClass.simpleName = rootClass.simpleName.toFirstUpper
			val pkgName = gamePkg.fullyQualifiedName.toString
			acceptor.accept(
				rootClass,
				[
					it.toFields(game)
					it.toOperations(game)
					packageName = pkgName
					documentation = "generated by hypermodels.com"
				]
			)
			// android launcher
//public class AndroidLauncher extends AndroidApplication {
//	@Override
//	protected void onCreate (Bundle savedInstanceState) {
//		super.onCreate(savedInstanceState);
//		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
//		initialize(new MyGame(), config);
//	}
//}
			val launcherClass = gamePkg.toClass("AndroidLauncher");
			launcherClass.superTypes.add(_typeReferenceBuilder.typeRef("AndroidApplication")
			launcherClass.simpleName = launcherClass.simpleName.toFirstUpper
			acceptor.accept(
				rootClass,
				[
					it.toLauncherFields(game)
					it.toOperations(game)
					packageName = pkgName
					documentation = "generated by hypermodels.com"
				]
			)
		}
   	}
   	
	def void toFields(JvmGenericType type, Game game) {
		var JvmField field = null
		field = game.toField("batch", _typeReferenceBuilder.typeRef("SpriteBatch"))
		type.members += field
		field = game.toField("img", _typeReferenceBuilder.typeRef("Texture"))
		type.members += field
	}

	def void toOperations(JvmGenericType type, Game game) {
		type.members += game.toMethod("create", _typeReferenceBuilder.typeRef(Void::TYPE), [
			annotations += _annotationTypesBuilder.annotationRef(Override)
			body = [
				append(
				'''
				batch = new SpriteBatch();
				img = new Texture("badlogic.jpg");''')
			]
		])
		type.members += game.toMethod("render", _typeReferenceBuilder.typeRef(Void::TYPE), [
			annotations += _annotationTypesBuilder.annotationRef(Override)
			body = [
				append(
				'''
				Gdx.gl.glClearColor(1, 0, 0, 1);
				Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
				batch.begin();
				batch.draw(img, 0, 0);
				batch.end();''')
			]
		])
		type.members += game.toMethod("dispose", _typeReferenceBuilder.typeRef(Void::TYPE), [
			annotations += _annotationTypesBuilder.annotationRef(Override)
			body = [
				append(
				'''
				batch.dispose();
				img.dispose();''')
			]
		])
	}

	def String className(Game game) {
		var String clsName = game.name.toString.toFirstUpper
		var parts = clsName.split(Pattern.quote("."))
		var len = parts.length
		if (len > 1) {
			return parts.get(len - 1).toFirstUpper
		}
		return clsName
	}

}