grammar com.hypermodel.games.engine.GameDSL with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate gameDSL "http://www.hypermodel.com/games/engine/GameDSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GameModel:
	importSection=XImportSection?
	packages+=GamePackage*;

GamePackage:
	'package' name=QualifiedName '{' 
		config=GamePlatformConfig
		(games+=GameRoot)*
	'}';
	
GamePlatformConfig: {GamePlatformConfig}
	'configuration' '{' 
	android = GamePlatformConfigAndroid
	ios = GamePlatformConfigIOS
	iosmoe = GamePlatformConfigIOSMOE
	'}';
	
GamePlatformConfigAndroid: {GamePlatformConfigAndroid}
	'android' '{'
	'minAndroidVersion' minAndroidVersion=INT
	'targetAndroidVersion' targetAndroidVersion=INT
	'SDKApiLevel' apiLevel=INT
	'orientation' orientation=GameScreenOrientation
	(('icon' appIcon=STRING)? &
	('name' appName=STRING)? &
	('label' appLabel=STRING)? )
	(useAccelerometer?='useAccelerometer')? 
	'}' 
;
	
GamePlatformConfigIOS: {GamePlatformConfigIOS}
	'ios' '{'
	(useAccelerometer?='useAccelerometer')? '}'
;

GamePlatformConfigIOSMOE: {GamePlatformConfigIOSMOE}
	'iosmoe' '{'
	(useAccelerometer?='useAccelerometer')? '}'
;

GameRoot:
	{GameRoot} 'game' name=ValidID
	'screenWidth' width = INT 'screenHeight' height = INT 
	'title' title=STRING 'pixelPerMeter' ppm = INT 
	'timeStep' timeStep=UnsignedNumber 'velocityIterations' velocityIterations=INT 'positionIterations' positionIterations=INT
	'worldWidth' worldWidth=INT 'worldHeight' worldHeight=INT
	'tileWidth' tileWidth=INT 'tileHeight' tileHeight=INT
	(debug?='debug')?
	('layers' '{' layers+=GameLayer* '}' & 
	'scenes' '{' scenes+=GameScene* '}'&
	'screens' '{' screens+=GameScreen* '}'&
	'regions' '{' regions+=GameTextureRegion* '}');
	
GameLayer:
	{GameLayer} 'layer' name=ValidID 'index' index=INT 
	'type' type=GameLayerType;
	
GameScreen:
	{GameScreen} 'screen' name=ValidID 
	'atlas' atlasName = STRING
	'map' map = STRING
	'scene' scene = [GameScene]
	'tiles' '{' tiles+=GameTile* '}'
	'sprites' '{' sprites+=GameSprite* '}';
	
GameScene:
	{GameScene} 'scene' name=ValidID 
	(hasScore?='isScore' score = GameScore)?;
		
GameScore:
	{GameScore} 'topPadding' topPadding=INT 
	'{' displays+=GameDisplay* '}';
	
GameDisplay:
	{GameDisplay} 'display' name=ValidID 
	'valueType' type=GameDisplayValueType 
	'format' format=STRING 
	(hasInitial?='initialValue' (initialNumberValue=SignedNumber|initialIntValue=INT|initialStringValue=STRING))?
	(hasDelta?='deltaValue' deltaValue=SignedNumber 'eachTimePeriod' timePeriod=UnsignedNumber)?
	(hasAdder?='addValue')?
	(hasSetter?='setValue')?;
	
GameTile:
	{GameTile} 'tile' name=ValidID 'collisionId' id=INT
	(hasObjectLayer?='objectLayer' objectLayer=[GameLayer])?   
	(hasTileLayer?='tileLayer' tileLayer=[GameLayer])?;
	
GameSprite:
	{GameSprite} 'sprite' name=ValidID 
	(
	(isEnemy?='isEnemy' 
		(('layer' layer=[GameLayer])? & 
		(isDestructable?='destructable' 'byProperty' destroyProperty=[GameBodyProperty])? & 
		(hasVelocity?='velocity' velocity=GameVector2d)? &
		(hasActivationRule?='activate' 'if' rule=GameRule)?)
	|
	(isItem?='isItem' 
		((isDestructable?='destructable' 'byProperty' destroyProperty=[GameBodyProperty])? & 
		(hasVelocity?='velocity' velocity=GameVector2d)?)
	|
	(isPlayer?='isPlayer' 'startPosition' startPosition=GameVector2d))?)
	'collisionId' id=INT 'radius' radius=INT
	(hasSensor?='sensor' '{' vectors2d+=GameVector2d* '}' 'sensorID' sensorID=INT)? &
	('actors' '{' actors+=GameActor* '}')? &
	('properties' '{' properties+=GameBodyProperty* '}')? & 
	('states' '{' states+=GameSpriteState* '}' 
	'initialState' initialState=[GameSpriteState]
	('gameOverState' gameOverState=[GameSpriteState])?)? &
	('events' '{' events+=GameEvent* '}')? &
	('inputs' '{' inputs+=GameInput* '}')?);

GameInput:
	{GameInput} 'input' keyType=GameKeyInputType key=GameKeyInputKey
	trigger=[GameEvent];
	
GameActor:
	{GameActor} (hasCollisionCondition?='when' typeA=GameContactType 'collidesWith' typeB=GameContactType 'of')? (('sprite' sprite=[GameSprite]) | ('tile' tile=[GameTile]))
	(hasCollisionConsequence?='do' (('atBeginOfContact' beginContact=[GameEvent])|('atEndOfContact' endContact=[GameEvent])))?;
	
GameVector2d:
	{GameVector2d} 'vector(' x=SignedNumber ',' y=SignedNumber ')'; 
	
GameSpriteState:
	{GameSpriteState} 'state' name=ValidID 'if' rule=GameRule
	(animation=GameSpriteAnimation (ifFinished?='ifFinished' 
	'setFalse' setFalse=[GameBodyProperty])? | 
	stand=GameSpriteStand)?;
	
GameBodyProperty:
	{GameBodyProperty} 'property' name=ValidID 
	(onUpdateTrue?='onUpdateIfTrue' body=XBlockExpression)?
	(onUpdateFalse?='onUpdateIfFalse' body=XBlockExpression)?;
	
GameRule:
	{GameRule} 'isTrue' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
	body=XBlockExpression;

GameSpriteAnimation:
	{GameSpriteAnimation} 'animation' name=ValidID 'duration' duration=UnsignedNumber 
	(hasFrames?='frames' frames=INT 'startFrame' offset=INT 'from' region=[GameTextureRegion])?
	(hasStands?='stands' '{' stands+=GameSpriteStand* '}')?;
	
GameSpriteStand:
	{GameSpriteStand} 'stand' name=ValidID 'whichFrame' offset=INT 'from' region=[GameTextureRegion];

GameTextureRegion:
	{GameTextureRegion} 'region' name=ValidID 'name' region=STRING 'width' width=INT 'height' height=INT 
	('positionOffsetX' offsetX=SignedNumber)? ('positionOffsetY' offsetY=SignedNumber)?
	(flipX?='flipX')? (flipY?='flipY')?;
	
GameEvent:
	{GameEvent} 'event' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
	body=XBlockExpression; 

enum GameLayerType:
	tile = 'tile' |
	object = 'object' |
	image = 'image' |
	group = 'group';
	
enum GameDisplayValueType:
	int = 'number'|
	float = 'decimal'|
	String = 'text';

enum GameScreenOrientation:
	landscape = 'landscape'|
	portrait = 'portrait';
	
enum GameContactType:
	fixture = 'fixture'|
	sensor = 'sensor';
	
enum GameKeyInputType:
	justPressed = 'justPressed'|
	pressed = 'pressed';
	
enum GameKeyInputKey:
	left = 'left'|
	right = 'right'|
	up = 'up'|
	space = 'space';
	
SignedNumber returns ecore::EFloat:
	('-')? UnsignedNumber;

UnsignedNumber returns ecore::EFloat:
	INT ('.' (INT));
	
SignedInteger returns ecore::EInt:
	('-')? INT;
