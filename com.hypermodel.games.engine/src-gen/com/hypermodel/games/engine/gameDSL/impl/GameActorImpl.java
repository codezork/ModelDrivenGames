/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.gameDSL.impl;

import com.hypermodel.games.engine.gameDSL.GameActor;
import com.hypermodel.games.engine.gameDSL.GameContactType;
import com.hypermodel.games.engine.gameDSL.GameDSLPackage;
import com.hypermodel.games.engine.gameDSL.GameEvent;
import com.hypermodel.games.engine.gameDSL.GameSprite;
import com.hypermodel.games.engine.gameDSL.GameTile;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Actor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getSprite <em>Sprite</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getTile <em>Tile</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getTypeA <em>Type A</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#isHasCollision <em>Has Collision</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getTypeB <em>Type B</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getBeginContact <em>Begin Contact</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameActorImpl#getEndContact <em>End Contact</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameActorImpl extends MinimalEObjectImpl.Container implements GameActor
{
  /**
   * The cached value of the '{@link #getSprite() <em>Sprite</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSprite()
   * @generated
   * @ordered
   */
  protected GameSprite sprite;

  /**
   * The cached value of the '{@link #getTile() <em>Tile</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTile()
   * @generated
   * @ordered
   */
  protected GameTile tile;

  /**
   * The default value of the '{@link #getTypeA() <em>Type A</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeA()
   * @generated
   * @ordered
   */
  protected static final GameContactType TYPE_A_EDEFAULT = GameContactType.FIXTURE;

  /**
   * The cached value of the '{@link #getTypeA() <em>Type A</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeA()
   * @generated
   * @ordered
   */
  protected GameContactType typeA = TYPE_A_EDEFAULT;

  /**
   * The default value of the '{@link #isHasCollision() <em>Has Collision</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasCollision()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_COLLISION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasCollision() <em>Has Collision</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasCollision()
   * @generated
   * @ordered
   */
  protected boolean hasCollision = HAS_COLLISION_EDEFAULT;

  /**
   * The default value of the '{@link #getTypeB() <em>Type B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeB()
   * @generated
   * @ordered
   */
  protected static final GameContactType TYPE_B_EDEFAULT = GameContactType.FIXTURE;

  /**
   * The cached value of the '{@link #getTypeB() <em>Type B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeB()
   * @generated
   * @ordered
   */
  protected GameContactType typeB = TYPE_B_EDEFAULT;

  /**
   * The cached value of the '{@link #getBeginContact() <em>Begin Contact</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeginContact()
   * @generated
   * @ordered
   */
  protected GameEvent beginContact;

  /**
   * The cached value of the '{@link #getEndContact() <em>End Contact</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndContact()
   * @generated
   * @ordered
   */
  protected GameEvent endContact;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameActorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameDSLPackage.Literals.GAME_ACTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSprite getSprite()
  {
    if (sprite != null && sprite.eIsProxy())
    {
      InternalEObject oldSprite = (InternalEObject)sprite;
      sprite = (GameSprite)eResolveProxy(oldSprite);
      if (sprite != oldSprite)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_ACTOR__SPRITE, oldSprite, sprite));
      }
    }
    return sprite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSprite basicGetSprite()
  {
    return sprite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSprite(GameSprite newSprite)
  {
    GameSprite oldSprite = sprite;
    sprite = newSprite;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__SPRITE, oldSprite, sprite));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameTile getTile()
  {
    if (tile != null && tile.eIsProxy())
    {
      InternalEObject oldTile = (InternalEObject)tile;
      tile = (GameTile)eResolveProxy(oldTile);
      if (tile != oldTile)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_ACTOR__TILE, oldTile, tile));
      }
    }
    return tile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameTile basicGetTile()
  {
    return tile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTile(GameTile newTile)
  {
    GameTile oldTile = tile;
    tile = newTile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__TILE, oldTile, tile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameContactType getTypeA()
  {
    return typeA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeA(GameContactType newTypeA)
  {
    GameContactType oldTypeA = typeA;
    typeA = newTypeA == null ? TYPE_A_EDEFAULT : newTypeA;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__TYPE_A, oldTypeA, typeA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHasCollision()
  {
    return hasCollision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHasCollision(boolean newHasCollision)
  {
    boolean oldHasCollision = hasCollision;
    hasCollision = newHasCollision;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__HAS_COLLISION, oldHasCollision, hasCollision));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameContactType getTypeB()
  {
    return typeB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeB(GameContactType newTypeB)
  {
    GameContactType oldTypeB = typeB;
    typeB = newTypeB == null ? TYPE_B_EDEFAULT : newTypeB;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__TYPE_B, oldTypeB, typeB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameEvent getBeginContact()
  {
    if (beginContact != null && beginContact.eIsProxy())
    {
      InternalEObject oldBeginContact = (InternalEObject)beginContact;
      beginContact = (GameEvent)eResolveProxy(oldBeginContact);
      if (beginContact != oldBeginContact)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT, oldBeginContact, beginContact));
      }
    }
    return beginContact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameEvent basicGetBeginContact()
  {
    return beginContact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBeginContact(GameEvent newBeginContact)
  {
    GameEvent oldBeginContact = beginContact;
    beginContact = newBeginContact;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT, oldBeginContact, beginContact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameEvent getEndContact()
  {
    if (endContact != null && endContact.eIsProxy())
    {
      InternalEObject oldEndContact = (InternalEObject)endContact;
      endContact = (GameEvent)eResolveProxy(oldEndContact);
      if (endContact != oldEndContact)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_ACTOR__END_CONTACT, oldEndContact, endContact));
      }
    }
    return endContact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameEvent basicGetEndContact()
  {
    return endContact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEndContact(GameEvent newEndContact)
  {
    GameEvent oldEndContact = endContact;
    endContact = newEndContact;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_ACTOR__END_CONTACT, oldEndContact, endContact));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_ACTOR__SPRITE:
        if (resolve) return getSprite();
        return basicGetSprite();
      case GameDSLPackage.GAME_ACTOR__TILE:
        if (resolve) return getTile();
        return basicGetTile();
      case GameDSLPackage.GAME_ACTOR__TYPE_A:
        return getTypeA();
      case GameDSLPackage.GAME_ACTOR__HAS_COLLISION:
        return isHasCollision();
      case GameDSLPackage.GAME_ACTOR__TYPE_B:
        return getTypeB();
      case GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT:
        if (resolve) return getBeginContact();
        return basicGetBeginContact();
      case GameDSLPackage.GAME_ACTOR__END_CONTACT:
        if (resolve) return getEndContact();
        return basicGetEndContact();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_ACTOR__SPRITE:
        setSprite((GameSprite)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__TILE:
        setTile((GameTile)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__TYPE_A:
        setTypeA((GameContactType)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__HAS_COLLISION:
        setHasCollision((Boolean)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__TYPE_B:
        setTypeB((GameContactType)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT:
        setBeginContact((GameEvent)newValue);
        return;
      case GameDSLPackage.GAME_ACTOR__END_CONTACT:
        setEndContact((GameEvent)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_ACTOR__SPRITE:
        setSprite((GameSprite)null);
        return;
      case GameDSLPackage.GAME_ACTOR__TILE:
        setTile((GameTile)null);
        return;
      case GameDSLPackage.GAME_ACTOR__TYPE_A:
        setTypeA(TYPE_A_EDEFAULT);
        return;
      case GameDSLPackage.GAME_ACTOR__HAS_COLLISION:
        setHasCollision(HAS_COLLISION_EDEFAULT);
        return;
      case GameDSLPackage.GAME_ACTOR__TYPE_B:
        setTypeB(TYPE_B_EDEFAULT);
        return;
      case GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT:
        setBeginContact((GameEvent)null);
        return;
      case GameDSLPackage.GAME_ACTOR__END_CONTACT:
        setEndContact((GameEvent)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_ACTOR__SPRITE:
        return sprite != null;
      case GameDSLPackage.GAME_ACTOR__TILE:
        return tile != null;
      case GameDSLPackage.GAME_ACTOR__TYPE_A:
        return typeA != TYPE_A_EDEFAULT;
      case GameDSLPackage.GAME_ACTOR__HAS_COLLISION:
        return hasCollision != HAS_COLLISION_EDEFAULT;
      case GameDSLPackage.GAME_ACTOR__TYPE_B:
        return typeB != TYPE_B_EDEFAULT;
      case GameDSLPackage.GAME_ACTOR__BEGIN_CONTACT:
        return beginContact != null;
      case GameDSLPackage.GAME_ACTOR__END_CONTACT:
        return endContact != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (typeA: ");
    result.append(typeA);
    result.append(", hasCollision: ");
    result.append(hasCollision);
    result.append(", typeB: ");
    result.append(typeB);
    result.append(')');
    return result.toString();
  }

} //GameActorImpl
