/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.gameDSL.impl;

import com.hypermodel.games.engine.gameDSL.GameDSLPackage;
import com.hypermodel.games.engine.gameDSL.GamePlatform;
import com.hypermodel.games.engine.gameDSL.GamePlatformConfigAndroid;
import com.hypermodel.games.engine.gameDSL.GamePlatformConfiguration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Platform Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GamePlatformConfigurationImpl#getPlatform <em>Platform</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GamePlatformConfigurationImpl#getConfig <em>Config</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GamePlatformConfigurationImpl extends MinimalEObjectImpl.Container implements GamePlatformConfiguration
{
  /**
   * The default value of the '{@link #getPlatform() <em>Platform</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatform()
   * @generated
   * @ordered
   */
  protected static final GamePlatform PLATFORM_EDEFAULT = GamePlatform.ANDROID;

  /**
   * The cached value of the '{@link #getPlatform() <em>Platform</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatform()
   * @generated
   * @ordered
   */
  protected GamePlatform platform = PLATFORM_EDEFAULT;

  /**
   * The cached value of the '{@link #getConfig() <em>Config</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfig()
   * @generated
   * @ordered
   */
  protected EList<GamePlatformConfigAndroid> config;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GamePlatformConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameDSLPackage.Literals.GAME_PLATFORM_CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GamePlatform getPlatform()
  {
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPlatform(GamePlatform newPlatform)
  {
    GamePlatform oldPlatform = platform;
    platform = newPlatform == null ? PLATFORM_EDEFAULT : newPlatform;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_PLATFORM_CONFIGURATION__PLATFORM, oldPlatform, platform));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GamePlatformConfigAndroid> getConfig()
  {
    if (config == null)
    {
      config = new EObjectContainmentEList<GamePlatformConfigAndroid>(GamePlatformConfigAndroid.class, this, GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG);
    }
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG:
        return ((InternalEList<?>)getConfig()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__PLATFORM:
        return getPlatform();
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG:
        return getConfig();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__PLATFORM:
        setPlatform((GamePlatform)newValue);
        return;
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG:
        getConfig().clear();
        getConfig().addAll((Collection<? extends GamePlatformConfigAndroid>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__PLATFORM:
        setPlatform(PLATFORM_EDEFAULT);
        return;
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG:
        getConfig().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__PLATFORM:
        return platform != PLATFORM_EDEFAULT;
      case GameDSLPackage.GAME_PLATFORM_CONFIGURATION__CONFIG:
        return config != null && !config.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (platform: ");
    result.append(platform);
    result.append(')');
    return result.toString();
  }

} //GamePlatformConfigurationImpl
