/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.gameDSL.impl;

import com.hypermodel.games.engine.gameDSL.GameDSLPackage;
import com.hypermodel.games.engine.gameDSL.GameScene;
import com.hypermodel.games.engine.gameDSL.GameScreen;
import com.hypermodel.games.engine.gameDSL.GameSprite;
import com.hypermodel.games.engine.gameDSL.GameTile;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Screen</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getAtlasName <em>Atlas Name</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getMap <em>Map</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getScene <em>Scene</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getTiles <em>Tiles</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameScreenImpl#getSprites <em>Sprites</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameScreenImpl extends MinimalEObjectImpl.Container implements GameScreen
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getAtlasName() <em>Atlas Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtlasName()
   * @generated
   * @ordered
   */
  protected static final String ATLAS_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAtlasName() <em>Atlas Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtlasName()
   * @generated
   * @ordered
   */
  protected String atlasName = ATLAS_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMap() <em>Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap()
   * @generated
   * @ordered
   */
  protected static final String MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMap() <em>Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap()
   * @generated
   * @ordered
   */
  protected String map = MAP_EDEFAULT;

  /**
   * The cached value of the '{@link #getScene() <em>Scene</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScene()
   * @generated
   * @ordered
   */
  protected GameScene scene;

  /**
   * The cached value of the '{@link #getTiles() <em>Tiles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTiles()
   * @generated
   * @ordered
   */
  protected EList<GameTile> tiles;

  /**
   * The cached value of the '{@link #getSprites() <em>Sprites</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSprites()
   * @generated
   * @ordered
   */
  protected EList<GameSprite> sprites;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameScreenImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameDSLPackage.Literals.GAME_SCREEN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SCREEN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAtlasName()
  {
    return atlasName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtlasName(String newAtlasName)
  {
    String oldAtlasName = atlasName;
    atlasName = newAtlasName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SCREEN__ATLAS_NAME, oldAtlasName, atlasName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMap()
  {
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMap(String newMap)
  {
    String oldMap = map;
    map = newMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SCREEN__MAP, oldMap, map));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameScene getScene()
  {
    if (scene != null && scene.eIsProxy())
    {
      InternalEObject oldScene = (InternalEObject)scene;
      scene = (GameScene)eResolveProxy(oldScene);
      if (scene != oldScene)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_SCREEN__SCENE, oldScene, scene));
      }
    }
    return scene;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameScene basicGetScene()
  {
    return scene;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setScene(GameScene newScene)
  {
    GameScene oldScene = scene;
    scene = newScene;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SCREEN__SCENE, oldScene, scene));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GameTile> getTiles()
  {
    if (tiles == null)
    {
      tiles = new EObjectContainmentEList<GameTile>(GameTile.class, this, GameDSLPackage.GAME_SCREEN__TILES);
    }
    return tiles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GameSprite> getSprites()
  {
    if (sprites == null)
    {
      sprites = new EObjectContainmentEList<GameSprite>(GameSprite.class, this, GameDSLPackage.GAME_SCREEN__SPRITES);
    }
    return sprites;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SCREEN__TILES:
        return ((InternalEList<?>)getTiles()).basicRemove(otherEnd, msgs);
      case GameDSLPackage.GAME_SCREEN__SPRITES:
        return ((InternalEList<?>)getSprites()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SCREEN__NAME:
        return getName();
      case GameDSLPackage.GAME_SCREEN__ATLAS_NAME:
        return getAtlasName();
      case GameDSLPackage.GAME_SCREEN__MAP:
        return getMap();
      case GameDSLPackage.GAME_SCREEN__SCENE:
        if (resolve) return getScene();
        return basicGetScene();
      case GameDSLPackage.GAME_SCREEN__TILES:
        return getTiles();
      case GameDSLPackage.GAME_SCREEN__SPRITES:
        return getSprites();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SCREEN__NAME:
        setName((String)newValue);
        return;
      case GameDSLPackage.GAME_SCREEN__ATLAS_NAME:
        setAtlasName((String)newValue);
        return;
      case GameDSLPackage.GAME_SCREEN__MAP:
        setMap((String)newValue);
        return;
      case GameDSLPackage.GAME_SCREEN__SCENE:
        setScene((GameScene)newValue);
        return;
      case GameDSLPackage.GAME_SCREEN__TILES:
        getTiles().clear();
        getTiles().addAll((Collection<? extends GameTile>)newValue);
        return;
      case GameDSLPackage.GAME_SCREEN__SPRITES:
        getSprites().clear();
        getSprites().addAll((Collection<? extends GameSprite>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SCREEN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SCREEN__ATLAS_NAME:
        setAtlasName(ATLAS_NAME_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SCREEN__MAP:
        setMap(MAP_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SCREEN__SCENE:
        setScene((GameScene)null);
        return;
      case GameDSLPackage.GAME_SCREEN__TILES:
        getTiles().clear();
        return;
      case GameDSLPackage.GAME_SCREEN__SPRITES:
        getSprites().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SCREEN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GameDSLPackage.GAME_SCREEN__ATLAS_NAME:
        return ATLAS_NAME_EDEFAULT == null ? atlasName != null : !ATLAS_NAME_EDEFAULT.equals(atlasName);
      case GameDSLPackage.GAME_SCREEN__MAP:
        return MAP_EDEFAULT == null ? map != null : !MAP_EDEFAULT.equals(map);
      case GameDSLPackage.GAME_SCREEN__SCENE:
        return scene != null;
      case GameDSLPackage.GAME_SCREEN__TILES:
        return tiles != null && !tiles.isEmpty();
      case GameDSLPackage.GAME_SCREEN__SPRITES:
        return sprites != null && !sprites.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", atlasName: ");
    result.append(atlasName);
    result.append(", map: ");
    result.append(map);
    result.append(')');
    return result.toString();
  }

} //GameScreenImpl
