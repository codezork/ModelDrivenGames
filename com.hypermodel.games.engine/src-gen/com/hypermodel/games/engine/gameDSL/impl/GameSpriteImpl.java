/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.gameDSL.impl;

import com.hypermodel.games.engine.gameDSL.GameDSLPackage;
import com.hypermodel.games.engine.gameDSL.GameSprite;
import com.hypermodel.games.engine.gameDSL.GameSpriteAnimation;
import com.hypermodel.games.engine.gameDSL.GameSpriteStand;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Sprite</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteImpl#getRadius <em>Radius</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteImpl#getAnimations <em>Animations</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteImpl#getStands <em>Stands</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteImpl#getStart <em>Start</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameSpriteImpl extends MinimalEObjectImpl.Container implements GameSprite
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRadius() <em>Radius</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRadius()
   * @generated
   * @ordered
   */
  protected static final int RADIUS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRadius() <em>Radius</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRadius()
   * @generated
   * @ordered
   */
  protected int radius = RADIUS_EDEFAULT;

  /**
   * The cached value of the '{@link #getAnimations() <em>Animations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnimations()
   * @generated
   * @ordered
   */
  protected EList<GameSpriteAnimation> animations;

  /**
   * The cached value of the '{@link #getStands() <em>Stands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStands()
   * @generated
   * @ordered
   */
  protected EList<GameSpriteStand> stands;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected GameSpriteStand start;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameSpriteImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameDSLPackage.Literals.GAME_SPRITE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getRadius()
  {
    return radius;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRadius(int newRadius)
  {
    int oldRadius = radius;
    radius = newRadius;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE__RADIUS, oldRadius, radius));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GameSpriteAnimation> getAnimations()
  {
    if (animations == null)
    {
      animations = new EObjectContainmentEList<GameSpriteAnimation>(GameSpriteAnimation.class, this, GameDSLPackage.GAME_SPRITE__ANIMATIONS);
    }
    return animations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GameSpriteStand> getStands()
  {
    if (stands == null)
    {
      stands = new EObjectContainmentEList<GameSpriteStand>(GameSpriteStand.class, this, GameDSLPackage.GAME_SPRITE__STANDS);
    }
    return stands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSpriteStand getStart()
  {
    if (start != null && start.eIsProxy())
    {
      InternalEObject oldStart = (InternalEObject)start;
      start = (GameSpriteStand)eResolveProxy(oldStart);
      if (start != oldStart)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_SPRITE__START, oldStart, start));
      }
    }
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSpriteStand basicGetStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStart(GameSpriteStand newStart)
  {
    GameSpriteStand oldStart = start;
    start = newStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE__START, oldStart, start));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE__ANIMATIONS:
        return ((InternalEList<?>)getAnimations()).basicRemove(otherEnd, msgs);
      case GameDSLPackage.GAME_SPRITE__STANDS:
        return ((InternalEList<?>)getStands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE__NAME:
        return getName();
      case GameDSLPackage.GAME_SPRITE__RADIUS:
        return getRadius();
      case GameDSLPackage.GAME_SPRITE__ANIMATIONS:
        return getAnimations();
      case GameDSLPackage.GAME_SPRITE__STANDS:
        return getStands();
      case GameDSLPackage.GAME_SPRITE__START:
        if (resolve) return getStart();
        return basicGetStart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE__NAME:
        setName((String)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE__RADIUS:
        setRadius((Integer)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE__ANIMATIONS:
        getAnimations().clear();
        getAnimations().addAll((Collection<? extends GameSpriteAnimation>)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE__STANDS:
        getStands().clear();
        getStands().addAll((Collection<? extends GameSpriteStand>)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE__START:
        setStart((GameSpriteStand)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SPRITE__RADIUS:
        setRadius(RADIUS_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SPRITE__ANIMATIONS:
        getAnimations().clear();
        return;
      case GameDSLPackage.GAME_SPRITE__STANDS:
        getStands().clear();
        return;
      case GameDSLPackage.GAME_SPRITE__START:
        setStart((GameSpriteStand)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GameDSLPackage.GAME_SPRITE__RADIUS:
        return radius != RADIUS_EDEFAULT;
      case GameDSLPackage.GAME_SPRITE__ANIMATIONS:
        return animations != null && !animations.isEmpty();
      case GameDSLPackage.GAME_SPRITE__STANDS:
        return stands != null && !stands.isEmpty();
      case GameDSLPackage.GAME_SPRITE__START:
        return start != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", radius: ");
    result.append(radius);
    result.append(')');
    return result.toString();
  }

} //GameSpriteImpl
