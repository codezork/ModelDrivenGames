/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.gameDSL.impl;

import com.hypermodel.games.engine.gameDSL.GameBodyProperty;
import com.hypermodel.games.engine.gameDSL.GameDSLPackage;
import com.hypermodel.games.engine.gameDSL.GameRule;
import com.hypermodel.games.engine.gameDSL.GameSpriteAnimation;
import com.hypermodel.games.engine.gameDSL.GameSpriteStand;
import com.hypermodel.games.engine.gameDSL.GameSpriteState;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Sprite State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#getRule <em>Rule</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#getAnimation <em>Animation</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#isIfFinished <em>If Finished</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#getSetFalse <em>Set False</em>}</li>
 *   <li>{@link com.hypermodel.games.engine.gameDSL.impl.GameSpriteStateImpl#getStand <em>Stand</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameSpriteStateImpl extends MinimalEObjectImpl.Container implements GameSpriteState
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRule() <em>Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRule()
   * @generated
   * @ordered
   */
  protected GameRule rule;

  /**
   * The cached value of the '{@link #getAnimation() <em>Animation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnimation()
   * @generated
   * @ordered
   */
  protected GameSpriteAnimation animation;

  /**
   * The default value of the '{@link #isIfFinished() <em>If Finished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIfFinished()
   * @generated
   * @ordered
   */
  protected static final boolean IF_FINISHED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIfFinished() <em>If Finished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIfFinished()
   * @generated
   * @ordered
   */
  protected boolean ifFinished = IF_FINISHED_EDEFAULT;

  /**
   * The cached value of the '{@link #getSetFalse() <em>Set False</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetFalse()
   * @generated
   * @ordered
   */
  protected GameBodyProperty setFalse;

  /**
   * The cached value of the '{@link #getStand() <em>Stand</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStand()
   * @generated
   * @ordered
   */
  protected GameSpriteStand stand;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameSpriteStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameDSLPackage.Literals.GAME_SPRITE_STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameRule getRule()
  {
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRule(GameRule newRule, NotificationChain msgs)
  {
    GameRule oldRule = rule;
    rule = newRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__RULE, oldRule, newRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRule(GameRule newRule)
  {
    if (newRule != rule)
    {
      NotificationChain msgs = null;
      if (rule != null)
        msgs = ((InternalEObject)rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__RULE, null, msgs);
      if (newRule != null)
        msgs = ((InternalEObject)newRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__RULE, null, msgs);
      msgs = basicSetRule(newRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__RULE, newRule, newRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSpriteAnimation getAnimation()
  {
    return animation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnimation(GameSpriteAnimation newAnimation, NotificationChain msgs)
  {
    GameSpriteAnimation oldAnimation = animation;
    animation = newAnimation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__ANIMATION, oldAnimation, newAnimation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnimation(GameSpriteAnimation newAnimation)
  {
    if (newAnimation != animation)
    {
      NotificationChain msgs = null;
      if (animation != null)
        msgs = ((InternalEObject)animation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__ANIMATION, null, msgs);
      if (newAnimation != null)
        msgs = ((InternalEObject)newAnimation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__ANIMATION, null, msgs);
      msgs = basicSetAnimation(newAnimation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__ANIMATION, newAnimation, newAnimation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIfFinished()
  {
    return ifFinished;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIfFinished(boolean newIfFinished)
  {
    boolean oldIfFinished = ifFinished;
    ifFinished = newIfFinished;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__IF_FINISHED, oldIfFinished, ifFinished));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameBodyProperty getSetFalse()
  {
    if (setFalse != null && setFalse.eIsProxy())
    {
      InternalEObject oldSetFalse = (InternalEObject)setFalse;
      setFalse = (GameBodyProperty)eResolveProxy(oldSetFalse);
      if (setFalse != oldSetFalse)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE, oldSetFalse, setFalse));
      }
    }
    return setFalse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameBodyProperty basicGetSetFalse()
  {
    return setFalse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSetFalse(GameBodyProperty newSetFalse)
  {
    GameBodyProperty oldSetFalse = setFalse;
    setFalse = newSetFalse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE, oldSetFalse, setFalse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameSpriteStand getStand()
  {
    return stand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStand(GameSpriteStand newStand, NotificationChain msgs)
  {
    GameSpriteStand oldStand = stand;
    stand = newStand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__STAND, oldStand, newStand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStand(GameSpriteStand newStand)
  {
    if (newStand != stand)
    {
      NotificationChain msgs = null;
      if (stand != null)
        msgs = ((InternalEObject)stand).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__STAND, null, msgs);
      if (newStand != null)
        msgs = ((InternalEObject)newStand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GameDSLPackage.GAME_SPRITE_STATE__STAND, null, msgs);
      msgs = basicSetStand(newStand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GameDSLPackage.GAME_SPRITE_STATE__STAND, newStand, newStand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE_STATE__RULE:
        return basicSetRule(null, msgs);
      case GameDSLPackage.GAME_SPRITE_STATE__ANIMATION:
        return basicSetAnimation(null, msgs);
      case GameDSLPackage.GAME_SPRITE_STATE__STAND:
        return basicSetStand(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE_STATE__NAME:
        return getName();
      case GameDSLPackage.GAME_SPRITE_STATE__RULE:
        return getRule();
      case GameDSLPackage.GAME_SPRITE_STATE__ANIMATION:
        return getAnimation();
      case GameDSLPackage.GAME_SPRITE_STATE__IF_FINISHED:
        return isIfFinished();
      case GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE:
        if (resolve) return getSetFalse();
        return basicGetSetFalse();
      case GameDSLPackage.GAME_SPRITE_STATE__STAND:
        return getStand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE_STATE__NAME:
        setName((String)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__RULE:
        setRule((GameRule)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__ANIMATION:
        setAnimation((GameSpriteAnimation)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__IF_FINISHED:
        setIfFinished((Boolean)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE:
        setSetFalse((GameBodyProperty)newValue);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__STAND:
        setStand((GameSpriteStand)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE_STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__RULE:
        setRule((GameRule)null);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__ANIMATION:
        setAnimation((GameSpriteAnimation)null);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__IF_FINISHED:
        setIfFinished(IF_FINISHED_EDEFAULT);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE:
        setSetFalse((GameBodyProperty)null);
        return;
      case GameDSLPackage.GAME_SPRITE_STATE__STAND:
        setStand((GameSpriteStand)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameDSLPackage.GAME_SPRITE_STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GameDSLPackage.GAME_SPRITE_STATE__RULE:
        return rule != null;
      case GameDSLPackage.GAME_SPRITE_STATE__ANIMATION:
        return animation != null;
      case GameDSLPackage.GAME_SPRITE_STATE__IF_FINISHED:
        return ifFinished != IF_FINISHED_EDEFAULT;
      case GameDSLPackage.GAME_SPRITE_STATE__SET_FALSE:
        return setFalse != null;
      case GameDSLPackage.GAME_SPRITE_STATE__STAND:
        return stand != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", ifFinished: ");
    result.append(ifFinished);
    result.append(')');
    return result.toString();
  }

} //GameSpriteStateImpl
