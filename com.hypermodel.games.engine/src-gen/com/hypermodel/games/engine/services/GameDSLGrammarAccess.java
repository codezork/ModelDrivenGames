/*
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class GameDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GameModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cPackagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagesGamePackageParserRuleCall_1_0 = (RuleCall)cPackagesAssignment_1.eContents().get(0);
		
		//GameModel:
		//	importSection=XImportSection?
		//	packages+=GamePackage*;
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection? packages+=GamePackage*
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//packages+=GamePackage*
		public Assignment getPackagesAssignment_1() { return cPackagesAssignment_1; }
		
		//GamePackage
		public RuleCall getPackagesGamePackageParserRuleCall_1_0() { return cPackagesGamePackageParserRuleCall_1_0; }
	}
	public class GamePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GamePackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigGamePlatformConfigParserRuleCall_3_0 = (RuleCall)cConfigAssignment_3.eContents().get(0);
		private final Assignment cGamesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGamesGameRootParserRuleCall_4_0 = (RuleCall)cGamesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GamePackage:
		//	'package' name=QualifiedName '{'
		//	config=GamePlatformConfig
		//	games+=GameRoot*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' config=GamePlatformConfig games+=GameRoot* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//config=GamePlatformConfig
		public Assignment getConfigAssignment_3() { return cConfigAssignment_3; }
		
		//GamePlatformConfig
		public RuleCall getConfigGamePlatformConfigParserRuleCall_3_0() { return cConfigGamePlatformConfigParserRuleCall_3_0; }
		
		//games+=GameRoot*
		public Assignment getGamesAssignment_4() { return cGamesAssignment_4; }
		
		//GameRoot
		public RuleCall getGamesGameRootParserRuleCall_4_0() { return cGamesGameRootParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GamePlatformConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GamePlatformConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGamePlatformConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAndroidAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAndroidGamePlatformConfigAndroidParserRuleCall_3_0 = (RuleCall)cAndroidAssignment_3.eContents().get(0);
		private final Assignment cIosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIosGamePlatformConfigIOSParserRuleCall_4_0 = (RuleCall)cIosAssignment_4.eContents().get(0);
		private final Assignment cIosmoeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIosmoeGamePlatformConfigIOSMOEParserRuleCall_5_0 = (RuleCall)cIosmoeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GamePlatformConfig:
		//	{GamePlatformConfig}
		//	'configuration' '{'
		//	android=GamePlatformConfigAndroid
		//	ios=GamePlatformConfigIOS
		//	iosmoe=GamePlatformConfigIOSMOE
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GamePlatformConfig} 'configuration' '{' android=GamePlatformConfigAndroid ios=GamePlatformConfigIOS
		//iosmoe=GamePlatformConfigIOSMOE '}'
		public Group getGroup() { return cGroup; }
		
		//{GamePlatformConfig}
		public Action getGamePlatformConfigAction_0() { return cGamePlatformConfigAction_0; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//android=GamePlatformConfigAndroid
		public Assignment getAndroidAssignment_3() { return cAndroidAssignment_3; }
		
		//GamePlatformConfigAndroid
		public RuleCall getAndroidGamePlatformConfigAndroidParserRuleCall_3_0() { return cAndroidGamePlatformConfigAndroidParserRuleCall_3_0; }
		
		//ios=GamePlatformConfigIOS
		public Assignment getIosAssignment_4() { return cIosAssignment_4; }
		
		//GamePlatformConfigIOS
		public RuleCall getIosGamePlatformConfigIOSParserRuleCall_4_0() { return cIosGamePlatformConfigIOSParserRuleCall_4_0; }
		
		//iosmoe=GamePlatformConfigIOSMOE
		public Assignment getIosmoeAssignment_5() { return cIosmoeAssignment_5; }
		
		//GamePlatformConfigIOSMOE
		public RuleCall getIosmoeGamePlatformConfigIOSMOEParserRuleCall_5_0() { return cIosmoeGamePlatformConfigIOSMOEParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GamePlatformConfigAndroidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GamePlatformConfigAndroid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGamePlatformConfigAndroidAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndroidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMinAndroidVersionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAndroidVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinAndroidVersionINTTerminalRuleCall_4_0 = (RuleCall)cMinAndroidVersionAssignment_4.eContents().get(0);
		private final Keyword cTargetAndroidVersionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAndroidVersionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetAndroidVersionINTTerminalRuleCall_6_0 = (RuleCall)cTargetAndroidVersionAssignment_6.eContents().get(0);
		private final Keyword cSDKApiLevelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cApiLevelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cApiLevelINTTerminalRuleCall_8_0 = (RuleCall)cApiLevelAssignment_8.eContents().get(0);
		private final Keyword cOrientationKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOrientationAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOrientationGameScreenOrientationEnumRuleCall_10_0 = (RuleCall)cOrientationAssignment_10.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_11 = (UnorderedGroup)cGroup.eContents().get(11);
		private final Group cGroup_11_0 = (Group)cUnorderedGroup_11.eContents().get(0);
		private final Keyword cIconKeyword_11_0_0 = (Keyword)cGroup_11_0.eContents().get(0);
		private final Assignment cAppIconAssignment_11_0_1 = (Assignment)cGroup_11_0.eContents().get(1);
		private final RuleCall cAppIconSTRINGTerminalRuleCall_11_0_1_0 = (RuleCall)cAppIconAssignment_11_0_1.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cUnorderedGroup_11.eContents().get(1);
		private final Keyword cNameKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cAppNameAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cAppNameSTRINGTerminalRuleCall_11_1_1_0 = (RuleCall)cAppNameAssignment_11_1_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cUnorderedGroup_11.eContents().get(2);
		private final Keyword cLabelKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cAppLabelAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cAppLabelSTRINGTerminalRuleCall_11_2_1_0 = (RuleCall)cAppLabelAssignment_11_2_1.eContents().get(0);
		private final Assignment cUseAccelerometerAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cUseAccelerometerUseAccelerometerKeyword_12_0 = (Keyword)cUseAccelerometerAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//GamePlatformConfigAndroid:
		//	{GamePlatformConfigAndroid}
		//	'android' '{'
		//	'minAndroidVersion' minAndroidVersion=INT
		//	'targetAndroidVersion' targetAndroidVersion=INT
		//	'SDKApiLevel' apiLevel=INT
		//	'orientation' orientation=GameScreenOrientation (('icon' appIcon=STRING)? & ('name' appName=STRING)? & ('label'
		//	appLabel=STRING)?) useAccelerometer?='useAccelerometer'?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GamePlatformConfigAndroid} 'android' '{' 'minAndroidVersion' minAndroidVersion=INT 'targetAndroidVersion'
		//targetAndroidVersion=INT 'SDKApiLevel' apiLevel=INT 'orientation' orientation=GameScreenOrientation (('icon'
		//appIcon=STRING)? & ('name' appName=STRING)? & ('label' appLabel=STRING)?) useAccelerometer?='useAccelerometer'? '}'
		public Group getGroup() { return cGroup; }
		
		//{GamePlatformConfigAndroid}
		public Action getGamePlatformConfigAndroidAction_0() { return cGamePlatformConfigAndroidAction_0; }
		
		//'android'
		public Keyword getAndroidKeyword_1() { return cAndroidKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'minAndroidVersion'
		public Keyword getMinAndroidVersionKeyword_3() { return cMinAndroidVersionKeyword_3; }
		
		//minAndroidVersion=INT
		public Assignment getMinAndroidVersionAssignment_4() { return cMinAndroidVersionAssignment_4; }
		
		//INT
		public RuleCall getMinAndroidVersionINTTerminalRuleCall_4_0() { return cMinAndroidVersionINTTerminalRuleCall_4_0; }
		
		//'targetAndroidVersion'
		public Keyword getTargetAndroidVersionKeyword_5() { return cTargetAndroidVersionKeyword_5; }
		
		//targetAndroidVersion=INT
		public Assignment getTargetAndroidVersionAssignment_6() { return cTargetAndroidVersionAssignment_6; }
		
		//INT
		public RuleCall getTargetAndroidVersionINTTerminalRuleCall_6_0() { return cTargetAndroidVersionINTTerminalRuleCall_6_0; }
		
		//'SDKApiLevel'
		public Keyword getSDKApiLevelKeyword_7() { return cSDKApiLevelKeyword_7; }
		
		//apiLevel=INT
		public Assignment getApiLevelAssignment_8() { return cApiLevelAssignment_8; }
		
		//INT
		public RuleCall getApiLevelINTTerminalRuleCall_8_0() { return cApiLevelINTTerminalRuleCall_8_0; }
		
		//'orientation'
		public Keyword getOrientationKeyword_9() { return cOrientationKeyword_9; }
		
		//orientation=GameScreenOrientation
		public Assignment getOrientationAssignment_10() { return cOrientationAssignment_10; }
		
		//GameScreenOrientation
		public RuleCall getOrientationGameScreenOrientationEnumRuleCall_10_0() { return cOrientationGameScreenOrientationEnumRuleCall_10_0; }
		
		//('icon' appIcon=STRING)? & ('name' appName=STRING)? & ('label' appLabel=STRING)?
		public UnorderedGroup getUnorderedGroup_11() { return cUnorderedGroup_11; }
		
		//('icon' appIcon=STRING)?
		public Group getGroup_11_0() { return cGroup_11_0; }
		
		//'icon'
		public Keyword getIconKeyword_11_0_0() { return cIconKeyword_11_0_0; }
		
		//appIcon=STRING
		public Assignment getAppIconAssignment_11_0_1() { return cAppIconAssignment_11_0_1; }
		
		//STRING
		public RuleCall getAppIconSTRINGTerminalRuleCall_11_0_1_0() { return cAppIconSTRINGTerminalRuleCall_11_0_1_0; }
		
		//('name' appName=STRING)?
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//'name'
		public Keyword getNameKeyword_11_1_0() { return cNameKeyword_11_1_0; }
		
		//appName=STRING
		public Assignment getAppNameAssignment_11_1_1() { return cAppNameAssignment_11_1_1; }
		
		//STRING
		public RuleCall getAppNameSTRINGTerminalRuleCall_11_1_1_0() { return cAppNameSTRINGTerminalRuleCall_11_1_1_0; }
		
		//('label' appLabel=STRING)?
		public Group getGroup_11_2() { return cGroup_11_2; }
		
		//'label'
		public Keyword getLabelKeyword_11_2_0() { return cLabelKeyword_11_2_0; }
		
		//appLabel=STRING
		public Assignment getAppLabelAssignment_11_2_1() { return cAppLabelAssignment_11_2_1; }
		
		//STRING
		public RuleCall getAppLabelSTRINGTerminalRuleCall_11_2_1_0() { return cAppLabelSTRINGTerminalRuleCall_11_2_1_0; }
		
		//useAccelerometer?='useAccelerometer'?
		public Assignment getUseAccelerometerAssignment_12() { return cUseAccelerometerAssignment_12; }
		
		//'useAccelerometer'
		public Keyword getUseAccelerometerUseAccelerometerKeyword_12_0() { return cUseAccelerometerUseAccelerometerKeyword_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class GamePlatformConfigIOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GamePlatformConfigIOS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGamePlatformConfigIOSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIosKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUseAccelerometerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cUseAccelerometerUseAccelerometerKeyword_3_0 = (Keyword)cUseAccelerometerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GamePlatformConfigIOS:
		//	{GamePlatformConfigIOS}
		//	'ios' '{'
		//	useAccelerometer?='useAccelerometer'? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GamePlatformConfigIOS} 'ios' '{' useAccelerometer?='useAccelerometer'? '}'
		public Group getGroup() { return cGroup; }
		
		//{GamePlatformConfigIOS}
		public Action getGamePlatformConfigIOSAction_0() { return cGamePlatformConfigIOSAction_0; }
		
		//'ios'
		public Keyword getIosKeyword_1() { return cIosKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//useAccelerometer?='useAccelerometer'?
		public Assignment getUseAccelerometerAssignment_3() { return cUseAccelerometerAssignment_3; }
		
		//'useAccelerometer'
		public Keyword getUseAccelerometerUseAccelerometerKeyword_3_0() { return cUseAccelerometerUseAccelerometerKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GamePlatformConfigIOSMOEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GamePlatformConfigIOSMOE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGamePlatformConfigIOSMOEAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIosmoeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUseAccelerometerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cUseAccelerometerUseAccelerometerKeyword_3_0 = (Keyword)cUseAccelerometerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GamePlatformConfigIOSMOE:
		//	{GamePlatformConfigIOSMOE}
		//	'iosmoe' '{'
		//	useAccelerometer?='useAccelerometer'? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GamePlatformConfigIOSMOE} 'iosmoe' '{' useAccelerometer?='useAccelerometer'? '}'
		public Group getGroup() { return cGroup; }
		
		//{GamePlatformConfigIOSMOE}
		public Action getGamePlatformConfigIOSMOEAction_0() { return cGamePlatformConfigIOSMOEAction_0; }
		
		//'iosmoe'
		public Keyword getIosmoeKeyword_1() { return cIosmoeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//useAccelerometer?='useAccelerometer'?
		public Assignment getUseAccelerometerAssignment_3() { return cUseAccelerometerAssignment_3; }
		
		//'useAccelerometer'
		public Keyword getUseAccelerometerUseAccelerometerKeyword_3_0() { return cUseAccelerometerUseAccelerometerKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GameRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWidthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWidthINTTerminalRuleCall_4_0 = (RuleCall)cWidthAssignment_4.eContents().get(0);
		private final Keyword cHeightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHeightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeightINTTerminalRuleCall_6_0 = (RuleCall)cHeightAssignment_6.eContents().get(0);
		private final Keyword cTitleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTitleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTitleSTRINGTerminalRuleCall_8_0 = (RuleCall)cTitleAssignment_8.eContents().get(0);
		private final Keyword cPixelPerMeterKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPpmAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPpmINTTerminalRuleCall_10_0 = (RuleCall)cPpmAssignment_10.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_11 = (UnorderedGroup)cGroup.eContents().get(11);
		private final Group cGroup_11_0 = (Group)cUnorderedGroup_11.eContents().get(0);
		private final Keyword cScenesKeyword_11_0_0 = (Keyword)cGroup_11_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_0_1 = (Keyword)cGroup_11_0.eContents().get(1);
		private final Assignment cScenesAssignment_11_0_2 = (Assignment)cGroup_11_0.eContents().get(2);
		private final RuleCall cScenesGameSceneParserRuleCall_11_0_2_0 = (RuleCall)cScenesAssignment_11_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_0_3 = (Keyword)cGroup_11_0.eContents().get(3);
		private final Group cGroup_11_1 = (Group)cUnorderedGroup_11.eContents().get(1);
		private final Keyword cScreensKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1_1 = (Keyword)cGroup_11_1.eContents().get(1);
		private final Assignment cScreensAssignment_11_1_2 = (Assignment)cGroup_11_1.eContents().get(2);
		private final RuleCall cScreensGameScreenParserRuleCall_11_1_2_0 = (RuleCall)cScreensAssignment_11_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_1_3 = (Keyword)cGroup_11_1.eContents().get(3);
		private final Group cGroup_11_2 = (Group)cUnorderedGroup_11.eContents().get(2);
		private final Keyword cRegionsKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_2_1 = (Keyword)cGroup_11_2.eContents().get(1);
		private final Assignment cRegionsAssignment_11_2_2 = (Assignment)cGroup_11_2.eContents().get(2);
		private final RuleCall cRegionsGameTextureRegionParserRuleCall_11_2_2_0 = (RuleCall)cRegionsAssignment_11_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_2_3 = (Keyword)cGroup_11_2.eContents().get(3);
		
		//GameRoot:
		//	{GameRoot} 'game' name=ValidID
		//	'width' width=INT 'height' height=INT 'title' title=STRING 'pixelPerMeter' ppm=INT ('scenes' '{' scenes+=GameScene*
		//	'}' &
		//	'screens' '{' screens+=GameScreen* '}' &
		//	'regions' '{' regions+=GameTextureRegion* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//{GameRoot} 'game' name=ValidID 'width' width=INT 'height' height=INT 'title' title=STRING 'pixelPerMeter' ppm=INT
		//('scenes' '{' scenes+=GameScene* '}' & 'screens' '{' screens+=GameScreen* '}' & 'regions' '{'
		//regions+=GameTextureRegion* '}')
		public Group getGroup() { return cGroup; }
		
		//{GameRoot}
		public Action getGameRootAction_0() { return cGameRootAction_0; }
		
		//'game'
		public Keyword getGameKeyword_1() { return cGameKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'width'
		public Keyword getWidthKeyword_3() { return cWidthKeyword_3; }
		
		//width=INT
		public Assignment getWidthAssignment_4() { return cWidthAssignment_4; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_4_0() { return cWidthINTTerminalRuleCall_4_0; }
		
		//'height'
		public Keyword getHeightKeyword_5() { return cHeightKeyword_5; }
		
		//height=INT
		public Assignment getHeightAssignment_6() { return cHeightAssignment_6; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_6_0() { return cHeightINTTerminalRuleCall_6_0; }
		
		//'title'
		public Keyword getTitleKeyword_7() { return cTitleKeyword_7; }
		
		//title=STRING
		public Assignment getTitleAssignment_8() { return cTitleAssignment_8; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_8_0() { return cTitleSTRINGTerminalRuleCall_8_0; }
		
		//'pixelPerMeter'
		public Keyword getPixelPerMeterKeyword_9() { return cPixelPerMeterKeyword_9; }
		
		//ppm=INT
		public Assignment getPpmAssignment_10() { return cPpmAssignment_10; }
		
		//INT
		public RuleCall getPpmINTTerminalRuleCall_10_0() { return cPpmINTTerminalRuleCall_10_0; }
		
		//'scenes' '{' scenes+=GameScene* '}' & 'screens' '{' screens+=GameScreen* '}' & 'regions' '{' regions+=GameTextureRegion*
		//'}'
		public UnorderedGroup getUnorderedGroup_11() { return cUnorderedGroup_11; }
		
		//'scenes' '{' scenes+=GameScene* '}'
		public Group getGroup_11_0() { return cGroup_11_0; }
		
		//'scenes'
		public Keyword getScenesKeyword_11_0_0() { return cScenesKeyword_11_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11_0_1() { return cLeftCurlyBracketKeyword_11_0_1; }
		
		//scenes+=GameScene*
		public Assignment getScenesAssignment_11_0_2() { return cScenesAssignment_11_0_2; }
		
		//GameScene
		public RuleCall getScenesGameSceneParserRuleCall_11_0_2_0() { return cScenesGameSceneParserRuleCall_11_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11_0_3() { return cRightCurlyBracketKeyword_11_0_3; }
		
		//'screens' '{' screens+=GameScreen* '}'
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//'screens'
		public Keyword getScreensKeyword_11_1_0() { return cScreensKeyword_11_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11_1_1() { return cLeftCurlyBracketKeyword_11_1_1; }
		
		//screens+=GameScreen*
		public Assignment getScreensAssignment_11_1_2() { return cScreensAssignment_11_1_2; }
		
		//GameScreen
		public RuleCall getScreensGameScreenParserRuleCall_11_1_2_0() { return cScreensGameScreenParserRuleCall_11_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11_1_3() { return cRightCurlyBracketKeyword_11_1_3; }
		
		//'regions' '{' regions+=GameTextureRegion* '}'
		public Group getGroup_11_2() { return cGroup_11_2; }
		
		//'regions'
		public Keyword getRegionsKeyword_11_2_0() { return cRegionsKeyword_11_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11_2_1() { return cLeftCurlyBracketKeyword_11_2_1; }
		
		//regions+=GameTextureRegion*
		public Assignment getRegionsAssignment_11_2_2() { return cRegionsAssignment_11_2_2; }
		
		//GameTextureRegion
		public RuleCall getRegionsGameTextureRegionParserRuleCall_11_2_2_0() { return cRegionsGameTextureRegionParserRuleCall_11_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11_2_3() { return cRightCurlyBracketKeyword_11_2_3; }
	}
	public class GameScreenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameScreen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameScreenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScreenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAtlasKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAtlasNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtlasNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cAtlasNameAssignment_4.eContents().get(0);
		private final Keyword cSceneKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSceneAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSceneGameSceneCrossReference_6_0 = (CrossReference)cSceneAssignment_6.eContents().get(0);
		private final RuleCall cSceneGameSceneIDTerminalRuleCall_6_0_1 = (RuleCall)cSceneGameSceneCrossReference_6_0.eContents().get(1);
		private final Keyword cSpritesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSpritesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSpritesGameSpriteParserRuleCall_9_0 = (RuleCall)cSpritesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//GameScreen:
		//	{GameScreen} 'screen' name=ValidID
		//	'atlas' atlasName=STRING
		//	'scene' scene=[GameScene]
		//	'sprites' '{' sprites+=GameSprite* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GameScreen} 'screen' name=ValidID 'atlas' atlasName=STRING 'scene' scene=[GameScene] 'sprites' '{' sprites+=GameSprite*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{GameScreen}
		public Action getGameScreenAction_0() { return cGameScreenAction_0; }
		
		//'screen'
		public Keyword getScreenKeyword_1() { return cScreenKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'atlas'
		public Keyword getAtlasKeyword_3() { return cAtlasKeyword_3; }
		
		//atlasName=STRING
		public Assignment getAtlasNameAssignment_4() { return cAtlasNameAssignment_4; }
		
		//STRING
		public RuleCall getAtlasNameSTRINGTerminalRuleCall_4_0() { return cAtlasNameSTRINGTerminalRuleCall_4_0; }
		
		//'scene'
		public Keyword getSceneKeyword_5() { return cSceneKeyword_5; }
		
		//scene=[GameScene]
		public Assignment getSceneAssignment_6() { return cSceneAssignment_6; }
		
		//[GameScene]
		public CrossReference getSceneGameSceneCrossReference_6_0() { return cSceneGameSceneCrossReference_6_0; }
		
		//ID
		public RuleCall getSceneGameSceneIDTerminalRuleCall_6_0_1() { return cSceneGameSceneIDTerminalRuleCall_6_0_1; }
		
		//'sprites'
		public Keyword getSpritesKeyword_7() { return cSpritesKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//sprites+=GameSprite*
		public Assignment getSpritesAssignment_9() { return cSpritesAssignment_9; }
		
		//GameSprite
		public RuleCall getSpritesGameSpriteParserRuleCall_9_0() { return cSpritesGameSpriteParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class GameSceneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameScene");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSceneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSceneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasScoreAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasScoreIsScoreKeyword_3_0_0 = (Keyword)cHasScoreAssignment_3_0.eContents().get(0);
		private final Assignment cScoreAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScoreGameScoreParserRuleCall_3_1_0 = (RuleCall)cScoreAssignment_3_1.eContents().get(0);
		
		//GameScene:
		//	{GameScene} 'scene' name=ValidID (hasScore?='isScore' score=GameScore)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameScene} 'scene' name=ValidID (hasScore?='isScore' score=GameScore)?
		public Group getGroup() { return cGroup; }
		
		//{GameScene}
		public Action getGameSceneAction_0() { return cGameSceneAction_0; }
		
		//'scene'
		public Keyword getSceneKeyword_1() { return cSceneKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(hasScore?='isScore' score=GameScore)?
		public Group getGroup_3() { return cGroup_3; }
		
		//hasScore?='isScore'
		public Assignment getHasScoreAssignment_3_0() { return cHasScoreAssignment_3_0; }
		
		//'isScore'
		public Keyword getHasScoreIsScoreKeyword_3_0_0() { return cHasScoreIsScoreKeyword_3_0_0; }
		
		//score=GameScore
		public Assignment getScoreAssignment_3_1() { return cScoreAssignment_3_1; }
		
		//GameScore
		public RuleCall getScoreGameScoreParserRuleCall_3_1_0() { return cScoreGameScoreParserRuleCall_3_1_0; }
	}
	public class GameScoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameScore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameScoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTopPaddingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTopPaddingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTopPaddingINTTerminalRuleCall_2_0 = (RuleCall)cTopPaddingAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDisplaysAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisplaysGameDisplayParserRuleCall_4_0 = (RuleCall)cDisplaysAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GameScore:
		//	{GameScore} 'topPadding' topPadding=INT
		//	'{' displays+=GameDisplay* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GameScore} 'topPadding' topPadding=INT '{' displays+=GameDisplay* '}'
		public Group getGroup() { return cGroup; }
		
		//{GameScore}
		public Action getGameScoreAction_0() { return cGameScoreAction_0; }
		
		//'topPadding'
		public Keyword getTopPaddingKeyword_1() { return cTopPaddingKeyword_1; }
		
		//topPadding=INT
		public Assignment getTopPaddingAssignment_2() { return cTopPaddingAssignment_2; }
		
		//INT
		public RuleCall getTopPaddingINTTerminalRuleCall_2_0() { return cTopPaddingINTTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//displays+=GameDisplay*
		public Assignment getDisplaysAssignment_4() { return cDisplaysAssignment_4; }
		
		//GameDisplay
		public RuleCall getDisplaysGameDisplayParserRuleCall_4_0() { return cDisplaysGameDisplayParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GameDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameDisplayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisplayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cValueTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeGameDisplayValueTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cFormatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFormatAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFormatSTRINGTerminalRuleCall_6_0 = (RuleCall)cFormatAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cHasInitialAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cHasInitialInitialValueKeyword_7_0_0 = (Keyword)cHasInitialAssignment_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Assignment cInitialNumberValueAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cInitialNumberValueSignedNumberParserRuleCall_7_1_0_0 = (RuleCall)cInitialNumberValueAssignment_7_1_0.eContents().get(0);
		private final Assignment cInitialIntValueAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cInitialIntValueINTTerminalRuleCall_7_1_1_0 = (RuleCall)cInitialIntValueAssignment_7_1_1.eContents().get(0);
		private final Assignment cInitialStringValueAssignment_7_1_2 = (Assignment)cAlternatives_7_1.eContents().get(2);
		private final RuleCall cInitialStringValueSTRINGTerminalRuleCall_7_1_2_0 = (RuleCall)cInitialStringValueAssignment_7_1_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cHasDeltaAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cHasDeltaDeltaValueKeyword_8_0_0 = (Keyword)cHasDeltaAssignment_8_0.eContents().get(0);
		private final Assignment cDeltaValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDeltaValueSignedNumberParserRuleCall_8_1_0 = (RuleCall)cDeltaValueAssignment_8_1.eContents().get(0);
		private final Keyword cEachTimePeriodKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cTimePeriodAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cTimePeriodUnsignedNumberParserRuleCall_8_3_0 = (RuleCall)cTimePeriodAssignment_8_3.eContents().get(0);
		private final Assignment cHasAdderAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cHasAdderAddValueKeyword_9_0 = (Keyword)cHasAdderAssignment_9.eContents().get(0);
		private final Assignment cHasSetterAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cHasSetterSetValueKeyword_10_0 = (Keyword)cHasSetterAssignment_10.eContents().get(0);
		
		//GameDisplay:
		//	{GameDisplay} 'display' name=ValidID
		//	'valueType' type=GameDisplayValueType
		//	'format' format=STRING (hasInitial?='initialValue' (initialNumberValue=SignedNumber | initialIntValue=INT |
		//	initialStringValue=STRING))? (hasDelta?='deltaValue' deltaValue=SignedNumber 'eachTimePeriod'
		//	timePeriod=UnsignedNumber)?
		//	hasAdder?='addValue'?
		//	hasSetter?='setValue'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameDisplay} 'display' name=ValidID 'valueType' type=GameDisplayValueType 'format' format=STRING
		//(hasInitial?='initialValue' (initialNumberValue=SignedNumber | initialIntValue=INT | initialStringValue=STRING))?
		//(hasDelta?='deltaValue' deltaValue=SignedNumber 'eachTimePeriod' timePeriod=UnsignedNumber)? hasAdder?='addValue'?
		//hasSetter?='setValue'?
		public Group getGroup() { return cGroup; }
		
		//{GameDisplay}
		public Action getGameDisplayAction_0() { return cGameDisplayAction_0; }
		
		//'display'
		public Keyword getDisplayKeyword_1() { return cDisplayKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'valueType'
		public Keyword getValueTypeKeyword_3() { return cValueTypeKeyword_3; }
		
		//type=GameDisplayValueType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//GameDisplayValueType
		public RuleCall getTypeGameDisplayValueTypeEnumRuleCall_4_0() { return cTypeGameDisplayValueTypeEnumRuleCall_4_0; }
		
		//'format'
		public Keyword getFormatKeyword_5() { return cFormatKeyword_5; }
		
		//format=STRING
		public Assignment getFormatAssignment_6() { return cFormatAssignment_6; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_6_0() { return cFormatSTRINGTerminalRuleCall_6_0; }
		
		//(hasInitial?='initialValue' (initialNumberValue=SignedNumber | initialIntValue=INT | initialStringValue=STRING))?
		public Group getGroup_7() { return cGroup_7; }
		
		//hasInitial?='initialValue'
		public Assignment getHasInitialAssignment_7_0() { return cHasInitialAssignment_7_0; }
		
		//'initialValue'
		public Keyword getHasInitialInitialValueKeyword_7_0_0() { return cHasInitialInitialValueKeyword_7_0_0; }
		
		//initialNumberValue=SignedNumber | initialIntValue=INT | initialStringValue=STRING
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//initialNumberValue=SignedNumber
		public Assignment getInitialNumberValueAssignment_7_1_0() { return cInitialNumberValueAssignment_7_1_0; }
		
		//SignedNumber
		public RuleCall getInitialNumberValueSignedNumberParserRuleCall_7_1_0_0() { return cInitialNumberValueSignedNumberParserRuleCall_7_1_0_0; }
		
		//initialIntValue=INT
		public Assignment getInitialIntValueAssignment_7_1_1() { return cInitialIntValueAssignment_7_1_1; }
		
		//INT
		public RuleCall getInitialIntValueINTTerminalRuleCall_7_1_1_0() { return cInitialIntValueINTTerminalRuleCall_7_1_1_0; }
		
		//initialStringValue=STRING
		public Assignment getInitialStringValueAssignment_7_1_2() { return cInitialStringValueAssignment_7_1_2; }
		
		//STRING
		public RuleCall getInitialStringValueSTRINGTerminalRuleCall_7_1_2_0() { return cInitialStringValueSTRINGTerminalRuleCall_7_1_2_0; }
		
		//(hasDelta?='deltaValue' deltaValue=SignedNumber 'eachTimePeriod' timePeriod=UnsignedNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//hasDelta?='deltaValue'
		public Assignment getHasDeltaAssignment_8_0() { return cHasDeltaAssignment_8_0; }
		
		//'deltaValue'
		public Keyword getHasDeltaDeltaValueKeyword_8_0_0() { return cHasDeltaDeltaValueKeyword_8_0_0; }
		
		//deltaValue=SignedNumber
		public Assignment getDeltaValueAssignment_8_1() { return cDeltaValueAssignment_8_1; }
		
		//SignedNumber
		public RuleCall getDeltaValueSignedNumberParserRuleCall_8_1_0() { return cDeltaValueSignedNumberParserRuleCall_8_1_0; }
		
		//'eachTimePeriod'
		public Keyword getEachTimePeriodKeyword_8_2() { return cEachTimePeriodKeyword_8_2; }
		
		//timePeriod=UnsignedNumber
		public Assignment getTimePeriodAssignment_8_3() { return cTimePeriodAssignment_8_3; }
		
		//UnsignedNumber
		public RuleCall getTimePeriodUnsignedNumberParserRuleCall_8_3_0() { return cTimePeriodUnsignedNumberParserRuleCall_8_3_0; }
		
		//hasAdder?='addValue'?
		public Assignment getHasAdderAssignment_9() { return cHasAdderAssignment_9; }
		
		//'addValue'
		public Keyword getHasAdderAddValueKeyword_9_0() { return cHasAdderAddValueKeyword_9_0; }
		
		//hasSetter?='setValue'?
		public Assignment getHasSetterAssignment_10() { return cHasSetterAssignment_10; }
		
		//'setValue'
		public Keyword getHasSetterSetValueKeyword_10_0() { return cHasSetterSetValueKeyword_10_0; }
	}
	public class GameSpriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameSprite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSpriteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpriteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRadiusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRadiusAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRadiusINTTerminalRuleCall_6_0 = (RuleCall)cRadiusAssignment_6.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cUnorderedGroup_7.eContents().get(0);
		private final Assignment cHasVelocityAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final Keyword cHasVelocityVelocityKeyword_7_0_0_0 = (Keyword)cHasVelocityAssignment_7_0_0.eContents().get(0);
		private final Assignment cVelocityAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cVelocityGameVector2dParserRuleCall_7_0_1_0 = (RuleCall)cVelocityAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cUnorderedGroup_7.eContents().get(1);
		private final Assignment cHasStartPositionAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final Keyword cHasStartPositionStartPositionXKeyword_7_1_0_0 = (Keyword)cHasStartPositionAssignment_7_1_0.eContents().get(0);
		private final Assignment cXAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_7_1_1_0 = (RuleCall)cXAssignment_7_1_1.eContents().get(0);
		private final Keyword cStartPositionYKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Assignment cYAssignment_7_1_3 = (Assignment)cGroup_7_1.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_7_1_3_0 = (RuleCall)cYAssignment_7_1_3.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cUnorderedGroup_7.eContents().get(2);
		private final Assignment cHasSensorAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final Keyword cHasSensorSensorKeyword_7_2_0_0 = (Keyword)cHasSensorAssignment_7_2_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Assignment cVectors2dAssignment_7_2_2 = (Assignment)cGroup_7_2.eContents().get(2);
		private final RuleCall cVectors2dGameVector2dParserRuleCall_7_2_2_0 = (RuleCall)cVectors2dAssignment_7_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2_3 = (Keyword)cGroup_7_2.eContents().get(3);
		private final Keyword cSensorIDKeyword_7_2_4 = (Keyword)cGroup_7_2.eContents().get(4);
		private final Assignment cSensorIDAssignment_7_2_5 = (Assignment)cGroup_7_2.eContents().get(5);
		private final RuleCall cSensorIDINTTerminalRuleCall_7_2_5_0 = (RuleCall)cSensorIDAssignment_7_2_5.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cUnorderedGroup_7.eContents().get(3);
		private final Keyword cInteractsWithKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_3_1 = (Keyword)cGroup_7_3.eContents().get(1);
		private final Assignment cInteractionSpritesAssignment_7_3_2 = (Assignment)cGroup_7_3.eContents().get(2);
		private final CrossReference cInteractionSpritesGameSpriteCrossReference_7_3_2_0 = (CrossReference)cInteractionSpritesAssignment_7_3_2.eContents().get(0);
		private final RuleCall cInteractionSpritesGameSpriteIDTerminalRuleCall_7_3_2_0_1 = (RuleCall)cInteractionSpritesGameSpriteCrossReference_7_3_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3_3 = (Keyword)cGroup_7_3.eContents().get(3);
		private final Group cGroup_7_4 = (Group)cUnorderedGroup_7.eContents().get(4);
		private final Keyword cPropertiesKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_4_1 = (Keyword)cGroup_7_4.eContents().get(1);
		private final Assignment cPropertiesAssignment_7_4_2 = (Assignment)cGroup_7_4.eContents().get(2);
		private final RuleCall cPropertiesGameBodyPropertyParserRuleCall_7_4_2_0 = (RuleCall)cPropertiesAssignment_7_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4_3 = (Keyword)cGroup_7_4.eContents().get(3);
		private final Group cGroup_7_5 = (Group)cUnorderedGroup_7.eContents().get(5);
		private final Keyword cStatesKeyword_7_5_0 = (Keyword)cGroup_7_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_5_1 = (Keyword)cGroup_7_5.eContents().get(1);
		private final Assignment cStatesAssignment_7_5_2 = (Assignment)cGroup_7_5.eContents().get(2);
		private final RuleCall cStatesGameSpriteStateParserRuleCall_7_5_2_0 = (RuleCall)cStatesAssignment_7_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_5_3 = (Keyword)cGroup_7_5.eContents().get(3);
		private final Keyword cInitialStateKeyword_7_5_4 = (Keyword)cGroup_7_5.eContents().get(4);
		private final Assignment cInitialStateAssignment_7_5_5 = (Assignment)cGroup_7_5.eContents().get(5);
		private final CrossReference cInitialStateGameSpriteStateCrossReference_7_5_5_0 = (CrossReference)cInitialStateAssignment_7_5_5.eContents().get(0);
		private final RuleCall cInitialStateGameSpriteStateIDTerminalRuleCall_7_5_5_0_1 = (RuleCall)cInitialStateGameSpriteStateCrossReference_7_5_5_0.eContents().get(1);
		private final Group cGroup_7_6 = (Group)cUnorderedGroup_7.eContents().get(6);
		private final Keyword cEventsKeyword_7_6_0 = (Keyword)cGroup_7_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_6_1 = (Keyword)cGroup_7_6.eContents().get(1);
		private final Assignment cEventsAssignment_7_6_2 = (Assignment)cGroup_7_6.eContents().get(2);
		private final RuleCall cEventsGameSpriteEventParserRuleCall_7_6_2_0 = (RuleCall)cEventsAssignment_7_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_6_3 = (Keyword)cGroup_7_6.eContents().get(3);
		
		//GameSprite:
		//	{GameSprite} 'sprite' name=ValidID 'id' id=INT
		//	'radius' radius=INT ((hasVelocity?='velocity' velocity=GameVector2d)? & (hasStartPosition?='startPositionX' x=INT
		//	'startPositionY' y=INT)? & (hasSensor?='sensor' '{' vectors2d+=GameVector2d* '}' 'sensorID' sensorID=INT)? &
		//	('interactsWith' '{' interactionSprites+=[GameSprite]* '}')? & ('properties' '{' properties+=GameBodyProperty* '}')?
		//	& ('states' '{' states+=GameSpriteState* '}' 'initialState' initialState=[GameSpriteState])? & ('events' '{'
		//	events+=GameSpriteEvent* '}')?);
		@Override public ParserRule getRule() { return rule; }
		
		//{GameSprite} 'sprite' name=ValidID 'id' id=INT 'radius' radius=INT ((hasVelocity?='velocity' velocity=GameVector2d)? &
		//(hasStartPosition?='startPositionX' x=INT 'startPositionY' y=INT)? & (hasSensor?='sensor' '{' vectors2d+=GameVector2d*
		//'}' 'sensorID' sensorID=INT)? & ('interactsWith' '{' interactionSprites+=[GameSprite]* '}')? & ('properties' '{'
		//properties+=GameBodyProperty* '}')? & ('states' '{' states+=GameSpriteState* '}' 'initialState'
		//initialState=[GameSpriteState])? & ('events' '{' events+=GameSpriteEvent* '}')?)
		public Group getGroup() { return cGroup; }
		
		//{GameSprite}
		public Action getGameSpriteAction_0() { return cGameSpriteAction_0; }
		
		//'sprite'
		public Keyword getSpriteKeyword_1() { return cSpriteKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_5() { return cRadiusKeyword_5; }
		
		//radius=INT
		public Assignment getRadiusAssignment_6() { return cRadiusAssignment_6; }
		
		//INT
		public RuleCall getRadiusINTTerminalRuleCall_6_0() { return cRadiusINTTerminalRuleCall_6_0; }
		
		//(hasVelocity?='velocity' velocity=GameVector2d)? & (hasStartPosition?='startPositionX' x=INT 'startPositionY' y=INT)? &
		//(hasSensor?='sensor' '{' vectors2d+=GameVector2d* '}' 'sensorID' sensorID=INT)? & ('interactsWith' '{'
		//interactionSprites+=[GameSprite]* '}')? & ('properties' '{' properties+=GameBodyProperty* '}')? & ('states' '{'
		//states+=GameSpriteState* '}' 'initialState' initialState=[GameSpriteState])? & ('events' '{' events+=GameSpriteEvent*
		//'}')?
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }
		
		//(hasVelocity?='velocity' velocity=GameVector2d)?
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//hasVelocity?='velocity'
		public Assignment getHasVelocityAssignment_7_0_0() { return cHasVelocityAssignment_7_0_0; }
		
		//'velocity'
		public Keyword getHasVelocityVelocityKeyword_7_0_0_0() { return cHasVelocityVelocityKeyword_7_0_0_0; }
		
		//velocity=GameVector2d
		public Assignment getVelocityAssignment_7_0_1() { return cVelocityAssignment_7_0_1; }
		
		//GameVector2d
		public RuleCall getVelocityGameVector2dParserRuleCall_7_0_1_0() { return cVelocityGameVector2dParserRuleCall_7_0_1_0; }
		
		//(hasStartPosition?='startPositionX' x=INT 'startPositionY' y=INT)?
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//hasStartPosition?='startPositionX'
		public Assignment getHasStartPositionAssignment_7_1_0() { return cHasStartPositionAssignment_7_1_0; }
		
		//'startPositionX'
		public Keyword getHasStartPositionStartPositionXKeyword_7_1_0_0() { return cHasStartPositionStartPositionXKeyword_7_1_0_0; }
		
		//x=INT
		public Assignment getXAssignment_7_1_1() { return cXAssignment_7_1_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_7_1_1_0() { return cXINTTerminalRuleCall_7_1_1_0; }
		
		//'startPositionY'
		public Keyword getStartPositionYKeyword_7_1_2() { return cStartPositionYKeyword_7_1_2; }
		
		//y=INT
		public Assignment getYAssignment_7_1_3() { return cYAssignment_7_1_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_7_1_3_0() { return cYINTTerminalRuleCall_7_1_3_0; }
		
		//(hasSensor?='sensor' '{' vectors2d+=GameVector2d* '}' 'sensorID' sensorID=INT)?
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//hasSensor?='sensor'
		public Assignment getHasSensorAssignment_7_2_0() { return cHasSensorAssignment_7_2_0; }
		
		//'sensor'
		public Keyword getHasSensorSensorKeyword_7_2_0_0() { return cHasSensorSensorKeyword_7_2_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_2_1() { return cLeftCurlyBracketKeyword_7_2_1; }
		
		//vectors2d+=GameVector2d*
		public Assignment getVectors2dAssignment_7_2_2() { return cVectors2dAssignment_7_2_2; }
		
		//GameVector2d
		public RuleCall getVectors2dGameVector2dParserRuleCall_7_2_2_0() { return cVectors2dGameVector2dParserRuleCall_7_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_2_3() { return cRightCurlyBracketKeyword_7_2_3; }
		
		//'sensorID'
		public Keyword getSensorIDKeyword_7_2_4() { return cSensorIDKeyword_7_2_4; }
		
		//sensorID=INT
		public Assignment getSensorIDAssignment_7_2_5() { return cSensorIDAssignment_7_2_5; }
		
		//INT
		public RuleCall getSensorIDINTTerminalRuleCall_7_2_5_0() { return cSensorIDINTTerminalRuleCall_7_2_5_0; }
		
		//('interactsWith' '{' interactionSprites+=[GameSprite]* '}')?
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//'interactsWith'
		public Keyword getInteractsWithKeyword_7_3_0() { return cInteractsWithKeyword_7_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_3_1() { return cLeftCurlyBracketKeyword_7_3_1; }
		
		//interactionSprites+=[GameSprite]*
		public Assignment getInteractionSpritesAssignment_7_3_2() { return cInteractionSpritesAssignment_7_3_2; }
		
		//[GameSprite]
		public CrossReference getInteractionSpritesGameSpriteCrossReference_7_3_2_0() { return cInteractionSpritesGameSpriteCrossReference_7_3_2_0; }
		
		//ID
		public RuleCall getInteractionSpritesGameSpriteIDTerminalRuleCall_7_3_2_0_1() { return cInteractionSpritesGameSpriteIDTerminalRuleCall_7_3_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3_3() { return cRightCurlyBracketKeyword_7_3_3; }
		
		//('properties' '{' properties+=GameBodyProperty* '}')?
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//'properties'
		public Keyword getPropertiesKeyword_7_4_0() { return cPropertiesKeyword_7_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_4_1() { return cLeftCurlyBracketKeyword_7_4_1; }
		
		//properties+=GameBodyProperty*
		public Assignment getPropertiesAssignment_7_4_2() { return cPropertiesAssignment_7_4_2; }
		
		//GameBodyProperty
		public RuleCall getPropertiesGameBodyPropertyParserRuleCall_7_4_2_0() { return cPropertiesGameBodyPropertyParserRuleCall_7_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4_3() { return cRightCurlyBracketKeyword_7_4_3; }
		
		//('states' '{' states+=GameSpriteState* '}' 'initialState' initialState=[GameSpriteState])?
		public Group getGroup_7_5() { return cGroup_7_5; }
		
		//'states'
		public Keyword getStatesKeyword_7_5_0() { return cStatesKeyword_7_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_5_1() { return cLeftCurlyBracketKeyword_7_5_1; }
		
		//states+=GameSpriteState*
		public Assignment getStatesAssignment_7_5_2() { return cStatesAssignment_7_5_2; }
		
		//GameSpriteState
		public RuleCall getStatesGameSpriteStateParserRuleCall_7_5_2_0() { return cStatesGameSpriteStateParserRuleCall_7_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_5_3() { return cRightCurlyBracketKeyword_7_5_3; }
		
		//'initialState'
		public Keyword getInitialStateKeyword_7_5_4() { return cInitialStateKeyword_7_5_4; }
		
		//initialState=[GameSpriteState]
		public Assignment getInitialStateAssignment_7_5_5() { return cInitialStateAssignment_7_5_5; }
		
		//[GameSpriteState]
		public CrossReference getInitialStateGameSpriteStateCrossReference_7_5_5_0() { return cInitialStateGameSpriteStateCrossReference_7_5_5_0; }
		
		//ID
		public RuleCall getInitialStateGameSpriteStateIDTerminalRuleCall_7_5_5_0_1() { return cInitialStateGameSpriteStateIDTerminalRuleCall_7_5_5_0_1; }
		
		//('events' '{' events+=GameSpriteEvent* '}')?
		public Group getGroup_7_6() { return cGroup_7_6; }
		
		//'events'
		public Keyword getEventsKeyword_7_6_0() { return cEventsKeyword_7_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_6_1() { return cLeftCurlyBracketKeyword_7_6_1; }
		
		//events+=GameSpriteEvent*
		public Assignment getEventsAssignment_7_6_2() { return cEventsAssignment_7_6_2; }
		
		//GameSpriteEvent
		public RuleCall getEventsGameSpriteEventParserRuleCall_7_6_2_0() { return cEventsGameSpriteEventParserRuleCall_7_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_6_3() { return cRightCurlyBracketKeyword_7_6_3; }
	}
	public class GameVector2dElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameVector2d");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameVector2dAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXSignedIntegerParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYSignedIntegerParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GameVector2d:
		//	{GameVector2d} 'vector(' x=SignedInteger ',' y=SignedInteger ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{GameVector2d} 'vector(' x=SignedInteger ',' y=SignedInteger ')'
		public Group getGroup() { return cGroup; }
		
		//{GameVector2d}
		public Action getGameVector2dAction_0() { return cGameVector2dAction_0; }
		
		//'vector('
		public Keyword getVectorKeyword_1() { return cVectorKeyword_1; }
		
		//x=SignedInteger
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//SignedInteger
		public RuleCall getXSignedIntegerParserRuleCall_2_0() { return cXSignedIntegerParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=SignedInteger
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//SignedInteger
		public RuleCall getYSignedIntegerParserRuleCall_4_0() { return cYSignedIntegerParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class GameSpriteStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameSpriteState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSpriteStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleGameRuleParserRuleCall_4_0 = (RuleCall)cRuleAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cAnimationAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cAnimationGameSpriteAnimationParserRuleCall_5_0_0_0 = (RuleCall)cAnimationAssignment_5_0_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cIfFinishedAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final Keyword cIfFinishedIfFinishedKeyword_5_0_1_0_0 = (Keyword)cIfFinishedAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cSetFalseKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Assignment cSetFalseAssignment_5_0_1_2 = (Assignment)cGroup_5_0_1.eContents().get(2);
		private final CrossReference cSetFalseGameBodyPropertyCrossReference_5_0_1_2_0 = (CrossReference)cSetFalseAssignment_5_0_1_2.eContents().get(0);
		private final RuleCall cSetFalseGameBodyPropertyIDTerminalRuleCall_5_0_1_2_0_1 = (RuleCall)cSetFalseGameBodyPropertyCrossReference_5_0_1_2_0.eContents().get(1);
		private final Assignment cStandAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cStandGameSpriteStandParserRuleCall_5_1_0 = (RuleCall)cStandAssignment_5_1.eContents().get(0);
		
		//GameSpriteState:
		//	{GameSpriteState} 'state' name=ValidID 'if' rule=GameRule (animation=GameSpriteAnimation (ifFinished?='ifFinished'
		//	'setFalse' setFalse=[GameBodyProperty])? | stand=GameSpriteStand)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameSpriteState} 'state' name=ValidID 'if' rule=GameRule (animation=GameSpriteAnimation (ifFinished?='ifFinished'
		//'setFalse' setFalse=[GameBodyProperty])? | stand=GameSpriteStand)?
		public Group getGroup() { return cGroup; }
		
		//{GameSpriteState}
		public Action getGameSpriteStateAction_0() { return cGameSpriteStateAction_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'if'
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }
		
		//rule=GameRule
		public Assignment getRuleAssignment_4() { return cRuleAssignment_4; }
		
		//GameRule
		public RuleCall getRuleGameRuleParserRuleCall_4_0() { return cRuleGameRuleParserRuleCall_4_0; }
		
		//(animation=GameSpriteAnimation (ifFinished?='ifFinished' 'setFalse' setFalse=[GameBodyProperty])? |
		//stand=GameSpriteStand)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//animation=GameSpriteAnimation (ifFinished?='ifFinished' 'setFalse' setFalse=[GameBodyProperty])?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//animation=GameSpriteAnimation
		public Assignment getAnimationAssignment_5_0_0() { return cAnimationAssignment_5_0_0; }
		
		//GameSpriteAnimation
		public RuleCall getAnimationGameSpriteAnimationParserRuleCall_5_0_0_0() { return cAnimationGameSpriteAnimationParserRuleCall_5_0_0_0; }
		
		//(ifFinished?='ifFinished' 'setFalse' setFalse=[GameBodyProperty])?
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }
		
		//ifFinished?='ifFinished'
		public Assignment getIfFinishedAssignment_5_0_1_0() { return cIfFinishedAssignment_5_0_1_0; }
		
		//'ifFinished'
		public Keyword getIfFinishedIfFinishedKeyword_5_0_1_0_0() { return cIfFinishedIfFinishedKeyword_5_0_1_0_0; }
		
		//'setFalse'
		public Keyword getSetFalseKeyword_5_0_1_1() { return cSetFalseKeyword_5_0_1_1; }
		
		//setFalse=[GameBodyProperty]
		public Assignment getSetFalseAssignment_5_0_1_2() { return cSetFalseAssignment_5_0_1_2; }
		
		//[GameBodyProperty]
		public CrossReference getSetFalseGameBodyPropertyCrossReference_5_0_1_2_0() { return cSetFalseGameBodyPropertyCrossReference_5_0_1_2_0; }
		
		//ID
		public RuleCall getSetFalseGameBodyPropertyIDTerminalRuleCall_5_0_1_2_0_1() { return cSetFalseGameBodyPropertyIDTerminalRuleCall_5_0_1_2_0_1; }
		
		//stand=GameSpriteStand
		public Assignment getStandAssignment_5_1() { return cStandAssignment_5_1; }
		
		//GameSpriteStand
		public RuleCall getStandGameSpriteStandParserRuleCall_5_1_0() { return cStandGameSpriteStandParserRuleCall_5_1_0; }
	}
	public class GameBodyPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameBodyProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameBodyPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOnUpdateAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOnUpdateOnUpdateIfTrueKeyword_3_0_0 = (Keyword)cOnUpdateAssignment_3_0.eContents().get(0);
		private final Assignment cBodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_3_1_0 = (RuleCall)cBodyAssignment_3_1.eContents().get(0);
		
		//GameBodyProperty:
		//	{GameBodyProperty} 'property' name=ValidID (onUpdate?='onUpdateIfTrue' body=XBlockExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameBodyProperty} 'property' name=ValidID (onUpdate?='onUpdateIfTrue' body=XBlockExpression)?
		public Group getGroup() { return cGroup; }
		
		//{GameBodyProperty}
		public Action getGameBodyPropertyAction_0() { return cGameBodyPropertyAction_0; }
		
		//'property'
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//(onUpdate?='onUpdateIfTrue' body=XBlockExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//onUpdate?='onUpdateIfTrue'
		public Assignment getOnUpdateAssignment_3_0() { return cOnUpdateAssignment_3_0; }
		
		//'onUpdateIfTrue'
		public Keyword getOnUpdateOnUpdateIfTrueKeyword_3_0_0() { return cOnUpdateOnUpdateIfTrueKeyword_3_0_0; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_3_1() { return cBodyAssignment_3_1; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_3_1_0() { return cBodyXBlockExpressionParserRuleCall_3_1_0; }
	}
	public class GameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//GameRule:
		//	{GameRule} 'isTrue' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameRule} 'isTrue' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//{GameRule}
		public Action getGameRuleAction_0() { return cGameRuleAction_0; }
		
		//'isTrue'
		public Keyword getIsTrueKeyword_1() { return cIsTrueKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' params+=FullJvmFormalParameter)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class GameSpriteAnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameSpriteAnimation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSpriteAnimationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnimationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cDurationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDurationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDurationUnsignedNumberParserRuleCall_4_0 = (RuleCall)cDurationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cHasFramesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cHasFramesFramesKeyword_5_0_0 = (Keyword)cHasFramesAssignment_5_0.eContents().get(0);
		private final Assignment cFramesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFramesINTTerminalRuleCall_5_1_0 = (RuleCall)cFramesAssignment_5_1.eContents().get(0);
		private final Keyword cStartFrameKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cOffsetAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cOffsetINTTerminalRuleCall_5_3_0 = (RuleCall)cOffsetAssignment_5_3.eContents().get(0);
		private final Keyword cFromKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cRegionAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final CrossReference cRegionGameTextureRegionCrossReference_5_5_0 = (CrossReference)cRegionAssignment_5_5.eContents().get(0);
		private final RuleCall cRegionGameTextureRegionIDTerminalRuleCall_5_5_0_1 = (RuleCall)cRegionGameTextureRegionCrossReference_5_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHasStandsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cHasStandsStandsKeyword_6_0_0 = (Keyword)cHasStandsAssignment_6_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cStandsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cStandsGameSpriteStandParserRuleCall_6_2_0 = (RuleCall)cStandsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//GameSpriteAnimation:
		//	{GameSpriteAnimation} 'animation' name=ValidID 'duration' duration=UnsignedNumber (hasFrames?='frames' frames=INT
		//	'startFrame' offset=INT 'from' region=[GameTextureRegion])? (hasStands?='stands' '{' stands+=GameSpriteStand* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameSpriteAnimation} 'animation' name=ValidID 'duration' duration=UnsignedNumber (hasFrames?='frames' frames=INT
		//'startFrame' offset=INT 'from' region=[GameTextureRegion])? (hasStands?='stands' '{' stands+=GameSpriteStand* '}')?
		public Group getGroup() { return cGroup; }
		
		//{GameSpriteAnimation}
		public Action getGameSpriteAnimationAction_0() { return cGameSpriteAnimationAction_0; }
		
		//'animation'
		public Keyword getAnimationKeyword_1() { return cAnimationKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'duration'
		public Keyword getDurationKeyword_3() { return cDurationKeyword_3; }
		
		//duration=UnsignedNumber
		public Assignment getDurationAssignment_4() { return cDurationAssignment_4; }
		
		//UnsignedNumber
		public RuleCall getDurationUnsignedNumberParserRuleCall_4_0() { return cDurationUnsignedNumberParserRuleCall_4_0; }
		
		//(hasFrames?='frames' frames=INT 'startFrame' offset=INT 'from' region=[GameTextureRegion])?
		public Group getGroup_5() { return cGroup_5; }
		
		//hasFrames?='frames'
		public Assignment getHasFramesAssignment_5_0() { return cHasFramesAssignment_5_0; }
		
		//'frames'
		public Keyword getHasFramesFramesKeyword_5_0_0() { return cHasFramesFramesKeyword_5_0_0; }
		
		//frames=INT
		public Assignment getFramesAssignment_5_1() { return cFramesAssignment_5_1; }
		
		//INT
		public RuleCall getFramesINTTerminalRuleCall_5_1_0() { return cFramesINTTerminalRuleCall_5_1_0; }
		
		//'startFrame'
		public Keyword getStartFrameKeyword_5_2() { return cStartFrameKeyword_5_2; }
		
		//offset=INT
		public Assignment getOffsetAssignment_5_3() { return cOffsetAssignment_5_3; }
		
		//INT
		public RuleCall getOffsetINTTerminalRuleCall_5_3_0() { return cOffsetINTTerminalRuleCall_5_3_0; }
		
		//'from'
		public Keyword getFromKeyword_5_4() { return cFromKeyword_5_4; }
		
		//region=[GameTextureRegion]
		public Assignment getRegionAssignment_5_5() { return cRegionAssignment_5_5; }
		
		//[GameTextureRegion]
		public CrossReference getRegionGameTextureRegionCrossReference_5_5_0() { return cRegionGameTextureRegionCrossReference_5_5_0; }
		
		//ID
		public RuleCall getRegionGameTextureRegionIDTerminalRuleCall_5_5_0_1() { return cRegionGameTextureRegionIDTerminalRuleCall_5_5_0_1; }
		
		//(hasStands?='stands' '{' stands+=GameSpriteStand* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//hasStands?='stands'
		public Assignment getHasStandsAssignment_6_0() { return cHasStandsAssignment_6_0; }
		
		//'stands'
		public Keyword getHasStandsStandsKeyword_6_0_0() { return cHasStandsStandsKeyword_6_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//stands+=GameSpriteStand*
		public Assignment getStandsAssignment_6_2() { return cStandsAssignment_6_2; }
		
		//GameSpriteStand
		public RuleCall getStandsGameSpriteStandParserRuleCall_6_2_0() { return cStandsGameSpriteStandParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class GameSpriteStandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameSpriteStand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSpriteStandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWhichFrameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOffsetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOffsetINTTerminalRuleCall_4_0 = (RuleCall)cOffsetAssignment_4.eContents().get(0);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRegionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRegionGameTextureRegionCrossReference_6_0 = (CrossReference)cRegionAssignment_6.eContents().get(0);
		private final RuleCall cRegionGameTextureRegionIDTerminalRuleCall_6_0_1 = (RuleCall)cRegionGameTextureRegionCrossReference_6_0.eContents().get(1);
		
		//GameSpriteStand:
		//	{GameSpriteStand} 'stand' name=ValidID 'whichFrame' offset=INT 'from' region=[GameTextureRegion];
		@Override public ParserRule getRule() { return rule; }
		
		//{GameSpriteStand} 'stand' name=ValidID 'whichFrame' offset=INT 'from' region=[GameTextureRegion]
		public Group getGroup() { return cGroup; }
		
		//{GameSpriteStand}
		public Action getGameSpriteStandAction_0() { return cGameSpriteStandAction_0; }
		
		//'stand'
		public Keyword getStandKeyword_1() { return cStandKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'whichFrame'
		public Keyword getWhichFrameKeyword_3() { return cWhichFrameKeyword_3; }
		
		//offset=INT
		public Assignment getOffsetAssignment_4() { return cOffsetAssignment_4; }
		
		//INT
		public RuleCall getOffsetINTTerminalRuleCall_4_0() { return cOffsetINTTerminalRuleCall_4_0; }
		
		//'from'
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }
		
		//region=[GameTextureRegion]
		public Assignment getRegionAssignment_6() { return cRegionAssignment_6; }
		
		//[GameTextureRegion]
		public CrossReference getRegionGameTextureRegionCrossReference_6_0() { return cRegionGameTextureRegionCrossReference_6_0; }
		
		//ID
		public RuleCall getRegionGameTextureRegionIDTerminalRuleCall_6_0_1() { return cRegionGameTextureRegionIDTerminalRuleCall_6_0_1; }
	}
	public class GameTextureRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameTextureRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameTextureRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRegionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRegionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegionSTRINGTerminalRuleCall_4_0 = (RuleCall)cRegionAssignment_4.eContents().get(0);
		private final Keyword cWidthKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWidthAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWidthINTTerminalRuleCall_6_0 = (RuleCall)cWidthAssignment_6.eContents().get(0);
		private final Keyword cHeightKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHeightINTTerminalRuleCall_8_0 = (RuleCall)cHeightAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPositionOffsetXKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOffsetXAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOffsetXSignedNumberParserRuleCall_9_1_0 = (RuleCall)cOffsetXAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cPositionOffsetYKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cOffsetYAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOffsetYSignedNumberParserRuleCall_10_1_0 = (RuleCall)cOffsetYAssignment_10_1.eContents().get(0);
		private final Assignment cFlipXAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cFlipXFlipXKeyword_11_0 = (Keyword)cFlipXAssignment_11.eContents().get(0);
		private final Assignment cFlipYAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cFlipYFlipYKeyword_12_0 = (Keyword)cFlipYAssignment_12.eContents().get(0);
		
		//GameTextureRegion:
		//	{GameTextureRegion} 'region' name=ValidID 'name' region=STRING 'width' width=INT 'height' height=INT
		//	('positionOffsetX' offsetX=SignedNumber)? ('positionOffsetY' offsetY=SignedNumber)?
		//	flipX?='flipX'? flipY?='flipY'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameTextureRegion} 'region' name=ValidID 'name' region=STRING 'width' width=INT 'height' height=INT ('positionOffsetX'
		//offsetX=SignedNumber)? ('positionOffsetY' offsetY=SignedNumber)? flipX?='flipX'? flipY?='flipY'?
		public Group getGroup() { return cGroup; }
		
		//{GameTextureRegion}
		public Action getGameTextureRegionAction_0() { return cGameTextureRegionAction_0; }
		
		//'region'
		public Keyword getRegionKeyword_1() { return cRegionKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//region=STRING
		public Assignment getRegionAssignment_4() { return cRegionAssignment_4; }
		
		//STRING
		public RuleCall getRegionSTRINGTerminalRuleCall_4_0() { return cRegionSTRINGTerminalRuleCall_4_0; }
		
		//'width'
		public Keyword getWidthKeyword_5() { return cWidthKeyword_5; }
		
		//width=INT
		public Assignment getWidthAssignment_6() { return cWidthAssignment_6; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_6_0() { return cWidthINTTerminalRuleCall_6_0; }
		
		//'height'
		public Keyword getHeightKeyword_7() { return cHeightKeyword_7; }
		
		//height=INT
		public Assignment getHeightAssignment_8() { return cHeightAssignment_8; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_8_0() { return cHeightINTTerminalRuleCall_8_0; }
		
		//('positionOffsetX' offsetX=SignedNumber)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'positionOffsetX'
		public Keyword getPositionOffsetXKeyword_9_0() { return cPositionOffsetXKeyword_9_0; }
		
		//offsetX=SignedNumber
		public Assignment getOffsetXAssignment_9_1() { return cOffsetXAssignment_9_1; }
		
		//SignedNumber
		public RuleCall getOffsetXSignedNumberParserRuleCall_9_1_0() { return cOffsetXSignedNumberParserRuleCall_9_1_0; }
		
		//('positionOffsetY' offsetY=SignedNumber)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'positionOffsetY'
		public Keyword getPositionOffsetYKeyword_10_0() { return cPositionOffsetYKeyword_10_0; }
		
		//offsetY=SignedNumber
		public Assignment getOffsetYAssignment_10_1() { return cOffsetYAssignment_10_1; }
		
		//SignedNumber
		public RuleCall getOffsetYSignedNumberParserRuleCall_10_1_0() { return cOffsetYSignedNumberParserRuleCall_10_1_0; }
		
		//flipX?='flipX'?
		public Assignment getFlipXAssignment_11() { return cFlipXAssignment_11; }
		
		//'flipX'
		public Keyword getFlipXFlipXKeyword_11_0() { return cFlipXFlipXKeyword_11_0; }
		
		//flipY?='flipY'?
		public Assignment getFlipYAssignment_12() { return cFlipYAssignment_12; }
		
		//'flipY'
		public Keyword getFlipYFlipYKeyword_12_0() { return cFlipYFlipYKeyword_12_0; }
	}
	public class GameSpriteEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameSpriteEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameSpriteEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//GameSpriteEvent:
		//	{GameSpriteEvent} 'event' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)?
		//	')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{GameSpriteEvent} 'event' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//{GameSpriteEvent}
		public Action getGameSpriteEventAction_0() { return cGameSpriteEventAction_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' params+=FullJvmFormalParameter)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class SignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.SignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUnsignedNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedNumber ecore::EFloat:
		//	'-'? UnsignedNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? UnsignedNumber
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//UnsignedNumber
		public RuleCall getUnsignedNumberParserRuleCall_1() { return cUnsignedNumberParserRuleCall_1; }
	}
	public class UnsignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.UnsignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//UnsignedNumber ecore::EFloat:
		//	INT ('.' INT);
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInteger ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class GameDisplayValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameDisplayValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntNumberKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFloatDecimalKeyword_1_0 = (Keyword)cFloatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStringTextKeyword_2_0 = (Keyword)cStringEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GameDisplayValueType:
		//	int='number' |
		//	float='decimal' |
		//	String='text';
		public EnumRule getRule() { return rule; }
		
		//int='number' | float='decimal' | String='text'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int='number'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//'number'
		public Keyword getIntNumberKeyword_0_0() { return cIntNumberKeyword_0_0; }
		
		//float='decimal'
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_1() { return cFloatEnumLiteralDeclaration_1; }
		
		//'decimal'
		public Keyword getFloatDecimalKeyword_1_0() { return cFloatDecimalKeyword_1_0; }
		
		//String='text'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_2() { return cStringEnumLiteralDeclaration_2; }
		
		//'text'
		public Keyword getStringTextKeyword_2_0() { return cStringTextKeyword_2_0; }
	}
	public class GameScreenOrientationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.hypermodel.games.engine.GameDSL.GameScreenOrientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLandscapeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLandscapeLandscapeKeyword_0_0 = (Keyword)cLandscapeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPortraitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPortraitPortraitKeyword_1_0 = (Keyword)cPortraitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GameScreenOrientation:
		//	landscape |
		//	portrait;
		public EnumRule getRule() { return rule; }
		
		//landscape | portrait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//landscape
		public EnumLiteralDeclaration getLandscapeEnumLiteralDeclaration_0() { return cLandscapeEnumLiteralDeclaration_0; }
		
		//'landscape'
		public Keyword getLandscapeLandscapeKeyword_0_0() { return cLandscapeLandscapeKeyword_0_0; }
		
		//portrait
		public EnumLiteralDeclaration getPortraitEnumLiteralDeclaration_1() { return cPortraitEnumLiteralDeclaration_1; }
		
		//'portrait'
		public Keyword getPortraitPortraitKeyword_1_0() { return cPortraitPortraitKeyword_1_0; }
	}
	
	private final GameModelElements pGameModel;
	private final GamePackageElements pGamePackage;
	private final GamePlatformConfigElements pGamePlatformConfig;
	private final GamePlatformConfigAndroidElements pGamePlatformConfigAndroid;
	private final GamePlatformConfigIOSElements pGamePlatformConfigIOS;
	private final GamePlatformConfigIOSMOEElements pGamePlatformConfigIOSMOE;
	private final GameRootElements pGameRoot;
	private final GameScreenElements pGameScreen;
	private final GameSceneElements pGameScene;
	private final GameScoreElements pGameScore;
	private final GameDisplayElements pGameDisplay;
	private final GameSpriteElements pGameSprite;
	private final GameVector2dElements pGameVector2d;
	private final GameSpriteStateElements pGameSpriteState;
	private final GameBodyPropertyElements pGameBodyProperty;
	private final GameRuleElements pGameRule;
	private final GameSpriteAnimationElements pGameSpriteAnimation;
	private final GameSpriteStandElements pGameSpriteStand;
	private final GameTextureRegionElements pGameTextureRegion;
	private final GameSpriteEventElements pGameSpriteEvent;
	private final GameDisplayValueTypeElements eGameDisplayValueType;
	private final GameScreenOrientationElements eGameScreenOrientation;
	private final SignedNumberElements pSignedNumber;
	private final UnsignedNumberElements pUnsignedNumber;
	private final SignedIntegerElements pSignedInteger;
	
	private final Grammar grammar;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public GameDSLGrammarAccess(GrammarProvider grammarProvider,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pGameModel = new GameModelElements();
		this.pGamePackage = new GamePackageElements();
		this.pGamePlatformConfig = new GamePlatformConfigElements();
		this.pGamePlatformConfigAndroid = new GamePlatformConfigAndroidElements();
		this.pGamePlatformConfigIOS = new GamePlatformConfigIOSElements();
		this.pGamePlatformConfigIOSMOE = new GamePlatformConfigIOSMOEElements();
		this.pGameRoot = new GameRootElements();
		this.pGameScreen = new GameScreenElements();
		this.pGameScene = new GameSceneElements();
		this.pGameScore = new GameScoreElements();
		this.pGameDisplay = new GameDisplayElements();
		this.pGameSprite = new GameSpriteElements();
		this.pGameVector2d = new GameVector2dElements();
		this.pGameSpriteState = new GameSpriteStateElements();
		this.pGameBodyProperty = new GameBodyPropertyElements();
		this.pGameRule = new GameRuleElements();
		this.pGameSpriteAnimation = new GameSpriteAnimationElements();
		this.pGameSpriteStand = new GameSpriteStandElements();
		this.pGameTextureRegion = new GameTextureRegionElements();
		this.pGameSpriteEvent = new GameSpriteEventElements();
		this.eGameDisplayValueType = new GameDisplayValueTypeElements();
		this.eGameScreenOrientation = new GameScreenOrientationElements();
		this.pSignedNumber = new SignedNumberElements();
		this.pUnsignedNumber = new UnsignedNumberElements();
		this.pSignedInteger = new SignedIntegerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.hypermodel.games.engine.GameDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//GameModel:
	//	importSection=XImportSection?
	//	packages+=GamePackage*;
	public GameModelElements getGameModelAccess() {
		return pGameModel;
	}
	
	public ParserRule getGameModelRule() {
		return getGameModelAccess().getRule();
	}
	
	//GamePackage:
	//	'package' name=QualifiedName '{'
	//	config=GamePlatformConfig
	//	games+=GameRoot*
	//	'}';
	public GamePackageElements getGamePackageAccess() {
		return pGamePackage;
	}
	
	public ParserRule getGamePackageRule() {
		return getGamePackageAccess().getRule();
	}
	
	//GamePlatformConfig:
	//	{GamePlatformConfig}
	//	'configuration' '{'
	//	android=GamePlatformConfigAndroid
	//	ios=GamePlatformConfigIOS
	//	iosmoe=GamePlatformConfigIOSMOE
	//	'}';
	public GamePlatformConfigElements getGamePlatformConfigAccess() {
		return pGamePlatformConfig;
	}
	
	public ParserRule getGamePlatformConfigRule() {
		return getGamePlatformConfigAccess().getRule();
	}
	
	//GamePlatformConfigAndroid:
	//	{GamePlatformConfigAndroid}
	//	'android' '{'
	//	'minAndroidVersion' minAndroidVersion=INT
	//	'targetAndroidVersion' targetAndroidVersion=INT
	//	'SDKApiLevel' apiLevel=INT
	//	'orientation' orientation=GameScreenOrientation (('icon' appIcon=STRING)? & ('name' appName=STRING)? & ('label'
	//	appLabel=STRING)?) useAccelerometer?='useAccelerometer'?
	//	'}';
	public GamePlatformConfigAndroidElements getGamePlatformConfigAndroidAccess() {
		return pGamePlatformConfigAndroid;
	}
	
	public ParserRule getGamePlatformConfigAndroidRule() {
		return getGamePlatformConfigAndroidAccess().getRule();
	}
	
	//GamePlatformConfigIOS:
	//	{GamePlatformConfigIOS}
	//	'ios' '{'
	//	useAccelerometer?='useAccelerometer'? '}';
	public GamePlatformConfigIOSElements getGamePlatformConfigIOSAccess() {
		return pGamePlatformConfigIOS;
	}
	
	public ParserRule getGamePlatformConfigIOSRule() {
		return getGamePlatformConfigIOSAccess().getRule();
	}
	
	//GamePlatformConfigIOSMOE:
	//	{GamePlatformConfigIOSMOE}
	//	'iosmoe' '{'
	//	useAccelerometer?='useAccelerometer'? '}';
	public GamePlatformConfigIOSMOEElements getGamePlatformConfigIOSMOEAccess() {
		return pGamePlatformConfigIOSMOE;
	}
	
	public ParserRule getGamePlatformConfigIOSMOERule() {
		return getGamePlatformConfigIOSMOEAccess().getRule();
	}
	
	//GameRoot:
	//	{GameRoot} 'game' name=ValidID
	//	'width' width=INT 'height' height=INT 'title' title=STRING 'pixelPerMeter' ppm=INT ('scenes' '{' scenes+=GameScene*
	//	'}' &
	//	'screens' '{' screens+=GameScreen* '}' &
	//	'regions' '{' regions+=GameTextureRegion* '}');
	public GameRootElements getGameRootAccess() {
		return pGameRoot;
	}
	
	public ParserRule getGameRootRule() {
		return getGameRootAccess().getRule();
	}
	
	//GameScreen:
	//	{GameScreen} 'screen' name=ValidID
	//	'atlas' atlasName=STRING
	//	'scene' scene=[GameScene]
	//	'sprites' '{' sprites+=GameSprite* '}';
	public GameScreenElements getGameScreenAccess() {
		return pGameScreen;
	}
	
	public ParserRule getGameScreenRule() {
		return getGameScreenAccess().getRule();
	}
	
	//GameScene:
	//	{GameScene} 'scene' name=ValidID (hasScore?='isScore' score=GameScore)?;
	public GameSceneElements getGameSceneAccess() {
		return pGameScene;
	}
	
	public ParserRule getGameSceneRule() {
		return getGameSceneAccess().getRule();
	}
	
	//GameScore:
	//	{GameScore} 'topPadding' topPadding=INT
	//	'{' displays+=GameDisplay* '}';
	public GameScoreElements getGameScoreAccess() {
		return pGameScore;
	}
	
	public ParserRule getGameScoreRule() {
		return getGameScoreAccess().getRule();
	}
	
	//GameDisplay:
	//	{GameDisplay} 'display' name=ValidID
	//	'valueType' type=GameDisplayValueType
	//	'format' format=STRING (hasInitial?='initialValue' (initialNumberValue=SignedNumber | initialIntValue=INT |
	//	initialStringValue=STRING))? (hasDelta?='deltaValue' deltaValue=SignedNumber 'eachTimePeriod'
	//	timePeriod=UnsignedNumber)?
	//	hasAdder?='addValue'?
	//	hasSetter?='setValue'?;
	public GameDisplayElements getGameDisplayAccess() {
		return pGameDisplay;
	}
	
	public ParserRule getGameDisplayRule() {
		return getGameDisplayAccess().getRule();
	}
	
	//GameSprite:
	//	{GameSprite} 'sprite' name=ValidID 'id' id=INT
	//	'radius' radius=INT ((hasVelocity?='velocity' velocity=GameVector2d)? & (hasStartPosition?='startPositionX' x=INT
	//	'startPositionY' y=INT)? & (hasSensor?='sensor' '{' vectors2d+=GameVector2d* '}' 'sensorID' sensorID=INT)? &
	//	('interactsWith' '{' interactionSprites+=[GameSprite]* '}')? & ('properties' '{' properties+=GameBodyProperty* '}')?
	//	& ('states' '{' states+=GameSpriteState* '}' 'initialState' initialState=[GameSpriteState])? & ('events' '{'
	//	events+=GameSpriteEvent* '}')?);
	public GameSpriteElements getGameSpriteAccess() {
		return pGameSprite;
	}
	
	public ParserRule getGameSpriteRule() {
		return getGameSpriteAccess().getRule();
	}
	
	//GameVector2d:
	//	{GameVector2d} 'vector(' x=SignedInteger ',' y=SignedInteger ')';
	public GameVector2dElements getGameVector2dAccess() {
		return pGameVector2d;
	}
	
	public ParserRule getGameVector2dRule() {
		return getGameVector2dAccess().getRule();
	}
	
	//GameSpriteState:
	//	{GameSpriteState} 'state' name=ValidID 'if' rule=GameRule (animation=GameSpriteAnimation (ifFinished?='ifFinished'
	//	'setFalse' setFalse=[GameBodyProperty])? | stand=GameSpriteStand)?;
	public GameSpriteStateElements getGameSpriteStateAccess() {
		return pGameSpriteState;
	}
	
	public ParserRule getGameSpriteStateRule() {
		return getGameSpriteStateAccess().getRule();
	}
	
	//GameBodyProperty:
	//	{GameBodyProperty} 'property' name=ValidID (onUpdate?='onUpdateIfTrue' body=XBlockExpression)?;
	public GameBodyPropertyElements getGameBodyPropertyAccess() {
		return pGameBodyProperty;
	}
	
	public ParserRule getGameBodyPropertyRule() {
		return getGameBodyPropertyAccess().getRule();
	}
	
	//GameRule:
	//	{GameRule} 'isTrue' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)? ')'
	//	body=XBlockExpression;
	public GameRuleElements getGameRuleAccess() {
		return pGameRule;
	}
	
	public ParserRule getGameRuleRule() {
		return getGameRuleAccess().getRule();
	}
	
	//GameSpriteAnimation:
	//	{GameSpriteAnimation} 'animation' name=ValidID 'duration' duration=UnsignedNumber (hasFrames?='frames' frames=INT
	//	'startFrame' offset=INT 'from' region=[GameTextureRegion])? (hasStands?='stands' '{' stands+=GameSpriteStand* '}')?;
	public GameSpriteAnimationElements getGameSpriteAnimationAccess() {
		return pGameSpriteAnimation;
	}
	
	public ParserRule getGameSpriteAnimationRule() {
		return getGameSpriteAnimationAccess().getRule();
	}
	
	//GameSpriteStand:
	//	{GameSpriteStand} 'stand' name=ValidID 'whichFrame' offset=INT 'from' region=[GameTextureRegion];
	public GameSpriteStandElements getGameSpriteStandAccess() {
		return pGameSpriteStand;
	}
	
	public ParserRule getGameSpriteStandRule() {
		return getGameSpriteStandAccess().getRule();
	}
	
	//GameTextureRegion:
	//	{GameTextureRegion} 'region' name=ValidID 'name' region=STRING 'width' width=INT 'height' height=INT
	//	('positionOffsetX' offsetX=SignedNumber)? ('positionOffsetY' offsetY=SignedNumber)?
	//	flipX?='flipX'? flipY?='flipY'?;
	public GameTextureRegionElements getGameTextureRegionAccess() {
		return pGameTextureRegion;
	}
	
	public ParserRule getGameTextureRegionRule() {
		return getGameTextureRegionAccess().getRule();
	}
	
	//GameSpriteEvent:
	//	{GameSpriteEvent} 'event' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)?)?
	//	')'
	//	body=XBlockExpression;
	public GameSpriteEventElements getGameSpriteEventAccess() {
		return pGameSpriteEvent;
	}
	
	public ParserRule getGameSpriteEventRule() {
		return getGameSpriteEventAccess().getRule();
	}
	
	//enum GameDisplayValueType:
	//	int='number' |
	//	float='decimal' |
	//	String='text';
	public GameDisplayValueTypeElements getGameDisplayValueTypeAccess() {
		return eGameDisplayValueType;
	}
	
	public EnumRule getGameDisplayValueTypeRule() {
		return getGameDisplayValueTypeAccess().getRule();
	}
	
	//enum GameScreenOrientation:
	//	landscape |
	//	portrait;
	public GameScreenOrientationElements getGameScreenOrientationAccess() {
		return eGameScreenOrientation;
	}
	
	public EnumRule getGameScreenOrientationRule() {
		return getGameScreenOrientationAccess().getRule();
	}
	
	//SignedNumber ecore::EFloat:
	//	'-'? UnsignedNumber;
	public SignedNumberElements getSignedNumberAccess() {
		return pSignedNumber;
	}
	
	public ParserRule getSignedNumberRule() {
		return getSignedNumberAccess().getRule();
	}
	
	//UnsignedNumber ecore::EFloat:
	//	INT ('.' INT);
	public UnsignedNumberElements getUnsignedNumberAccess() {
		return pUnsignedNumber;
	}
	
	public ParserRule getUnsignedNumberRule() {
		return getUnsignedNumberAccess().getRule();
	}
	
	//SignedInteger ecore::EInt:
	//	'-'? INT;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}
	
	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@ Override QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
