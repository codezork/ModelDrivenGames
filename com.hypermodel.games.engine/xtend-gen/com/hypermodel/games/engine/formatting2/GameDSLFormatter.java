/**
 * generated by hypermodels.com with Xtext 2.13.0
 */
package com.hypermodel.games.engine.formatting2;

import com.google.inject.Inject;
import com.hypermodel.games.engine.gameDSL.GameModel;
import com.hypermodel.games.engine.gameDSL.GamePackage;
import com.hypermodel.games.engine.gameDSL.GamePlatformConfig;
import com.hypermodel.games.engine.gameDSL.GameRoot;
import com.hypermodel.games.engine.services.GameDSLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeConstraint;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XCollectionLiteral;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;

@SuppressWarnings("all")
public class GameDSLFormatter extends XbaseFormatter {
  @Inject
  @Extension
  private GameDSLGrammarAccess _gameDSLGrammarAccess;
  
  protected void _format(final GameModel gameModel, @Extension final IFormattableDocument document) {
    EList<GamePackage> _packages = gameModel.getPackages();
    for (final GamePackage gamePackage : _packages) {
      document.<GamePackage>format(gamePackage);
    }
  }
  
  protected void _format(final GamePackage gamePackage, @Extension final IFormattableDocument document) {
    document.<GamePlatformConfig>format(gamePackage.getConfig());
    EList<GameRoot> _games = gamePackage.getGames();
    for (final GameRoot gameRoot : _games) {
      document.<GameRoot>format(gameRoot);
    }
  }
  
  public void format(final Object gameModel, final IFormattableDocument document) {
    if (gameModel instanceof JvmTypeParameter) {
      _format((JvmTypeParameter)gameModel, document);
      return;
    } else if (gameModel instanceof JvmFormalParameter) {
      _format((JvmFormalParameter)gameModel, document);
      return;
    } else if (gameModel instanceof XtextResource) {
      _format((XtextResource)gameModel, document);
      return;
    } else if (gameModel instanceof XAssignment) {
      _format((XAssignment)gameModel, document);
      return;
    } else if (gameModel instanceof XBinaryOperation) {
      _format((XBinaryOperation)gameModel, document);
      return;
    } else if (gameModel instanceof XDoWhileExpression) {
      _format((XDoWhileExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XFeatureCall) {
      _format((XFeatureCall)gameModel, document);
      return;
    } else if (gameModel instanceof XMemberFeatureCall) {
      _format((XMemberFeatureCall)gameModel, document);
      return;
    } else if (gameModel instanceof XPostfixOperation) {
      _format((XPostfixOperation)gameModel, document);
      return;
    } else if (gameModel instanceof XWhileExpression) {
      _format((XWhileExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XFunctionTypeRef) {
      _format((XFunctionTypeRef)gameModel, document);
      return;
    } else if (gameModel instanceof JvmGenericArrayTypeReference) {
      _format((JvmGenericArrayTypeReference)gameModel, document);
      return;
    } else if (gameModel instanceof JvmParameterizedTypeReference) {
      _format((JvmParameterizedTypeReference)gameModel, document);
      return;
    } else if (gameModel instanceof JvmWildcardTypeReference) {
      _format((JvmWildcardTypeReference)gameModel, document);
      return;
    } else if (gameModel instanceof XBasicForLoopExpression) {
      _format((XBasicForLoopExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XBlockExpression) {
      _format((XBlockExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XCastedExpression) {
      _format((XCastedExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XClosure) {
      _format((XClosure)gameModel, document);
      return;
    } else if (gameModel instanceof XCollectionLiteral) {
      _format((XCollectionLiteral)gameModel, document);
      return;
    } else if (gameModel instanceof XConstructorCall) {
      _format((XConstructorCall)gameModel, document);
      return;
    } else if (gameModel instanceof XForLoopExpression) {
      _format((XForLoopExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XIfExpression) {
      _format((XIfExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XInstanceOfExpression) {
      _format((XInstanceOfExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XReturnExpression) {
      _format((XReturnExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XSwitchExpression) {
      _format((XSwitchExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XSynchronizedExpression) {
      _format((XSynchronizedExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XThrowExpression) {
      _format((XThrowExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XTryCatchFinallyExpression) {
      _format((XTryCatchFinallyExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XTypeLiteral) {
      _format((XTypeLiteral)gameModel, document);
      return;
    } else if (gameModel instanceof XVariableDeclaration) {
      _format((XVariableDeclaration)gameModel, document);
      return;
    } else if (gameModel instanceof GameModel) {
      _format((GameModel)gameModel, document);
      return;
    } else if (gameModel instanceof GamePackage) {
      _format((GamePackage)gameModel, document);
      return;
    } else if (gameModel instanceof JvmTypeConstraint) {
      _format((JvmTypeConstraint)gameModel, document);
      return;
    } else if (gameModel instanceof XExpression) {
      _format((XExpression)gameModel, document);
      return;
    } else if (gameModel instanceof XImportDeclaration) {
      _format((XImportDeclaration)gameModel, document);
      return;
    } else if (gameModel instanceof XImportSection) {
      _format((XImportSection)gameModel, document);
      return;
    } else if (gameModel instanceof EObject) {
      _format((EObject)gameModel, document);
      return;
    } else if (gameModel == null) {
      _format((Void)null, document);
      return;
    } else if (gameModel != null) {
      _format(gameModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(gameModel, document).toString());
    }
  }
}
