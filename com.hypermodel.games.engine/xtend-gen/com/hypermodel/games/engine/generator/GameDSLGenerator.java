/**
 * generated by Xtext 2.12.0
 */
package com.hypermodel.games.engine.generator;

import apple.uikit.c.UIKit;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.backends.android.AndroidApplicationConfiguration;
import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
import com.badlogic.gdx.backends.iosmoe.IOSApplication;
import com.badlogic.gdx.backends.iosmoe.IOSApplicationConfiguration;
import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.google.common.base.Objects;
import com.google.gwt.user.client.Window;
import com.hypermodel.games.engine.gameDSL.GameModel;
import com.hypermodel.games.engine.gameDSL.GamePackage;
import com.hypermodel.games.engine.gameDSL.GameRoot;
import com.hypermodel.games.engine.generator.ExtendedJvmModelGenerator;
import com.hypermodel.games.engine.generator.GameProperties;
import com.hypermodel.games.engine.utils.ImportHelper;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.inject.Inject;
import org.eclipse.core.internal.resources.ProjectDescription;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceDescription;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.launching.JavaRuntime;
import org.eclipse.jdt.launching.environments.IExecutionEnvironment;
import org.eclipse.jdt.launching.environments.IExecutionEnvironmentsManager;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.compiler.GeneratorConfig;
import org.eclipse.xtext.xbase.compiler.IGeneratorConfigProvider;
import org.eclipse.xtext.xbase.compiler.ImportManager;
import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.osgi.framework.Bundle;
import org.osgi.framework.FrameworkUtil;
import org.robovm.apple.foundation.NSAutoreleasePool;
import org.robovm.apple.uikit.UIApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GameDSLGenerator extends ExtendedJvmModelGenerator {
  @Inject
  private IGeneratorConfigProvider generatorConfigProvider;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private ImportHelper _importHelper;
  
  private final Logger log = LoggerFactory.getLogger(GameDSLGenerator.class);
  
  private NullProgressMonitor monitor = new NullProgressMonitor();
  
  @Override
  public TreeAppendable createAppendable(final EObject context, final ImportManager importManager, final GeneratorConfig config) {
    TreeAppendable _xblockexpression = null;
    {
      super.setBuilder(context.eResource());
      String _identifier = this.containerType(context).getIdentifier();
      String _firstUpper = StringExtensions.toFirstUpper(GameProperties.ProjectType.desktop.name());
      String _plus = (_firstUpper + GameProperties.launcherPostfix);
      boolean _endsWith = _identifier.endsWith(_plus);
      if (_endsWith) {
        this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, LwjglApplication.class, LwjglApplicationConfiguration.class);
      } else {
        EList<JvmTypeReference> _superTypes = this.containerType(context).getSuperTypes();
        for (final JvmTypeReference superType : _superTypes) {
          boolean _endsWith_1 = superType.getIdentifier().endsWith("Game");
          if (_endsWith_1) {
            this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, SpriteBatch.class);
          } else {
            boolean _endsWith_2 = superType.getIdentifier().endsWith("AndroidApplication");
            if (_endsWith_2) {
              this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, AndroidApplicationConfiguration.class);
            } else {
              boolean _endsWith_3 = superType.getIdentifier().endsWith("GwtApplication");
              if (_endsWith_3) {
                this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, Window.class, GwtApplicationConfiguration.class, Gdx.class);
              } else {
                boolean _endsWith_4 = superType.getIdentifier().endsWith("IOSApplication$Delegate");
                if (_endsWith_4) {
                  boolean _startsWith = this.containerType(context).getSimpleName().startsWith("IOSMOE");
                  if (_startsWith) {
                    this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, IOSApplication.class, IOSApplicationConfiguration.class, UIKit.class);
                  } else {
                    this._importHelper.addClasses(this, importManager, this._typeReferenceBuilder, com.badlogic.gdx.backends.iosrobovm.IOSApplication.class, com.badlogic.gdx.backends.iosrobovm.IOSApplicationConfiguration.class, UIApplication.class, NSAutoreleasePool.class);
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = super.createAppendable(context, importManager, config);
    }
    return _xblockexpression;
  }
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    try {
      EObject _get = input.getContents().get(0);
      GameModel model = ((GameModel) _get);
      EList<GamePackage> _packages = model.getPackages();
      for (final GamePackage pckg : _packages) {
        {
          EList<EObject> _contents = input.getContents();
          int _ordinal = GameProperties.ProjectType.core.ordinal();
          int _plus = (_ordinal + 1);
          EObject _get_1 = _contents.get(_plus);
          JvmDeclaredType type = ((JvmDeclaredType) _get_1);
          QualifiedName packageName = this._iQualifiedNameProvider.getFullyQualifiedName(type).skipLast(1);
          EList<GameRoot> _games = pckg.getGames();
          for (final GameRoot game : _games) {
            {
              GameProperties.ProjectType[] _values = GameProperties.ProjectType.values();
              for (final GameProperties.ProjectType pType : _values) {
                {
                  IWorkspaceRoot _root = ResourcesPlugin.getWorkspace().getRoot();
                  String _name = game.getName();
                  String _plus_1 = (_name + "-");
                  String _name_1 = pType.name();
                  String _plus_2 = (_plus_1 + _name_1);
                  IProject sub = _root.getProject(_plus_2);
                  boolean _exists = sub.exists();
                  if (_exists) {
                    sub.delete(true, this.monitor);
                  }
                }
              }
              IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(game.getName());
              boolean _exists = project.exists();
              if (_exists) {
                project.delete(true, this.monitor);
              }
              this.createProject(project);
              GameProperties.ProjectType[] _values_1 = GameProperties.ProjectType.values();
              for (final GameProperties.ProjectType pType_1 : _values_1) {
                {
                  IWorkspaceRoot _root = ResourcesPlugin.getWorkspace().getRoot();
                  String _name = game.getName();
                  String _plus_1 = (_name + "-");
                  String _name_1 = pType_1.name();
                  String _plus_2 = (_plus_1 + _name_1);
                  IProject sub = _root.getProject(_plus_2);
                  this.createSubProject(sub, project, packageName, pType_1, pckg);
                  this.generatePlatformSource(sub, packageName, game.getName(), pType_1, input, 1);
                }
              }
              IWorkspaceRoot _root = ResourcesPlugin.getWorkspace().getRoot();
              String _name = game.getName();
              String _plus_1 = (_name + "-");
              String _name_1 = GameProperties.ProjectType.core.name();
              String _plus_2 = (_plus_1 + _name_1);
              IProject coreProject = _root.getProject(_plus_2);
              int _ordinal_1 = GameProperties.ProjectType.iosmoe.ordinal();
              int index = (_ordinal_1 + 2);
              while ((index < ((Object[])Conversions.unwrapArray(input.getContents(), Object.class)).length)) {
                {
                  this.generatePlatformSource(coreProject, packageName, game.getName(), null, input, index);
                  index++;
                }
              }
            }
          }
        }
      }
      GameDSLGenerator.setWorkspaceAutoBuild(false);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static void setWorkspaceAutoBuild(final boolean flag) throws CoreException {
    IWorkspace workspace = ResourcesPlugin.getWorkspace();
    IWorkspaceDescription description = workspace.getDescription();
    description.setAutoBuilding(flag);
    workspace.setDescription(description);
  }
  
  public void copyPlatformResources(final IProject project, final GameProperties.ProjectType pType) {
    try {
      Bundle bundle = FrameworkUtil.getBundle(this.getClass());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("resources/");
      String _name = pType.name();
      _builder.append(_name);
      URL path = bundle.getEntry(_builder.toString());
      if ((path != null)) {
        URI _uRI = FileLocator.resolve(path).toURI();
        File srcFolder = new File(_uRI);
        this.copyFiles(srcFolder, ((IContainer) project));
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void copyFiles(final File srcFolder, final IContainer destFolder) {
    try {
      File[] _listFiles = srcFolder.listFiles();
      for (final File f : _listFiles) {
        boolean _isDirectory = f.isDirectory();
        if (_isDirectory) {
          String _name = f.getName();
          Path _path = new Path(_name);
          IFolder newFolder = destFolder.getFolder(_path);
          newFolder.create(true, true, this.monitor);
          this.copyFiles(f, newFolder);
        } else {
          String _name_1 = f.getName();
          Path _path_1 = new Path(_name_1);
          IFile newFile = destFolder.getFile(_path_1);
          FileInputStream _fileInputStream = new FileInputStream(f);
          newFile.create(_fileInputStream, true, this.monitor);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public IProject createSubProject(final IProject project, final IProject rootProject, final QualifiedName packageName, final GameProperties.ProjectType pType, final GamePackage pkg) {
    try {
      ArrayList<String> array = CollectionLiterals.<String>newArrayList();
      array.add(JavaCore.NATURE_ID);
      array.add("org.eclipse.buildship.core.gradleprojectnature");
      this.createBasicProject(project, rootProject, pType, array, false);
      boolean _equals = Objects.equal(pType, GameProperties.ProjectType.android);
      if (_equals) {
        IFile androidManifest = project.getFile("AndroidManifest.xml");
        androidManifest.create(this.buildAndroidManifest(packageName.toString(), pkg), true, this.monitor);
        IFile androidProperties = project.getFile("project.properties");
        androidProperties.create(this.buildAndroidProperties(pkg.getConfig().getAndroid().getApiLevel()), true, this.monitor);
      }
      this.createJDTProject(project, pType);
      this.copyPlatformResources(project, pType);
      IFile buildgradle = project.getFile("build.gradle");
      buildgradle.create(this.buildGradle(pType, packageName.toString(), pkg), true, this.monitor);
      return project;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected IProject createProject(final IProject project) {
    try {
      ArrayList<String> array = CollectionLiterals.<String>newArrayList();
      array.add("org.eclipse.buildship.core.gradleprojectnature");
      this.createBasicProject(project, null, null, array, true);
      IFolder dotGradle = project.getFolder(".gradle");
      dotGradle.create(true, true, this.monitor);
      IFolder gradleVersion = dotGradle.getFolder("2.14.1");
      gradleVersion.create(true, true, this.monitor);
      IFolder taskArtifacts = gradleVersion.getFolder("taskArtifacts");
      taskArtifacts.create(true, true, this.monitor);
      IFile gitignore = project.getFile(".gitignore");
      gitignore.create(this.buildGitignore(), true, this.monitor);
      IFile buildgradle = project.getFile("build.gradle");
      buildgradle.create(this.buildGradleRoot(project.getName()), true, this.monitor);
      IFile gradleprops = project.getFile("gradle.properties");
      gradleprops.create(this.buildGradleProps(), true, this.monitor);
      IFile localprops = project.getFile("local.properties");
      localprops.create(this.buildLocalProps(), true, this.monitor);
      IFile settingsGradle = project.getFile("settings.gradle");
      settingsGradle.create(this.buildSettingsGradle(), true, this.monitor);
      IFolder gradle = project.getFolder("gradle");
      gradle.create(true, true, this.monitor);
      IFolder wrapper = gradle.getFolder("wrapper");
      wrapper.create(true, true, this.monitor);
      IFile gradleWrapperJar = wrapper.getFile("gradle-wrapper.jar");
      File file = null;
      FileInputStream wrapperStream = null;
      Bundle bundle = FrameworkUtil.getBundle(this.getClass());
      URL fileURL = bundle.getEntry("resources/gradlewrapper/gradle-wrapper.jar");
      try {
        URI _uRI = FileLocator.resolve(fileURL).toURI();
        File _file = new File(_uRI);
        file = _file;
        FileInputStream _fileInputStream = new FileInputStream(file);
        wrapperStream = _fileInputStream;
        FileInputStream _fileInputStream_1 = new FileInputStream(file);
        gradleWrapperJar.create(_fileInputStream_1, true, this.monitor);
      } catch (final Throwable _t) {
        if (_t instanceof IOException) {
          final IOException e = (IOException)_t;
          this.log.error("{}", e);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      } finally {
        try {
          if ((wrapperStream != null)) {
            wrapperStream.close();
          }
        } catch (final Throwable _t_1) {
          if (_t_1 instanceof IOException) {
            final IOException ex = (IOException)_t_1;
            this.log.error("{}", ex);
          } else {
            throw Exceptions.sneakyThrow(_t_1);
          }
        }
      }
      IFile gradleWrapperProps = wrapper.getFile("gradle-wrapper.properties");
      gradleWrapperProps.create(this.buildGradleWrapperProps(), true, this.monitor);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("resources/root");
      URL path = bundle.getEntry(_builder.toString());
      if ((path != null)) {
        URI _uRI_1 = FileLocator.resolve(path).toURI();
        File srcFolder = new File(_uRI_1);
        this.copyFiles(srcFolder, ((IContainer) project));
      }
      return project;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void generatePlatformSource(final IProject project, final QualifiedName basePackageName, final String gameName, final GameProperties.ProjectType pType, final Resource input, final int offset) {
    try {
      String fileName = "";
      String body = "";
      String extraSegment = "";
      QualifiedName packageName = basePackageName;
      boolean _notEquals = (!Objects.equal(pType, null));
      if (_notEquals) {
        if (pType != null) {
          switch (pType) {
            case core:
              EList<EObject> _contents = input.getContents();
              int _ordinal = GameProperties.ProjectType.core.ordinal();
              int _plus = (_ordinal + offset);
              EObject _get = _contents.get(_plus);
              JvmDeclaredType type = ((JvmDeclaredType) _get);
              fileName = (gameName + ".java");
              body = this.generateType(type, this.generatorConfigProvider.get(type)).toString();
              break;
            case android:
              EList<EObject> _contents_1 = input.getContents();
              int _ordinal_1 = GameProperties.ProjectType.android.ordinal();
              int _plus_1 = (_ordinal_1 + offset);
              EObject _get_1 = _contents_1.get(_plus_1);
              JvmDeclaredType type_1 = ((JvmDeclaredType) _get_1);
              StringConcatenation _builder = new StringConcatenation();
              String _firstUpper = StringExtensions.toFirstUpper(pType.name());
              _builder.append(_firstUpper);
              _builder.append(GameProperties.launcherPostfix);
              _builder.append(".java");
              fileName = _builder.toString();
              body = this.generateType(type_1, this.generatorConfigProvider.get(type_1)).toString();
              break;
            case desktop:
              extraSegment = pType.name();
              EList<EObject> _contents_2 = input.getContents();
              int _ordinal_2 = GameProperties.ProjectType.desktop.ordinal();
              int _plus_2 = (_ordinal_2 + offset);
              EObject _get_2 = _contents_2.get(_plus_2);
              JvmDeclaredType type_2 = ((JvmDeclaredType) _get_2);
              StringConcatenation _builder_1 = new StringConcatenation();
              String _firstUpper_1 = StringExtensions.toFirstUpper(pType.name());
              _builder_1.append(_firstUpper_1);
              _builder_1.append(GameProperties.launcherPostfix);
              _builder_1.append(".java");
              fileName = _builder_1.toString();
              body = this.generateType(type_2, this.generatorConfigProvider.get(type_2)).toString();
              break;
            case html:
              extraSegment = "client";
              EList<EObject> _contents_3 = input.getContents();
              int _ordinal_3 = GameProperties.ProjectType.html.ordinal();
              int _plus_3 = (_ordinal_3 + offset);
              EObject _get_3 = _contents_3.get(_plus_3);
              JvmDeclaredType type_3 = ((JvmDeclaredType) _get_3);
              StringConcatenation _builder_2 = new StringConcatenation();
              String _firstUpper_2 = StringExtensions.toFirstUpper(pType.name());
              _builder_2.append(_firstUpper_2);
              _builder_2.append(GameProperties.launcherPostfix);
              _builder_2.append(".java");
              fileName = _builder_2.toString();
              body = this.generateType(type_3, this.generatorConfigProvider.get(type_3)).toString();
              break;
            case ios:
              EList<EObject> _contents_4 = input.getContents();
              int _ordinal_4 = GameProperties.ProjectType.ios.ordinal();
              int _plus_4 = (_ordinal_4 + offset);
              EObject _get_4 = _contents_4.get(_plus_4);
              JvmDeclaredType type_4 = ((JvmDeclaredType) _get_4);
              StringConcatenation _builder_3 = new StringConcatenation();
              String _upperCase = pType.name().toUpperCase();
              _builder_3.append(_upperCase);
              _builder_3.append(GameProperties.launcherPostfix);
              _builder_3.append(".java");
              fileName = _builder_3.toString();
              body = this.generateType(type_4, this.generatorConfigProvider.get(type_4)).toString();
              break;
            case iosmoe:
              EList<EObject> _contents_5 = input.getContents();
              int _ordinal_5 = GameProperties.ProjectType.iosmoe.ordinal();
              int _plus_5 = (_ordinal_5 + offset);
              EObject _get_5 = _contents_5.get(_plus_5);
              JvmDeclaredType type_5 = ((JvmDeclaredType) _get_5);
              StringConcatenation _builder_4 = new StringConcatenation();
              String _upperCase_1 = pType.name().toUpperCase();
              _builder_4.append(_upperCase_1);
              _builder_4.append(GameProperties.launcherPostfix);
              _builder_4.append(".java");
              fileName = _builder_4.toString();
              body = this.generateType(type_5, this.generatorConfigProvider.get(type_5)).toString();
              break;
            default:
              break;
          }
        }
      } else {
        EObject _get_6 = input.getContents().get(offset);
        JvmDeclaredType type_6 = ((JvmDeclaredType) _get_6);
        String _lastSegment = this._iQualifiedNameProvider.getFullyQualifiedName(type_6).getLastSegment();
        String _plus_6 = (_lastSegment + ".java");
        fileName = _plus_6;
        packageName = this._iQualifiedNameProvider.getFullyQualifiedName(type_6).skipLast(1);
        body = this.generateType(type_6, this.generatorConfigProvider.get(type_6)).toString();
      }
      IFolder folder = project.getFolder("src");
      List<String> _segments = packageName.getSegments();
      for (final String segment : _segments) {
        {
          folder = folder.getFolder(segment);
          boolean _exists = folder.exists();
          boolean _not = (!_exists);
          if (_not) {
            folder.create(true, true, this.monitor);
          }
        }
      }
      IFolder basePackageFolder = folder;
      boolean _isEmpty = extraSegment.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        folder = folder.getFolder(extraSegment);
        boolean _exists = folder.exists();
        boolean _not_1 = (!_exists);
        if (_not_1) {
          folder.create(true, true, this.monitor);
        }
      }
      IFile source = folder.getFile(fileName);
      boolean _exists_1 = source.exists();
      if (_exists_1) {
        source.delete(true, this.monitor);
      }
      byte[] _bytes = body.getBytes("UTF-8");
      ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_bytes);
      source.create(_byteArrayInputStream, true, this.monitor);
      if (((pType != null) && Objects.equal(pType, GameProperties.ProjectType.html))) {
        IFile gwtDef = basePackageFolder.getFile("GdxDefinition.gwt.xml");
        gwtDef.create(this.buildGwt(gameName, packageName.toString(), fileName), true, this.monitor);
        IFile gwtDefSuperdev = basePackageFolder.getFile("GdxDefinitionSuperdev.gwt.xml");
        gwtDefSuperdev.create(this.buildGwtSuperdev(packageName.toString()), true, this.monitor);
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected void createBasicProject(final IProject project, final IProject rootProject, final GameProperties.ProjectType pType, final ArrayList<String> natures, final boolean isRoot) {
    try {
      if ((!isRoot)) {
        ProjectDescription description = new ProjectDescription();
        String _name = rootProject.getName();
        String _plus = (_name + "-");
        String _name_1 = pType.name();
        String _plus_1 = (_plus + _name_1);
        description.setName(_plus_1);
        description.setLocation(rootProject.getFolder(pType.name()).getLocation());
        String _name_2 = description.getName();
        String _plus_2 = ("Project " + _name_2);
        String _plus_3 = (_plus_2 + " created by hypermodels.com");
        description.setComment(_plus_3);
        description.setNatureIds(((String[])Conversions.unwrapArray(natures, String.class)));
        project.create(description, this.monitor);
        project.open(this.monitor);
      } else {
        project.create(this.monitor);
        project.open(this.monitor);
        IProjectDescription description_1 = project.getDescription();
        String _name_3 = description_1.getName();
        String _plus_4 = ("Project " + _name_3);
        String _plus_5 = (_plus_4 + " created by hypermodels.com");
        description_1.setComment(_plus_5);
        description_1.setNatureIds(((String[])Conversions.unwrapArray(natures, String.class)));
        project.setDescription(description_1, this.monitor);
      }
      IFolder settings = project.getFolder(".settings");
      settings.create(true, true, this.monitor);
      IFile prefs = settings.getFile("org.eclipse.buildship.core.prefs");
      prefs.create(this.buildBuildship(isRoot), true, this.monitor);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected void createJDTProject(final IProject project, final GameProperties.ProjectType pType) {
    try {
      ArrayList<IClasspathEntry> entries = CollectionLiterals.<IClasspathEntry>newArrayList();
      IJavaProject javaProject = JavaCore.create(project);
      IFolder src = project.getFolder("src");
      src.create(true, true, this.monitor);
      IPackageFragmentRoot packageRoot = javaProject.getPackageFragmentRoot(src);
      IClasspathEntry srcEntry = JavaCore.newSourceEntry(packageRoot.getPath(), null, null, null);
      entries.add(srcEntry);
      boolean _equals = Objects.equal(pType, GameProperties.ProjectType.android);
      if (_equals) {
        IFolder gen = project.getFolder("gen");
        gen.create(true, true, this.monitor);
        IPackageFragmentRoot packageRoot2 = javaProject.getPackageFragmentRoot(gen);
        IClasspathEntry genEntry = JavaCore.newSourceEntry(packageRoot2.getPath(), null, null, null);
        entries.add(genEntry);
      }
      IExecutionEnvironmentsManager executionEnvironmentsManager = JavaRuntime.getExecutionEnvironmentsManager();
      IExecutionEnvironment[] executionEnvironments = executionEnvironmentsManager.getExecutionEnvironments();
      for (final IExecutionEnvironment iExecutionEnvironment : executionEnvironments) {
        boolean _equals_1 = "JavaSE-1.6".equals(iExecutionEnvironment.getId());
        if (_equals_1) {
          entries.add(JavaCore.newContainerEntry(JavaRuntime.newJREContainerPath(iExecutionEnvironment)));
        }
      }
      Path _path = new Path("org.eclipse.buildship.core.gradleclasspathcontainer");
      IClasspathEntry gradleEntry = JavaCore.newContainerEntry(_path, true);
      entries.add(gradleEntry);
      boolean _equals_2 = Objects.equal(pType, GameProperties.ProjectType.android);
      if (_equals_2) {
        Path _path_1 = new Path("com.android.ide.eclipse.adt.ANDROID_FRAMEWORK");
        IClasspathEntry android1 = JavaCore.newContainerEntry(_path_1, true);
        entries.add(android1);
        Path _path_2 = new Path("com.android.ide.eclipse.adt.LIBRARIES");
        IClasspathEntry android2 = JavaCore.newContainerEntry(_path_2, true);
        entries.add(android2);
        Path _path_3 = new Path("com.android.ide.eclipse.adt.DEPENDENCIES");
        IClasspathEntry android3 = JavaCore.newContainerEntry(_path_3, true);
        entries.add(android3);
      }
      final ArrayList<IClasspathEntry> _converted_entries = (ArrayList<IClasspathEntry>)entries;
      javaProject.setRawClasspath(((IClasspathEntry[])Conversions.unwrapArray(_converted_entries, IClasspathEntry.class)), null);
      IFolder binFolder = project.getFolder("bin");
      binFolder.create(true, true, this.monitor);
      boolean _equals_3 = Objects.equal(pType, GameProperties.ProjectType.android);
      if (_equals_3) {
        IFolder classesFolder = binFolder.getFolder("classes");
        classesFolder.create(true, true, this.monitor);
        javaProject.setOutputLocation(classesFolder.getFullPath(), null);
      } else {
        javaProject.setOutputLocation(binFolder.getFullPath(), null);
      }
      IFolder settings = project.getFolder(".settings");
      IFile prefs = settings.getFile("org.eclipse.jdt.core.prefs");
      prefs.create(this.buildJDT(), true, this.monitor);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildGradleWrapperProps() {
    try {
      Properties prop = new Properties();
      prop.setProperty("distributionBase", "GRADLE_USER_HOME");
      prop.setProperty("distributionPath", "wrapper/dists");
      prop.setProperty("zipStoreBase", "GRADLE_USER_HOME");
      prop.setProperty("zipStorePath", "wrapper/dists");
      prop.setProperty("distributionUrl", "https://services.gradle.org/distributions/gradle-2.14.1-bin.zip");
      StringWriter writer = new StringWriter();
      prop.store(writer, null);
      byte[] _bytes = writer.toString().getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildSettingsGradle() {
    try {
      final Function<GameProperties.ProjectType, String> _function = (GameProperties.ProjectType v) -> {
        String _name = v.name();
        String _plus = ("\':" + _name);
        return (_plus + "\'");
      };
      String projects = ((List<GameProperties.ProjectType>)Conversions.doWrapArray(GameProperties.ProjectType.values())).stream().<String>map(_function).collect(Collectors.joining(", "));
      byte[] _bytes = ("include " + projects).getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildLocalProps() {
    try {
      String dir = Platform.getPreferencesService().getString("com.android.ide.eclipse.adt", 
        "com.android.ide.eclipse.adt.sdk", null, null);
      if ((dir == null)) {
        byte[] _newByteArrayOfSize = new byte[0];
        return new ByteArrayInputStream(_newByteArrayOfSize);
      }
      dir = dir.replace("\\", "/");
      byte[] _bytes = ("sdk.dir=" + dir).getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildGradleProps() {
    try {
      Properties prop = new Properties();
      prop.setProperty("org.gradle.daemon", "true");
      prop.setProperty("org.gradle.jvmargs", "-Xms128m -Xmx1500m");
      prop.setProperty("org.gradle.configureondemand", "true");
      StringWriter writer = new StringWriter();
      prop.store(writer, null);
      byte[] _bytes = writer.toString().getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildGradleRoot(final String projectName) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS");
      _builder.newLine();
      _builder.append("buildscript {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("repositories {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mavenLocal()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mavenCentral()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("jcenter()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("classpath \'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("classpath \'com.android.tools.build:gradle:2.2.0\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("classpath \'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.3\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("classpath \'org.multi-os-engine:moe-gradle:1.4.0\'");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("allprojects {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("apply plugin: \"eclipse\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("apply plugin: \"idea\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("version = \'1.0\'");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ext {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("appName = \"");
      _builder.append(projectName, "        ");
      _builder.append("\"");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("gdxVersion = \'1.9.8\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("roboVMVersion = \'2.3.3\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("box2DLightsVersion = \'1.4\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("ashleyVersion = \'1.7.0\'");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("aiVersion = \'1.8.0\'");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("repositories {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mavenLocal()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mavenCentral()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("maven { url \"https://oss.sonatype.org/content/repositories/releases/\" }");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":");
      String _name = GameProperties.ProjectType.desktop.name();
      _builder.append(_name);
      _builder.append("\") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("apply plugin: \"java\"");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile project(\":");
      String _name_1 = GameProperties.ProjectType.core.name();
      _builder.append(_name_1, "        ");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":");
      String _name_2 = GameProperties.ProjectType.android.name();
      _builder.append(_name_2);
      _builder.append("\") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("apply plugin: \"android\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("configurations { natives }");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile project(\":");
      String _name_3 = GameProperties.ProjectType.core.name();
      _builder.append(_name_3, "        ");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-android:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":");
      String _name_4 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_4);
      _builder.append("\") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("apply plugin: \"java\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("apply plugin: \"robovm\"");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile project(\":");
      String _name_5 = GameProperties.ProjectType.core.name();
      _builder.append(_name_5, "        ");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("compile \"com.mobidevelop.robovm:robovm-rt:$roboVMVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":");
      String _name_6 = GameProperties.ProjectType.html.name();
      _builder.append(_name_6);
      _builder.append("\") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("apply plugin: \"gwt\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("apply plugin: \"war\"");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile project(\":");
      String _name_7 = GameProperties.ProjectType.core.name();
      _builder.append(_name_7, "        ");
      _builder.append("\")");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx:$gdxVersion:sources\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":");
      String _name_8 = GameProperties.ProjectType.core.name();
      _builder.append(_name_8);
      _builder.append("\") {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("apply plugin: \"java\"");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-box2d:$gdxVersion\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("project(\":iosmoe\") {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("apply plugin: \"moe\"");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("configurations { natives }");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile project(\":core\")");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("compile \"com.badlogicgames.gdx:gdx-backend-moe:$gdxVersion\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("natives \"com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("tasks.eclipse.doLast {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("delete \".project\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public ByteArrayInputStream buildGitignore() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("## Java");
      _builder.newLine();
      _builder.newLine();
      _builder.append("*.class");
      _builder.newLine();
      _builder.append("*.war");
      _builder.newLine();
      _builder.append("*.ear");
      _builder.newLine();
      _builder.append("hs_err_pid*");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## Robovm");
      _builder.newLine();
      _builder.append("/");
      String _name = GameProperties.ProjectType.ios.name();
      _builder.append(_name);
      _builder.append("/robovm-build/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("## GWT");
      _builder.newLine();
      _builder.append("/");
      String _name_1 = GameProperties.ProjectType.html.name();
      _builder.append(_name_1);
      _builder.append("/war/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_2 = GameProperties.ProjectType.html.name();
      _builder.append(_name_2);
      _builder.append("/gwt-unitCache/");
      _builder.newLineIfNotEmpty();
      _builder.append(".apt_generated/");
      _builder.newLine();
      _builder.append(".gwt/");
      _builder.newLine();
      _builder.append("gwt-unitCache/");
      _builder.newLine();
      _builder.append("www-test/");
      _builder.newLine();
      _builder.append(".gwt-tmp/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## Android Studio and Intellij and Android in general");
      _builder.newLine();
      _builder.append("/android/libs/armeabi/");
      _builder.newLine();
      _builder.append("/android/libs/armeabi-v7a/");
      _builder.newLine();
      _builder.append("/android/libs/arm64-v8a/");
      _builder.newLine();
      _builder.append("/android/libs/x86/");
      _builder.newLine();
      _builder.append("/android/libs/x86_64/");
      _builder.newLine();
      _builder.append("/android/gen/");
      _builder.newLine();
      _builder.append(".idea/");
      _builder.newLine();
      _builder.append("*.ipr");
      _builder.newLine();
      _builder.append("*.iws");
      _builder.newLine();
      _builder.append("*.iml");
      _builder.newLine();
      _builder.append("/");
      String _name_3 = GameProperties.ProjectType.android.name();
      _builder.append(_name_3);
      _builder.append("/out/");
      _builder.newLineIfNotEmpty();
      _builder.append("com_crashlytics_export_strings.xml");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## Eclipse");
      _builder.newLine();
      _builder.newLine();
      _builder.append(".classpath");
      _builder.newLine();
      _builder.append(".project");
      _builder.newLine();
      _builder.append(".metadata/");
      _builder.newLine();
      _builder.append("/");
      String _name_4 = GameProperties.ProjectType.android.name();
      _builder.append(_name_4);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_5 = GameProperties.ProjectType.core.name();
      _builder.append(_name_5);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_6 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_6);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_7 = GameProperties.ProjectType.html.name();
      _builder.append(_name_7);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_8 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_8);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_9 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_9);
      _builder.append("/bin/");
      _builder.newLineIfNotEmpty();
      _builder.append("*.tmp");
      _builder.newLine();
      _builder.append("*.bak");
      _builder.newLine();
      _builder.append("*.swp");
      _builder.newLine();
      _builder.append("*~.nib");
      _builder.newLine();
      _builder.append(".settings/");
      _builder.newLine();
      _builder.append(".loadpath");
      _builder.newLine();
      _builder.append(".externalToolBuilders/");
      _builder.newLine();
      _builder.append("*.launch");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## NetBeans");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/nbproject/private/");
      _builder.newLine();
      _builder.append("/");
      String _name_10 = GameProperties.ProjectType.android.name();
      _builder.append(_name_10);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_11 = GameProperties.ProjectType.core.name();
      _builder.append(_name_11);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_12 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_12);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_13 = GameProperties.ProjectType.html.name();
      _builder.append(_name_13);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_14 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_14);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_15 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_15);
      _builder.append("/nbproject/private/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/build/");
      _builder.newLine();
      _builder.append("/");
      String _name_16 = GameProperties.ProjectType.android.name();
      _builder.append(_name_16);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_17 = GameProperties.ProjectType.core.name();
      _builder.append(_name_17);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_18 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_18);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_19 = GameProperties.ProjectType.html.name();
      _builder.append(_name_19);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_20 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_20);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_21 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_21);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/nbbuild/");
      _builder.newLine();
      _builder.append("/");
      String _name_22 = GameProperties.ProjectType.android.name();
      _builder.append(_name_22);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_23 = GameProperties.ProjectType.core.name();
      _builder.append(_name_23);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_24 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_24);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_25 = GameProperties.ProjectType.html.name();
      _builder.append(_name_25);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_26 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_26);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_27 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_27);
      _builder.append("/nbbuild/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/dist/");
      _builder.newLine();
      _builder.append("/");
      String _name_28 = GameProperties.ProjectType.android.name();
      _builder.append(_name_28);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_29 = GameProperties.ProjectType.core.name();
      _builder.append(_name_29);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_30 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_30);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_31 = GameProperties.ProjectType.html.name();
      _builder.append(_name_31);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_32 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_32);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_33 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_33);
      _builder.append("/dist/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/nbdist/");
      _builder.newLine();
      _builder.append("/");
      String _name_34 = GameProperties.ProjectType.android.name();
      _builder.append(_name_34);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_35 = GameProperties.ProjectType.core.name();
      _builder.append(_name_35);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_36 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_36);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_37 = GameProperties.ProjectType.html.name();
      _builder.append(_name_37);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_38 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_38);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_39 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_39);
      _builder.append("/nbdist/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("nbactions.xml");
      _builder.newLine();
      _builder.append("nb-configuration.xml");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## Gradle");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/local.properties");
      _builder.newLine();
      _builder.append(".gradle/");
      _builder.newLine();
      _builder.append("gradle-app.setting");
      _builder.newLine();
      _builder.append("/build/");
      _builder.newLine();
      _builder.append("/");
      String _name_40 = GameProperties.ProjectType.android.name();
      _builder.append(_name_40);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_41 = GameProperties.ProjectType.core.name();
      _builder.append(_name_41);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_42 = GameProperties.ProjectType.desktop.name();
      _builder.append(_name_42);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_43 = GameProperties.ProjectType.html.name();
      _builder.append(_name_43);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_44 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_44);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_45 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_45);
      _builder.append("/build/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("## OS Specific");
      _builder.newLine();
      _builder.append(".DS_Store");
      _builder.newLine();
      _builder.append("Thumbs.db");
      _builder.newLine();
      _builder.newLine();
      _builder.append("## iOS");
      _builder.newLine();
      _builder.append("/");
      String _name_46 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_46);
      _builder.append("/xcode/*.xcodeproj/*");
      _builder.newLineIfNotEmpty();
      _builder.append("!/");
      String _name_47 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_47);
      _builder.append("/xcode/*.xcodeproj/xcshareddata");
      _builder.newLineIfNotEmpty();
      _builder.append("!/");
      String _name_48 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_48);
      _builder.append("/xcode/*.xcodeproj/project.pbxproj");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_49 = GameProperties.ProjectType.ios.name();
      _builder.append(_name_49);
      _builder.append("/xcode/native/");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/");
      String _name_50 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_50);
      _builder.append("/xcode/*.xcodeproj/*");
      _builder.newLineIfNotEmpty();
      _builder.append("!/");
      String _name_51 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_51);
      _builder.append("/xcode/*.xcodeproj/xcshareddata");
      _builder.newLineIfNotEmpty();
      _builder.append("!/");
      String _name_52 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_52);
      _builder.append("/xcode/*.xcodeproj/project.pbxproj");
      _builder.newLineIfNotEmpty();
      _builder.append("/");
      String _name_53 = GameProperties.ProjectType.iosmoe.name();
      _builder.append(_name_53);
      _builder.append("/xcode/native/");
      _builder.newLineIfNotEmpty();
      String content = _builder.toString();
      byte[] _bytes = content.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildBuildship(final boolean isRoot) {
    try {
      Date today = new Date();
      StringBuilder content = new StringBuilder();
      content.append("#");
      content.append(today.toString());
      content.append("\n");
      if (isRoot) {
        content.append("connection.project.dir=\n");
      } else {
        content.append("connection.project.dir=..\n");
      }
      byte[] _bytes = content.toString().getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildJDT() {
    try {
      Properties prop = new Properties();
      prop.setProperty("eclipse.preferences.version", "1");
      prop.setProperty("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");
      prop.setProperty("org.eclipse.jdt.core.compiler.compliance", "1.6");
      prop.setProperty("org.eclipse.jdt.core.compiler.source", "1.6");
      StringWriter writer = new StringWriter();
      prop.store(writer, null);
      byte[] _bytes = writer.toString().getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildAndroidProperties(final int apiLevel) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("# This file is used by the Eclipse ADT plugin. It is unnecessary for IDEA and Android Studio projects, which");
      _builder.newLine();
      _builder.append("# configure Proguard and the Android target via the build.gradle file.");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# To enable ProGuard to work with Eclipse ADT, uncomment this (available properties: sdk.dir, user.home)");
      _builder.newLine();
      _builder.append("# and ensure proguard.jar in the Android SDK is up to date (or alternately reduce the android target to 23 or lower):");
      _builder.newLine();
      _builder.append("# proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-rules.pro");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Project target.");
      _builder.newLine();
      _builder.append("target=android-");
      _builder.append(apiLevel);
      _builder.newLineIfNotEmpty();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildGradle(final GameProperties.ProjectType pType, final String packageName, final GamePackage pkg) {
    try {
      String script = "";
      if (pType != null) {
        switch (pType) {
          case core:
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("apply plugin: \"java\"");
            _builder.newLine();
            _builder.newLine();
            _builder.append("sourceCompatibility = 1.6");
            _builder.newLine();
            _builder.append("[compileJava, compileTestJava]*.options*.encoding = \'UTF-8\'");
            _builder.newLine();
            _builder.newLine();
            _builder.append("sourceSets.main.java.srcDirs = [ \"src/\" ]");
            _builder.newLine();
            _builder.newLine();
            _builder.newLine();
            _builder.append("eclipse.project {");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("name = appName + \"-");
            String _name = pType.name();
            _builder.append(_name, "    ");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            script = _builder.toString();
            break;
          case android:
            StringConcatenation _builder_1 = new StringConcatenation();
            String _name_1 = GameProperties.ProjectType.android.name();
            _builder_1.append(_name_1);
            _builder_1.append(" {");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("    ");
            _builder_1.append("buildToolsVersion \"25.0.3\"");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("compileSdkVersion 25");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("sourceSets {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("main {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("manifest.srcFile \'AndroidManifest.xml\'");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("java.srcDirs = [\'src\']");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("aidl.srcDirs = [\'src\']");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("renderscript.srcDirs = [\'src\']");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("res.srcDirs = [\'res\']");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("assets.srcDirs = [\'assets\']");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("jniLibs.srcDirs = [\'libs\']");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("instrumentTest.setRoot(\'tests\')");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("packagingOptions {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("exclude \'META-INF/robovm/ios/robovm.xml\'");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("defaultConfig {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("applicationId \"");
            _builder_1.append(packageName, "        ");
            _builder_1.append("\"");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("        ");
            _builder_1.append("minSdkVersion ");
            int _minAndroidVersion = pkg.getConfig().getAndroid().getMinAndroidVersion();
            _builder_1.append(_minAndroidVersion, "        ");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("        ");
            _builder_1.append("targetSdkVersion ");
            int _targetAndroidVersion = pkg.getConfig().getAndroid().getTargetAndroidVersion();
            _builder_1.append(_targetAndroidVersion, "        ");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("        ");
            _builder_1.append("versionCode 1");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("versionName \"1.0\"");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("buildTypes {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("release {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("minifyEnabled false");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("proguardFiles getDefaultProguardFile(\'proguard-android.txt\'), \'proguard-rules.pro\'");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("// called every time gradle gets executed, takes the native dependencies of");
            _builder_1.newLine();
            _builder_1.append("// the natives configuration, and extracts them to the proper libs/ folders");
            _builder_1.newLine();
            _builder_1.append("// so they get packed with the APK.");
            _builder_1.newLine();
            _builder_1.append("task copyAndroidNatives() { ");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("file(\"libs/armeabi/\").mkdirs();");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("file(\"libs/armeabi-v7a/\").mkdirs();");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("file(\"libs/arm64-v8a/\").mkdirs();");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("file(\"libs/x86_64/\").mkdirs();");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("file(\"libs/x86/\").mkdirs();");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("configurations.natives.files.each { jar ->");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("def outputDir = null");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(jar.name.endsWith(\"natives-arm64-v8a.jar\")) outputDir = file(\"libs/arm64-v8a\")");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(jar.name.endsWith(\"natives-armeabi-v7a.jar\")) outputDir = file(\"libs/armeabi-v7a\")        ");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(jar.name.endsWith(\"natives-armeabi.jar\")) outputDir = file(\"libs/armeabi\")");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(jar.name.endsWith(\"natives-x86_64.jar\")) outputDir = file(\"libs/x86_64\")");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(jar.name.endsWith(\"natives-x86.jar\")) outputDir = file(\"libs/x86\")");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if(outputDir != null) {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("copy {");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("from zipTree(jar)");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("into outputDir");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("include \"*.so\"");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("task run(type: Exec) {");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("def path");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("def localProperties = project.file(\"../local.properties\")");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("if (localProperties.exists()) {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("Properties properties = new Properties()");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("localProperties.withInputStream { instr ->");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("properties.load(instr)");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("def sdkDir = properties.getProperty(\'sdk.dir\')");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("if (sdkDir) {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("path = sdkDir");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("} else {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("path = \"$System.env.ANDROID_HOME\"");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("} else {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("path = \"$System.env.ANDROID_HOME\"");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("def adb = path + \"/platform-tools/adb\"");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("commandLine \"$adb\", \'shell\', \'am\', \'start\', \'-n\', \'");
            _builder_1.append(packageName, "    ");
            _builder_1.append("/");
            _builder_1.append(packageName, "    ");
            _builder_1.append(".AndroidLauncher\'");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("// sets up the Android Eclipse project, using the old Ant based build.");
            _builder_1.newLine();
            _builder_1.append("eclipse {");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("// need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("// ignores any nodes added in classpath.file.withXml");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("sourceSets {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("main {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("java.srcDirs \"src\", \'gen\'");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("jdt {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("sourceCompatibility = 1.6");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("targetCompatibility = 1.6");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("classpath {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("plusConfigurations += [ project.configurations.compile ]        ");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("containers \'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK\', \'com.android.ide.eclipse.adt.LIBRARIES\'       ");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("project {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("name = appName + \"-");
            String _name_2 = GameProperties.ProjectType.android.name();
            _builder_1.append(_name_2, "        ");
            _builder_1.append("\"");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("        ");
            _builder_1.append("natures \'com.android.ide.eclipse.adt.AndroidNature\'");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("buildCommands.clear();");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("buildCommand \"com.android.ide.eclipse.adt.ResourceManagerBuilder\"");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("buildCommand \"com.android.ide.eclipse.adt.PreCompilerBuilder\"");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("buildCommand \"org.eclipse.jdt.core.javabuilder\"");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("buildCommand \"com.android.ide.eclipse.adt.ApkBuilder\"");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("// sets up the Android Idea project, using the old Ant based build.");
            _builder_1.newLine();
            _builder_1.append("idea {");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("module {");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("sourceDirs += file(\"src\");");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("scopes = [ COMPILE: [plus:[project.configurations.compile]]]        ");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("iml {");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("withXml {");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("def node = it.asNode()");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("def builder = NodeBuilder.newInstance();");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("builder.current = node;");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("builder.component(name: \"FacetManager\") {");
            _builder_1.newLine();
            _builder_1.append("                    ");
            _builder_1.append("facet(type: \"");
            String _name_3 = pType.name();
            _builder_1.append(_name_3, "                    ");
            _builder_1.append("\", name: \"");
            String _firstUpper = StringExtensions.toFirstUpper(pType.name());
            _builder_1.append(_firstUpper, "                    ");
            _builder_1.append("\") {");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("                        ");
            _builder_1.append("configuration {");
            _builder_1.newLine();
            _builder_1.append("                            ");
            _builder_1.append("option(name: \"UPDATE_PROPERTY_FILES\", value:\"true\")");
            _builder_1.newLine();
            _builder_1.append("                        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("                    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("                ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("            ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("        ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("    ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            script = _builder_1.toString();
            break;
          case desktop:
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("apply plugin: \"java\"");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("sourceCompatibility = 1.6");
            _builder_2.newLine();
            _builder_2.append("sourceSets.main.java.srcDirs = [ \"src/\" ]");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("project.ext.mainClassName = \"");
            _builder_2.append(packageName);
            _builder_2.append(".");
            String _name_4 = pType.name();
            _builder_2.append(_name_4);
            _builder_2.append(".DesktopLauncher\"");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("project.ext.assetsDir = new File(\"../");
            String _name_5 = GameProperties.ProjectType.android.name();
            _builder_2.append(_name_5);
            _builder_2.append("/assets\");");
            _builder_2.newLineIfNotEmpty();
            _builder_2.newLine();
            _builder_2.append("task run(dependsOn: classes, type: JavaExec) {");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("main = project.mainClassName");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("classpath = sourceSets.main.runtimeClasspath");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("standardInput = System.in");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("workingDir = project.assetsDir");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("ignoreExitValue = true");
            _builder_2.newLine();
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("task debug(dependsOn: classes, type: JavaExec) {");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("main = project.mainClassName");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("classpath = sourceSets.main.runtimeClasspath");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("standardInput = System.in");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("workingDir = project.assetsDir");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("ignoreExitValue = true");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("debug = true");
            _builder_2.newLine();
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("task dist(type: Jar) {");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("from files(sourceSets.main.output.classesDir)");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("from files(sourceSets.main.output.resourcesDir)");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("from {configurations.compile.collect {zipTree(it)}}");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("from files(project.assetsDir);");
            _builder_2.newLine();
            _builder_2.append(" ");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("manifest {");
            _builder_2.newLine();
            _builder_2.append("        ");
            _builder_2.append("attributes \'Main-Class\': project.mainClassName");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("dist.dependsOn classes");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("eclipse {");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("project {");
            _builder_2.newLine();
            _builder_2.append("        ");
            _builder_2.append("name = appName + \"-");
            String _name_6 = GameProperties.ProjectType.desktop.name();
            _builder_2.append(_name_6, "        ");
            _builder_2.append("\"");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("        ");
            _builder_2.append("linkedResource name: \'assets\', type: \'2\', location: \'PARENT-1-PROJECT_LOC/");
            String _name_7 = GameProperties.ProjectType.android.name();
            _builder_2.append(_name_7, "        ");
            _builder_2.append("/assets\'");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("    ");
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.newLine();
            _builder_2.append("task afterEclipseImport(description: \"Post processing after project generation\", group: \"IDE\") {");
            _builder_2.newLine();
            _builder_2.append("  ");
            _builder_2.append("doLast {");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("def classpath = new XmlParser().parse(file(\".classpath\"))");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("new Node(classpath, \"classpathentry\", [ kind: \'src\', path: \'assets\' ]);");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("def writer = new FileWriter(file(\".classpath\"))");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("def printer = new XmlNodePrinter(new PrintWriter(writer))");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("printer.setPreserveWhitespace(true)");
            _builder_2.newLine();
            _builder_2.append("    ");
            _builder_2.append("printer.print(classpath)");
            _builder_2.newLine();
            _builder_2.append("  ");
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.append("}");
            script = _builder_2.toString();
            break;
          case html:
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("apply plugin: \"java\"");
            _builder_3.newLine();
            _builder_3.append("apply plugin: \"jetty\"");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("gwt {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("gwtVersion=\'2.8.0\' // Should match the gwt version used for building the gwt backend");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("maxHeapSize=\"1G\" // Default 256m is not enough for gwt compiler. GWT is HUNGRY");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("minHeapSize=\"1G\"");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("src = files(file(\"src/\")) // Needs to be in front of \"modules\" below.");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("modules \'");
            _builder_3.append(packageName, "    ");
            _builder_3.append(".GdxDefinition\'");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("    ");
            _builder_3.append("devModules \'");
            _builder_3.append(packageName, "    ");
            _builder_3.append(".GdxDefinitionSuperdev\'");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("    ");
            _builder_3.append("project.webAppDirName = \'webapp\'");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("compiler {");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("strict = true;");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("disableCastChecking = true;");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("task draftRun(type: JettyRunWar) {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("dependsOn draftWar");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("dependsOn.remove(\'war\')");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("webApp=draftWar.archivePath");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("daemon=true");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("task superDev(type: de.richsource.gradle.plugins.gwt.GwtSuperDev) {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("dependsOn draftRun");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("doFirst {");
            _builder_3.newLine();
            _builder_3.append("    \t");
            _builder_3.append("gwt.modules = gwt.devModules");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("task dist(dependsOn: [clean, compileGwt]) {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("doLast {");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("file(\"build/dist\").mkdirs()");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("copy {");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("from \"build/gwt/out\"");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("into \"build/dist\"");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("copy {");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("from \"webapp\"");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("into \"build/dist\"");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("copy {");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("from \"war\"");
            _builder_3.newLine();
            _builder_3.append("            ");
            _builder_3.append("into \"build/dist\"");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("draftWar {");
            _builder_3.newLine();
            _builder_3.append("   ");
            _builder_3.append("from \"war\"");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("task addSource {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("doLast {");
            _builder_3.newLine();
            _builder_3.append("        ");
            _builder_3.append("sourceSets.main.compileClasspath += files(project(\':");
            String _name_8 = GameProperties.ProjectType.core.name();
            _builder_3.append(_name_8, "        ");
            _builder_3.append("\').sourceSets.main.allJava.srcDirs)");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("    ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("tasks.compileGwt.dependsOn(addSource)");
            _builder_3.newLine();
            _builder_3.append("tasks.draftCompileGwt.dependsOn(addSource)");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("sourceCompatibility = 1.6");
            _builder_3.newLine();
            _builder_3.append("sourceSets.main.java.srcDirs = [ \"src/\" ]");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.append("eclipse.project {");
            _builder_3.newLine();
            _builder_3.append("    ");
            _builder_3.append("name = appName + \"-");
            String _name_9 = pType.name();
            _builder_3.append(_name_9, "    ");
            _builder_3.append("\"");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("}");
            script = _builder_3.toString();
            break;
          case ios:
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("sourceSets.main.java.srcDirs = [ \"src/\" ]");
            _builder_4.newLine();
            _builder_4.newLine();
            _builder_4.append("sourceCompatibility = \'1.7\'");
            _builder_4.newLine();
            _builder_4.append("[compileJava, compileTestJava]*.options*.encoding = \'UTF-8\'");
            _builder_4.newLine();
            _builder_4.newLine();
            _builder_4.append("ext {");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("mainClassName = \"");
            _builder_4.append(packageName, "\t");
            _builder_4.append(".IOSLauncher\"");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("}");
            _builder_4.newLine();
            _builder_4.newLine();
            _builder_4.append("launchIPhoneSimulator.dependsOn build");
            _builder_4.newLine();
            _builder_4.append("launchIPadSimulator.dependsOn build");
            _builder_4.newLine();
            _builder_4.append("launchIOSDevice.dependsOn build");
            _builder_4.newLine();
            _builder_4.append("createIPA.dependsOn build");
            _builder_4.newLine();
            _builder_4.newLine();
            _builder_4.append("robovm {");
            _builder_4.newLine();
            _builder_4.append("\t");
            _builder_4.append("archs = \"thumbv7:arm64\"");
            _builder_4.newLine();
            _builder_4.append("}");
            _builder_4.newLine();
            _builder_4.newLine();
            _builder_4.append("eclipse.project {");
            _builder_4.newLine();
            _builder_4.append("    ");
            _builder_4.append("name = appName + \"-");
            String _name_10 = pType.name();
            _builder_4.append(_name_10, "    ");
            _builder_4.append("\"");
            _builder_4.newLineIfNotEmpty();
            _builder_4.append("    ");
            _builder_4.append("natures \'org.robovm.eclipse.RoboVMNature\'");
            _builder_4.newLine();
            _builder_4.append("}");
            script = _builder_4.toString();
            break;
          case iosmoe:
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("// Exclude all files from Gradle\'s test runner");
            _builder_5.newLine();
            _builder_5.append("test { exclude \'**\' }");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("task copyNatives {");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("doLast {");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("file(\"xcode/native/ios/\").mkdirs();");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("def LD_FLAGS = \"LIBGDX_NATIVES = \"");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("configurations.natives.files.each { jar->");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("def outputDir = null");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("if (jar.name.endsWith(\"natives-ios.jar\")) outputDir = file(\"xcode/native/ios\")");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("if (outputDir != null) {");
            _builder_5.newLine();
            _builder_5.append("                ");
            _builder_5.append("FileCollection fileCollection = zipTree(jar)");
            _builder_5.newLine();
            _builder_5.append("                ");
            _builder_5.append("for (File libFile : fileCollection) {");
            _builder_5.newLine();
            _builder_5.append("                    ");
            _builder_5.append("if (libFile.getAbsolutePath().endsWith(\".a\") && !libFile.getAbsolutePath().contains(\"/tvos/\")) {");
            _builder_5.newLine();
            _builder_5.append("                        ");
            _builder_5.append("copy {");
            _builder_5.newLine();
            _builder_5.append("                            ");
            _builder_5.append("from libFile.getAbsolutePath()");
            _builder_5.newLine();
            _builder_5.append("                            ");
            _builder_5.append("into outputDir");
            _builder_5.newLine();
            _builder_5.append("                        ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("                        ");
            _builder_5.append("LD_FLAGS += \" -force_load \\${SRCROOT}/native/ios/\" + libFile.getName()");
            _builder_5.newLine();
            _builder_5.append("                    ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("                ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("def outFlags = file(\"xcode/");
            String _name_11 = GameProperties.ProjectType.iosmoe.name();
            _builder_5.append(_name_11, "        ");
            _builder_5.append("/custom.xcconfig\");");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("        ");
            _builder_5.append("outFlags.write LD_FLAGS");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("def proguard = file(\"proguard.append.cfg\")");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("if (!proguard.exists()) {");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("proguard = new File(\"proguard.append.cfg\")");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("proguard << \"\\n-keep class com.badlogic.** { *; }\\n\"");
            _builder_5.newLine();
            _builder_5.append("            ");
            _builder_5.append("proguard << \"-keep enum com.badlogic.** { *; }\\n\"");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("sourceSets.main.java.srcDirs = [ \"src/\" ]");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("// Setup Multi-OS Engine");
            _builder_5.newLine();
            _builder_5.append("moe {");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("xcode {");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("project \'xcode/");
            String _name_12 = GameProperties.ProjectType.iosmoe.name();
            _builder_5.append(_name_12, "        ");
            _builder_5.append(".xcodeproj\'");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("        ");
            _builder_5.append("mainTarget \'");
            String _name_13 = GameProperties.ProjectType.iosmoe.name();
            _builder_5.append(_name_13, "        ");
            _builder_5.append("\'");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("        ");
            _builder_5.append("testTarget \'");
            String _name_14 = GameProperties.ProjectType.iosmoe.name();
            _builder_5.append(_name_14, "        ");
            _builder_5.append("-Test\'");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("    ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("remoteBuild {");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("resources = [ file(\"../android/assets\") ]");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("moeMainReleaseIphoneosXcodeBuild.dependsOn copyNatives");
            _builder_5.newLine();
            _builder_5.append("moeMainDebugIphoneosXcodeBuild.dependsOn copyNatives");
            _builder_5.newLine();
            _builder_5.append("moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyNatives");
            _builder_5.newLine();
            _builder_5.append("moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyNatives");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("// Setup Eclipse");
            _builder_5.newLine();
            _builder_5.append("eclipse {");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("// Set Multi-OS Engine nature");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("project {");
            _builder_5.newLine();
            _builder_5.append("        ");
            _builder_5.append("name = appName + \"-");
            String _name_15 = GameProperties.ProjectType.iosmoe.name();
            _builder_5.append(_name_15, "        ");
            _builder_5.append("\"");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("        ");
            _builder_5.append("natures \'org.multi-os-engine.project\'");
            _builder_5.newLine();
            _builder_5.append("    ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            script = _builder_5.toString();
            break;
          default:
            break;
        }
      }
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildAndroidManifest(final String packageName, final GamePackage pkg) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
      _builder.newLine();
      _builder.append("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("package=\"");
      _builder.append(packageName, "    ");
      _builder.append("\" >");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<uses-sdk android:minSdkVersion=\"");
      int _minAndroidVersion = pkg.getConfig().getAndroid().getMinAndroidVersion();
      _builder.append(_minAndroidVersion, "    ");
      _builder.append("\" android:targetSdkVersion=\"");
      int _targetAndroidVersion = pkg.getConfig().getAndroid().getTargetAndroidVersion();
      _builder.append(_targetAndroidVersion, "    ");
      _builder.append("\" />");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<application");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("android:allowBackup=\"true\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("android:icon=\"@drawable/ic_launcher\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("android:label=\"@string/app_name\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("android:theme=\"@style/GdxTheme\" >");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<activity");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("android:name=\"");
      _builder.append(packageName, "            ");
      _builder.append(".AndroidLauncher\"");
      _builder.newLineIfNotEmpty();
      _builder.append("            ");
      _builder.append("android:label=\"@string/app_name\" ");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("android:screenOrientation=\"");
      String _literal = pkg.getConfig().getAndroid().getOrientation().getLiteral();
      _builder.append(_literal, "            ");
      _builder.append("\" ");
      _builder.newLineIfNotEmpty();
      _builder.append("            ");
      _builder.append("android:configChanges=\"keyboard|keyboardHidden|navigation|orientation|screenSize\">");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<intent-filter>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<action android:name=\"android.intent.action.MAIN\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<category android:name=\"android.intent.category.LAUNCHER\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</intent-filter>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</activity>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</application>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("</manifest>");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildGwtSuperdev(final String packageName) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit trunk//EN\" \"http://google-web-toolkit.googlecode.com/svn/trunk/distro-source/core/src/gwt-module.dtd\">");
      _builder.newLine();
      _builder.append("<module rename-to=\"html\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<inherits name=\'com.badlogic.gdx.backends.gdx_backends_gwt\' />");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<inherits name=\'com.badlogic.gdx.physics.box2d.box2d-gwt\' />");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<inherits name=\'");
      _builder.append(packageName, "    ");
      _builder.append(".GdxDefinition\' />");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<collapse-all-properties />");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<add-linker name=\"xsiframe\"/>\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<set-configuration-property name=\"devModeRedirectEnabled\" value=\"true\"/>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<set-configuration-property name=\'xsiframe.failIfScriptTag\' value=\'FALSE\'/>\t");
      _builder.newLine();
      _builder.append("</module>");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected ByteArrayInputStream buildGwt(final String projectName, final String packageName, final String launcherName) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<!DOCTYPE module PUBLIC \"-//Google Inc.//DTD Google Web Toolkit trunk//EN\" \"http://google-web-toolkit.googlecode.com/svn/trunk/distro-source/core/src/gwt-module.dtd\">");
      _builder.newLine();
      _builder.append("<module rename-to=\"html\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<inherits name=\'com.badlogic.gdx.backends.gdx_backends_gwt\' />");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<inherits name=\'com.badlogic.gdx.physics.box2d.box2d-gwt\' />");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<inherits name=\'");
      _builder.append(projectName, "\t");
      _builder.append("\' />");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<entry-point class=\'");
      _builder.append(packageName, "\t");
      _builder.append(".");
      _builder.append(launcherName, "\t");
      _builder.append("\' />");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<set-configuration-property name=\'xsiframe.failIfScriptTag\' value=\'FALSE\'/>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<set-configuration-property name=\"gdx.assetpath\" value=\"../android/assets\" />");
      _builder.newLine();
      _builder.append("</module>");
      _builder.newLine();
      String script = _builder.toString();
      byte[] _bytes = script.getBytes("UTF-8");
      return new ByteArrayInputStream(_bytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
