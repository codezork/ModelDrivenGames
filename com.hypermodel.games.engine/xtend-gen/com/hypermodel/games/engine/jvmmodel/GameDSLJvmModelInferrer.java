package com.hypermodel.games.engine.jvmmodel;

import android.os.Bundle;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Game;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.backends.android.AndroidApplication;
import com.badlogic.gdx.backends.gwt.GwtApplication;
import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
import com.badlogic.gdx.backends.iosrobovm.IOSApplication;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.utils.Disposable;
import com.badlogic.gdx.utils.viewport.FitViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import com.google.common.base.Objects;
import com.google.gwt.event.logical.shared.ResizeEvent;
import com.google.gwt.event.logical.shared.ResizeHandler;
import com.hypermodel.games.engine.gameDSL.GameDisplay;
import com.hypermodel.games.engine.gameDSL.GameDisplayValueType;
import com.hypermodel.games.engine.gameDSL.GamePackage;
import com.hypermodel.games.engine.gameDSL.GameRoot;
import com.hypermodel.games.engine.gameDSL.GameScene;
import com.hypermodel.games.engine.gameDSL.GameScreen;
import com.hypermodel.games.engine.generator.GameProperties;
import java.util.Arrays;
import java.util.function.Consumer;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmAnnotationReference;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.moe.natj.general.Pointer;

@SuppressWarnings("all")
public class GameDSLJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private final String genInfo = "generated by hypermodels.com";
  
  protected void _infer(final GamePackage gamePkg, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Consumer<GameRoot> _function = (GameRoot game) -> {
      final JvmGenericType rootClass = this._jvmTypesBuilder.toClass(gamePkg, this._iQualifiedNameProvider.getFullyQualifiedName(game));
      final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Game.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        it.setPackageName(this._iQualifiedNameProvider.getFullyQualifiedName(game).skipLast(1).toString());
        this._jvmTypesBuilder.setDocumentation(it, this.genInfo);
        this.toFields(it, game);
        this.toOperations(it, gamePkg, game);
      };
      acceptor.<JvmGenericType>accept(rootClass, _function_1);
      final Function1<GameProperties.ProjectType, Boolean> _function_2 = (GameProperties.ProjectType it) -> {
        return Boolean.valueOf((!Objects.equal(it, GameProperties.ProjectType.core)));
      };
      final Consumer<GameProperties.ProjectType> _function_3 = (GameProperties.ProjectType it) -> {
        this.createLauncher(acceptor, gamePkg, game, it);
      };
      IterableExtensions.<GameProperties.ProjectType>filter(((Iterable<GameProperties.ProjectType>)Conversions.doWrapArray(GameProperties.ProjectType.values())), _function_2).forEach(_function_3);
      final Consumer<GameScene> _function_4 = (GameScene it) -> {
        this.createScene(acceptor, gamePkg, rootClass, it);
      };
      game.getScenes().forEach(_function_4);
      final Consumer<GameScreen> _function_5 = (GameScreen it) -> {
        this.createScreen(acceptor, gamePkg, rootClass, it);
      };
      game.getScreens().forEach(_function_5);
    };
    gamePkg.getGames().forEach(_function);
  }
  
  protected void createLauncher(final IJvmDeclaredTypeAcceptor acceptor, final GamePackage gamePkg, final GameRoot game, final GameProperties.ProjectType pType) {
    final String doc = this.genInfo;
    if (pType != null) {
      switch (pType) {
        case android:
          StringConcatenation _builder = new StringConcatenation();
          String _firstUpper = StringExtensions.toFirstUpper(pType.name());
          _builder.append(_firstUpper);
          _builder.append("Launcher");
          final JvmGenericType launcherClass = this._jvmTypesBuilder.toClass(gamePkg, _builder.toString());
          launcherClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(AndroidApplication.class));
          final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
            final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "savedInstanceState", this._typeReferenceBuilder.typeRef(Bundle.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("super.onCreate(savedInstanceState);");
                _builder_1.newLine();
                _builder_1.append("AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();");
                _builder_1.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_1.append("config.useAccelerometer = true;");
                  }
                }
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("initialize(new ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_1.append(_firstUpper_1);
                _builder_1.append("(), config);");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_2);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "onCreate", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            it.setPackageName(this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function);
          break;
        case desktop:
          StringConcatenation _builder_1 = new StringConcatenation();
          String _firstUpper_1 = StringExtensions.toFirstUpper(pType.name());
          _builder_1.append(_firstUpper_1);
          _builder_1.append("Launcher");
          final JvmGenericType launcherClass_1 = this._jvmTypesBuilder.toClass(gamePkg, _builder_1.toString());
          final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
            final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();");
                _builder_2.newLine();
                _builder_2.append("new LwjglApplication(new ");
                QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(game);
                _builder_2.append(_fullyQualifiedName);
                _builder_2.append("(), config);");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_3);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
            method.setStatic(true);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            StringConcatenation _builder_2 = new StringConcatenation();
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString();
            _builder_2.append(_string);
            _builder_2.append(".");
            String _name = pType.name();
            _builder_2.append(_name);
            it.setPackageName(_builder_2.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
          };
          acceptor.<JvmGenericType>accept(launcherClass_1, _function_1);
          break;
        case html:
          StringConcatenation _builder_2 = new StringConcatenation();
          String _firstUpper_2 = StringExtensions.toFirstUpper(pType.name());
          _builder_2.append(_firstUpper_2);
          _builder_2.append("Launcher");
          final JvmGenericType launcherClass_2 = this._jvmTypesBuilder.toClass(gamePkg, _builder_2.toString());
          launcherClass_2.getSuperTypes().add(this._typeReferenceBuilder.typeRef(GwtApplication.class));
          final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
            StringConcatenation _builder_3 = new StringConcatenation();
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString();
            _builder_3.append(_string);
            _builder_3.append(".client");
            it.setPackageName(_builder_3.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
              final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("0");
                it_2.append(_builder_4);
              };
              this._jvmTypesBuilder.setInitializer(it_1, _function_4);
            };
            JvmField field = this._jvmTypesBuilder.toField(game, "PADDING", this._typeReferenceBuilder.typeRef(int.class), _function_3);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmField>operator_add(_members, field);
            field = this._jvmTypesBuilder.toField(game, "cfg", this._typeReferenceBuilder.typeRef(GwtApplicationConfiguration.class));
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmField>operator_add(_members_1, field);
            final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("int w = Window.getClientWidth() - PADDING;");
                _builder_4.newLine();
                _builder_4.append("int h = Window.getClientHeight() - PADDING;");
                _builder_4.newLine();
                _builder_4.append("cfg = new GwtApplicationConfiguration(w, h);");
                _builder_4.newLine();
                _builder_4.append("Window.enableScrolling(false);");
                _builder_4.newLine();
                _builder_4.append("Window.setMargin(\"0\");");
                _builder_4.newLine();
                _builder_4.append("Window.addResizeHandler(new ResizeListener());");
                _builder_4.newLine();
                _builder_4.append("cfg.preferFlash = false;");
                _builder_4.newLine();
                _builder_4.append("return cfg;");
                it_2.append(_builder_4);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_5);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "getConfig", this._typeReferenceBuilder.typeRef(GwtApplicationConfiguration.class), _function_4);
            EList<JvmMember> _members_2 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, method);
            final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("return new ");
                QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(game);
                _builder_4.append(_fullyQualifiedName);
                _builder_4.append("();");
                it_2.append(_builder_4);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            method = this._jvmTypesBuilder.toMethod(game, "createApplicationListener", this._typeReferenceBuilder.typeRef(ApplicationListener.class), _function_5);
            EList<JvmMember> _members_3 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, method);
            final JvmGenericType resizeClass = this._jvmTypesBuilder.toClass(gamePkg, "ResizeListener");
            resizeClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(ResizeHandler.class));
            final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "event", this._typeReferenceBuilder.typeRef(ResizeEvent.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("int width = event.getWidth() - PADDING;");
                _builder_4.newLine();
                _builder_4.append("int height = event.getHeight() - PADDING;");
                _builder_4.newLine();
                _builder_4.append("getRootPanel().setWidth(\"\" + width + \"px\");");
                _builder_4.newLine();
                _builder_4.append("getRootPanel().setHeight(\"\" + height + \"px\");");
                _builder_4.newLine();
                _builder_4.append("getApplicationListener().resize(width, height);");
                _builder_4.newLine();
                _builder_4.append("Gdx.graphics.setWindowedMode(width, height);");
                it_2.append(_builder_4);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_7);
            };
            JvmOperation innermethod = this._jvmTypesBuilder.toMethod(game, "onResize", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_6);
            EList<JvmMember> _members_4 = resizeClass.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, innermethod);
            EList<JvmMember> _members_5 = it.getMembers();
            this._jvmTypesBuilder.<JvmGenericType>operator_add(_members_5, resizeClass);
          };
          acceptor.<JvmGenericType>accept(launcherClass_2, _function_2);
          break;
        case ios:
          StringConcatenation _builder_3 = new StringConcatenation();
          String _upperCase = pType.name().toUpperCase();
          _builder_3.append(_upperCase);
          _builder_3.append("Launcher");
          final JvmGenericType launcherClass_3 = this._jvmTypesBuilder.toClass(gamePkg, _builder_3.toString());
          launcherClass_3.getSuperTypes().add(this._typeReferenceBuilder.typeRef(IOSApplication.Delegate.class));
          final Procedure1<JvmGenericType> _function_3 = (JvmGenericType it) -> {
            StringConcatenation _builder_4 = new StringConcatenation();
            String _string = this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString();
            _builder_4.append(_string);
            it.setPackageName(_builder_4.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("IOSApplicationConfiguration config = new IOSApplicationConfiguration();");
                _builder_5.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getIos().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_5.append("config.useAccelerometer = true;");
                  }
                }
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("return new IOSApplication(new ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(game.getName());
                _builder_5.append(_firstUpper_3);
                _builder_5.append("(), config);");
                it_2.append(_builder_5);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_5);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "createApplication", this._typeReferenceBuilder.typeRef(IOSApplication.class), _function_4);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("NSAutoreleasePool pool = new NSAutoreleasePool();");
                _builder_5.newLine();
                _builder_5.append("UIApplication.main(arg, null, ");
                String _upperCase_1 = pType.name().toUpperCase();
                _builder_5.append(_upperCase_1);
                _builder_5.append(GameProperties.launcherPostfix);
                _builder_5.append(".class);");
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("pool.close();");
                it_2.append(_builder_5);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_5);
            method.setStatic(true);
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, method);
          };
          acceptor.<JvmGenericType>accept(launcherClass_3, _function_3);
          break;
        case iosmoe:
          StringConcatenation _builder_4 = new StringConcatenation();
          String _upperCase_1 = pType.name().toUpperCase();
          _builder_4.append(_upperCase_1);
          _builder_4.append("Launcher");
          final JvmGenericType launcherClass_4 = this._jvmTypesBuilder.toClass(gamePkg, _builder_4.toString());
          launcherClass_4.getSuperTypes().add(this._typeReferenceBuilder.typeRef(com.badlogic.gdx.backends.iosmoe.IOSApplication.Delegate.class));
          final Procedure1<JvmGenericType> _function_4 = (JvmGenericType it) -> {
            it.setPackageName(this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmConstructor> _function_5 = (JvmConstructor it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "peer", this._typeReferenceBuilder.typeRef(Pointer.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("super(peer);");
                it_2.append(_builder_5);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            JvmConstructor constructor = this._jvmTypesBuilder.toConstructor(game, _function_5);
            constructor.setVisibility(JvmVisibility.PROTECTED);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, constructor);
            final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("IOSApplicationConfiguration config = new IOSApplicationConfiguration();");
                _builder_5.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getIosmoe().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_5.append("config.useAccelerometer = true;");
                  }
                }
                _builder_5.newLineIfNotEmpty();
                _builder_5.append("return new IOSApplication(new ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(game.getName());
                _builder_5.append(_firstUpper_3);
                _builder_5.append("(), config);");
                it_2.append(_builder_5);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_7);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "createApplication", this._typeReferenceBuilder.typeRef(com.badlogic.gdx.backends.iosmoe.IOSApplication.class), _function_6);
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, method);
            final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_8 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("UIKit.UIApplicationMain(0, null, null, ");
                String _upperCase_2 = pType.name().toUpperCase();
                _builder_5.append(_upperCase_2);
                _builder_5.append(GameProperties.launcherPostfix);
                _builder_5.append(".class.getName());");
                it_2.append(_builder_5);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_8);
            };
            method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_7);
            method.setStatic(true);
            EList<JvmMember> _members_2 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, method);
          };
          acceptor.<JvmGenericType>accept(launcherClass_4, _function_4);
          break;
        default:
          break;
      }
    } else {
    }
  }
  
  public void toFields(final JvmGenericType type, final GameRoot game) {
    JvmField field = null;
    field = this._jvmTypesBuilder.toField(game, "batch", this._typeReferenceBuilder.typeRef(SpriteBatch.class));
    EList<JvmMember> _members = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members, field);
    final Procedure1<JvmField> _function = (JvmField it) -> {
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        int _width = game.getWidth();
        _builder.append(_width);
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setInitializer(it, _function_1);
    };
    field = this._jvmTypesBuilder.toField(game, "V_WIDTH", this._typeReferenceBuilder.typeRef(int.class), _function);
    field.setStatic(true);
    field.setFinal(true);
    field.setVisibility(JvmVisibility.PUBLIC);
    EList<JvmMember> _members_1 = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members_1, field);
    final Procedure1<JvmField> _function_1 = (JvmField it) -> {
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        int _height = game.getHeight();
        _builder.append(_height);
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setInitializer(it, _function_2);
    };
    field = this._jvmTypesBuilder.toField(game, "V_HEIGHT", this._typeReferenceBuilder.typeRef(int.class), _function_1);
    field.setStatic(true);
    field.setFinal(true);
    field.setVisibility(JvmVisibility.PUBLIC);
    EList<JvmMember> _members_2 = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members_2, field);
    final Procedure1<JvmField> _function_2 = (JvmField it) -> {
      final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _title = game.getTitle();
        _builder.append(_title);
        _builder.append("\"");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setInitializer(it, _function_3);
    };
    field = this._jvmTypesBuilder.toField(game, "TITLE", this._typeReferenceBuilder.typeRef(String.class), _function_2);
    field.setStatic(true);
    field.setFinal(true);
    EList<JvmMember> _members_3 = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members_3, field);
    final Procedure1<JvmField> _function_3 = (JvmField it) -> {
      final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        int _ppm = game.getPpm();
        _builder.append(_ppm);
        _builder.append("f");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setInitializer(it, _function_4);
    };
    field = this._jvmTypesBuilder.toField(game, "PPM", this._typeReferenceBuilder.typeRef(float.class), _function_3);
    field.setStatic(true);
    field.setFinal(true);
    EList<JvmMember> _members_4 = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members_4, field);
  }
  
  public void toOperations(final JvmGenericType type, final GamePackage gamePkg, final GameRoot game) {
    EList<JvmMember> _members = type.getMembers();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("batch = new SpriteBatch();");
        _builder.newLine();
        it_1.append(_builder);
        EList<GameScreen> _screens = game.getScreens();
        for (final GameScreen screen : _screens) {
          {
            it_1.append("setScreen(new ");
            it_1.append(this._jvmTypesBuilder.toClass(gamePkg, this._iQualifiedNameProvider.getFullyQualifiedName(screen)));
            it_1.append("(this));");
          }
        }
      };
      this._jvmTypesBuilder.setBody(it, _function_1);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(game, "create", this._typeReferenceBuilder.typeRef(Void.TYPE), _function);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    EList<JvmMember> _members_1 = type.getMembers();
    final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("super.render();");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_2);
    };
    JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(game, "render", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
    EList<JvmMember> _members_2 = type.getMembers();
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("super.dispose();");
        _builder.newLine();
        _builder.append("batch.dispose();");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_3);
    };
    JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(game, "dispose", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_2);
  }
  
  public void createScreen(final IJvmDeclaredTypeAcceptor acceptor, final GamePackage gamePkg, final JvmGenericType gameClass, final GameScreen screen) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Screen.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      it.setPackageName(this._iQualifiedNameProvider.getFullyQualifiedName(screen).skipLast(1).toString());
      this._jvmTypesBuilder.setDocumentation(it, this.genInfo);
      this.toFields(it, screen, gameClass);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(gamePkg, "game", this._typeReferenceBuilder.typeRef(gameClass));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("this.game = game;");
          _builder.newLine();
          _builder.append("atlas = new TextureAtlas(\"");
          String _atlasName = screen.getAtlasName();
          _builder.append(_atlasName);
          _builder.append(".pack\");");
          _builder.newLineIfNotEmpty();
          it_2.append(_builder);
        };
        this._jvmTypesBuilder.setBody(it_1, _function_2);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(screen, _function_1);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, _constructor);
      this.toOperations(it, screen);
    };
    acceptor.<JvmGenericType>accept(
      this._jvmTypesBuilder.toClass(gamePkg, this._iQualifiedNameProvider.getFullyQualifiedName(screen)), _function);
  }
  
  public void toFields(final JvmGenericType type, final GameScreen screen, final JvmGenericType gameClass) {
    JvmField field = null;
    EList<JvmMember> _members = type.getMembers();
    JvmField _field = this._jvmTypesBuilder.toField(screen, "game", this._typeReferenceBuilder.typeRef(gameClass));
    this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
    EList<JvmMember> _members_1 = type.getMembers();
    JvmField _field_1 = this._jvmTypesBuilder.toField(screen, "atlas", this._typeReferenceBuilder.typeRef(TextureAtlas.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
    EList<JvmMember> _members_2 = type.getMembers();
    JvmField _field_2 = this._jvmTypesBuilder.toField(screen, "gamecam", this._typeReferenceBuilder.typeRef(OrthographicCamera.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
    EList<JvmMember> _members_3 = type.getMembers();
    JvmField _field_3 = this._jvmTypesBuilder.toField(screen, "gamePort", this._typeReferenceBuilder.typeRef(Viewport.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_3, _field_3);
    EList<JvmMember> _members_4 = type.getMembers();
    JvmField _field_4 = this._jvmTypesBuilder.toField(screen, "mapLoader", this._typeReferenceBuilder.typeRef(TmxMapLoader.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_4);
    EList<JvmMember> _members_5 = type.getMembers();
    JvmField _field_5 = this._jvmTypesBuilder.toField(screen, "map", this._typeReferenceBuilder.typeRef(TiledMap.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_5, _field_5);
    EList<JvmMember> _members_6 = type.getMembers();
    JvmField _field_6 = this._jvmTypesBuilder.toField(screen, "renderer", this._typeReferenceBuilder.typeRef(OrthogonalTiledMapRenderer.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_6, _field_6);
    EList<JvmMember> _members_7 = type.getMembers();
    JvmField _field_7 = this._jvmTypesBuilder.toField(screen, "world", this._typeReferenceBuilder.typeRef(World.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_7, _field_7);
    EList<JvmMember> _members_8 = type.getMembers();
    JvmField _field_8 = this._jvmTypesBuilder.toField(screen, "b2dr", this._typeReferenceBuilder.typeRef(Box2DDebugRenderer.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_8, _field_8);
    EList<JvmMember> _members_9 = type.getMembers();
    JvmField _field_9 = this._jvmTypesBuilder.toField(screen, "music", this._typeReferenceBuilder.typeRef(Music.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_9, _field_9);
  }
  
  public void toOperations(final JvmGenericType type, final GameScreen screen) {
    EList<JvmMember> _members = type.getMembers();
    JvmOperation _getter = this._jvmTypesBuilder.toGetter(screen, "atlas", this._typeReferenceBuilder.typeRef(TextureAtlas.class));
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _getter);
    EList<JvmMember> _members_1 = type.getMembers();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(screen, "width", this._typeReferenceBuilder.typeRef(int.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      EList<JvmFormalParameter> _parameters_1 = it.getParameters();
      JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(screen, "height", this._typeReferenceBuilder.typeRef(int.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_1);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(screen, "resize", this._typeReferenceBuilder.typeRef(Void.TYPE), _function);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    EList<JvmMember> _members_2 = type.getMembers();
    final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_2);
    };
    JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(screen, "pause", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
    EList<JvmMember> _members_3 = type.getMembers();
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_3);
    };
    JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(screen, "resume", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_2);
    EList<JvmMember> _members_4 = type.getMembers();
    final Procedure1<JvmOperation> _function_3 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_4);
    };
    JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(screen, "dispose", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_3);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_3);
    EList<JvmMember> _members_5 = type.getMembers();
    final Procedure1<JvmOperation> _function_4 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_5);
    };
    JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(screen, "show", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_4);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_4);
    EList<JvmMember> _members_6 = type.getMembers();
    final Procedure1<JvmOperation> _function_5 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(screen, "delta", this._typeReferenceBuilder.typeRef(float.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_6);
    };
    JvmOperation _method_5 = this._jvmTypesBuilder.toMethod(screen, "render", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_5);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_5);
    EList<JvmMember> _members_7 = type.getMembers();
    final Procedure1<JvmOperation> _function_6 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_7);
    };
    JvmOperation _method_6 = this._jvmTypesBuilder.toMethod(screen, "hide", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_6);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_7, _method_6);
  }
  
  public void createScene(final IJvmDeclaredTypeAcceptor acceptor, final GamePackage gamePkg, final JvmGenericType gameClass, final GameScene scene) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Disposable.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      it.setPackageName(this._iQualifiedNameProvider.getFullyQualifiedName(scene).skipLast(1).toString());
      this._jvmTypesBuilder.setDocumentation(it, this.genInfo);
      this.toFields(it, scene, gameClass);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(gamePkg, "spriteBatch", this._typeReferenceBuilder.typeRef(SpriteBatch.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
          it_2.append("viewport = new ");
          it_2.append(FitViewport.class);
          it_2.append("(");
          it_2.append(this._jvmTypesBuilder.toClass(gamePkg, this._iQualifiedNameProvider.getFullyQualifiedName(gameClass)));
          StringConcatenation _builder = new StringConcatenation();
          _builder.append(".V_WIDTH, ");
          String _simpleName = gameClass.getSimpleName();
          _builder.append(_simpleName);
          _builder.append(".V_HEIGHT, new ");
          it_2.append(_builder);
          it_2.append(OrthographicCamera.class);
          it_2.append("());\n");
          it_2.append("stage = new ");
          it_2.append(Stage.class);
          it_2.append("(viewport, spriteBatch);\n");
          it_2.append(Table.class);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(" ");
          _builder_1.append("table = new Table();");
          _builder_1.newLine();
          _builder_1.append("table.top();");
          _builder_1.newLine();
          _builder_1.append("table.setFillParent(true);");
          _builder_1.newLine();
          _builder_1.append("stage.addActor(table);");
          _builder_1.newLine();
          it_2.append(_builder_1);
          final ITreeAppendable current = it_2;
          boolean _isHasScore = scene.isHasScore();
          if (_isHasScore) {
            final Consumer<GameDisplay> _function_3 = (GameDisplay it_3) -> {
              StringConcatenation _builder_2 = new StringConcatenation();
              String _name = it_3.getName();
              _builder_2.append(_name);
              _builder_2.append("TitleLabel = new Label(\"");
              String _upperCase = it_3.getName().toUpperCase();
              _builder_2.append(_upperCase);
              _builder_2.append("\", new Label.LabelStyle(new ");
              current.append(_builder_2);
              current.append(BitmapFont.class);
              current.append("(), ");
              current.append(Color.class);
              current.append(".WHITE));\n");
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("table.add(");
              String _name_1 = it_3.getName();
              _builder_3.append(_name_1);
              _builder_3.append("TitleLabel).expandX().padTop(");
              int _topPadding = scene.getScore().getTopPadding();
              _builder_3.append(_topPadding);
              _builder_3.append(");");
              _builder_3.newLineIfNotEmpty();
              current.append(_builder_3);
            };
            scene.getScore().getDisplays().forEach(_function_3);
            it_2.append("table.row();\n");
            final Consumer<GameDisplay> _function_4 = (GameDisplay it_3) -> {
              StringConcatenation _builder_2 = new StringConcatenation();
              String _name = it_3.getName();
              _builder_2.append(_name);
              _builder_2.append("ValueLabel = new Label(String.format(\"");
              String _format = it_3.getFormat();
              _builder_2.append(_format);
              _builder_2.append("\", ");
              String _name_1 = it_3.getName();
              _builder_2.append(_name_1);
              _builder_2.append("), new Label.LabelStyle(new BitmapFont(), Color.WHITE));");
              _builder_2.newLineIfNotEmpty();
              _builder_2.append("table.add(");
              String _name_2 = it_3.getName();
              _builder_2.append(_name_2);
              _builder_2.append("ValueLabel).expandX();");
              _builder_2.newLineIfNotEmpty();
              current.append(_builder_2);
            };
            scene.getScore().getDisplays().forEach(_function_4);
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _function_2);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(scene, _function_1);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, _constructor);
      this.toOperations(it, scene);
    };
    acceptor.<JvmGenericType>accept(
      this._jvmTypesBuilder.toClass(gamePkg, this._iQualifiedNameProvider.getFullyQualifiedName(scene)), _function);
  }
  
  public void toFields(final JvmGenericType type, final GameScene scene, final JvmGenericType gameClass) {
    JvmField field = this._jvmTypesBuilder.toField(scene, "stage", this._typeReferenceBuilder.typeRef(Stage.class));
    field.setVisibility(JvmVisibility.PUBLIC);
    EList<JvmMember> _members = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members, field);
    EList<JvmMember> _members_1 = type.getMembers();
    JvmField _field = this._jvmTypesBuilder.toField(scene, "viewport", this._typeReferenceBuilder.typeRef(Viewport.class));
    this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field);
    boolean _isHasScore = scene.isHasScore();
    if (_isHasScore) {
      final Consumer<GameDisplay> _function = (GameDisplay it) -> {
        EList<JvmMember> _members_2 = type.getMembers();
        StringConcatenation _builder = new StringConcatenation();
        String _name = it.getName();
        _builder.append(_name);
        _builder.append("TimeCount");
        final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
          final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
            it_2.append("0");
          };
          this._jvmTypesBuilder.setInitializer(it_1, _function_2);
        };
        JvmField _field_1 = this._jvmTypesBuilder.toField(scene, _builder.toString(), this._typeReferenceBuilder.typeRef(float.class), _function_1);
        this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_1);
        StringConcatenation _builder_1 = new StringConcatenation();
        String _name_1 = it.getName();
        _builder_1.append(_name_1);
        JvmField displayField = this._jvmTypesBuilder.toField(scene, _builder_1.toString(), this._typeReferenceBuilder.typeRef(it.getType().getName()));
        final GameDisplay current = it;
        final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
          StringConcatenation _builder_2 = new StringConcatenation();
          {
            boolean _isHasInitial = current.isHasInitial();
            if (_isHasInitial) {
              {
                GameDisplayValueType _type = current.getType();
                boolean _equals = Objects.equal(_type, GameDisplayValueType.STRING);
                if (_equals) {
                  _builder_2.append("\"");
                  String _initialStringValue = current.getInitialStringValue();
                  _builder_2.append(_initialStringValue);
                  _builder_2.append("\"");
                } else {
                  GameDisplayValueType _type_1 = current.getType();
                  boolean _equals_1 = Objects.equal(_type_1, GameDisplayValueType.FLOAT);
                  if (_equals_1) {
                    float _initialNumberValue = current.getInitialNumberValue();
                    _builder_2.append(_initialNumberValue);
                  } else {
                    GameDisplayValueType _type_2 = current.getType();
                    boolean _equals_2 = Objects.equal(_type_2, GameDisplayValueType.INT);
                    if (_equals_2) {
                      int _initialIntValue = current.getInitialIntValue();
                      _builder_2.append(_initialIntValue);
                    }
                  }
                }
              }
            } else {
              {
                GameDisplayValueType _type_3 = current.getType();
                boolean _equals_3 = Objects.equal(_type_3, GameDisplayValueType.STRING);
                if (_equals_3) {
                  _builder_2.append("\"\"");
                } else {
                  GameDisplayValueType _type_4 = current.getType();
                  boolean _equals_4 = Objects.equal(_type_4, GameDisplayValueType.FLOAT);
                  if (_equals_4) {
                    _builder_2.append("0.0");
                  } else {
                    GameDisplayValueType _type_5 = current.getType();
                    boolean _equals_5 = Objects.equal(_type_5, GameDisplayValueType.INT);
                    if (_equals_5) {
                      _builder_2.append("0");
                    }
                  }
                }
              }
            }
          }
          it_1.append(_builder_2);
        };
        this._jvmTypesBuilder.setInitializer(displayField, _function_2);
        if ((it.isHasAdder() || it.isHasSetter())) {
          displayField.setStatic(true);
        }
        EList<JvmMember> _members_3 = type.getMembers();
        this._jvmTypesBuilder.<JvmField>operator_add(_members_3, displayField);
        EList<JvmMember> _members_4 = type.getMembers();
        StringConcatenation _builder_2 = new StringConcatenation();
        String _name_2 = it.getName();
        _builder_2.append(_name_2);
        _builder_2.append("TitleLabel");
        JvmField _field_2 = this._jvmTypesBuilder.toField(scene, _builder_2.toString(), this._typeReferenceBuilder.typeRef(Label.class));
        this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_2);
        EList<JvmMember> _members_5 = type.getMembers();
        StringConcatenation _builder_3 = new StringConcatenation();
        String _name_3 = it.getName();
        _builder_3.append(_name_3);
        _builder_3.append("ValueLabel");
        JvmField _field_3 = this._jvmTypesBuilder.toField(scene, _builder_3.toString(), this._typeReferenceBuilder.typeRef(Label.class));
        this._jvmTypesBuilder.<JvmField>operator_add(_members_5, _field_3);
      };
      scene.getScore().getDisplays().forEach(_function);
    }
  }
  
  public void toOperations(final JvmGenericType type, final GameScene scene) {
    EList<JvmMember> _members = type.getMembers();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(scene, "dt", this._typeReferenceBuilder.typeRef(float.class));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        final ITreeAppendable current = it_1;
        boolean _isHasScore = scene.isHasScore();
        if (_isHasScore) {
          final Function1<GameDisplay, Boolean> _function_2 = (GameDisplay it_2) -> {
            return Boolean.valueOf(it_2.isHasDelta());
          };
          final Consumer<GameDisplay> _function_3 = (GameDisplay it_2) -> {
            StringConcatenation _builder = new StringConcatenation();
            String _name = it_2.getName();
            _builder.append(_name);
            _builder.append("TimeCount += dt;");
            _builder.newLineIfNotEmpty();
            _builder.append("if (");
            String _name_1 = it_2.getName();
            _builder.append(_name_1);
            _builder.append("TimeCount >= ");
            float _timePeriod = it_2.getTimePeriod();
            _builder.append(_timePeriod);
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_2 = it_2.getName();
            _builder.append(_name_2, "\t");
            _builder.append(" += ");
            float _deltaValue = it_2.getDeltaValue();
            _builder.append(_deltaValue, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_3 = it_2.getName();
            _builder.append(_name_3, "\t");
            _builder.append("ValueLabel.setText(String.format(\"");
            String _format = it_2.getFormat();
            _builder.append(_format, "\t");
            _builder.append("\", ");
            String _name_4 = it_2.getName();
            _builder.append(_name_4, "\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_5 = it_2.getName();
            _builder.append(_name_5, "\t");
            _builder.append("TimeCount = 0;");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            current.append(_builder);
          };
          IterableExtensions.<GameDisplay>filter(scene.getScore().getDisplays(), _function_2).forEach(_function_3);
        }
      };
      this._jvmTypesBuilder.setBody(it, _function_1);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(scene, "update", this._typeReferenceBuilder.typeRef(Void.TYPE), _function);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    EList<JvmMember> _members_1 = type.getMembers();
    final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("stage.dispose();");
        _builder.newLine();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_2);
    };
    JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(scene, "dispose", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
    boolean _isHasScore = scene.isHasScore();
    if (_isHasScore) {
      final Function1<GameDisplay, Boolean> _function_2 = (GameDisplay it) -> {
        return Boolean.valueOf(it.isHasAdder());
      };
      final Consumer<GameDisplay> _function_3 = (GameDisplay it) -> {
        final GameDisplay current = it;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("add");
        String _firstUpper = StringExtensions.toFirstUpper(it.getName());
        _builder.append(_firstUpper);
        final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(scene, "value", this._typeReferenceBuilder.typeRef(current.getType().getName()));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
            StringConcatenation _builder_1 = new StringConcatenation();
            String _name = current.getName();
            _builder_1.append(_name);
            _builder_1.append(" += value;");
            _builder_1.newLineIfNotEmpty();
            it_2.append(_builder_1);
          };
          this._jvmTypesBuilder.setBody(it_1, _function_5);
        };
        JvmOperation operation = this._jvmTypesBuilder.toMethod(scene, _builder.toString(), this._typeReferenceBuilder.typeRef(Void.TYPE), _function_4);
        operation.setStatic(true);
        EList<JvmMember> _members_2 = type.getMembers();
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, operation);
      };
      IterableExtensions.<GameDisplay>filter(scene.getScore().getDisplays(), _function_2).forEach(_function_3);
      final Function1<GameDisplay, Boolean> _function_4 = (GameDisplay it) -> {
        return Boolean.valueOf(it.isHasSetter());
      };
      final Consumer<GameDisplay> _function_5 = (GameDisplay it) -> {
        final GameDisplay current = it;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("set");
        String _firstUpper = StringExtensions.toFirstUpper(it.getName());
        _builder.append(_firstUpper);
        final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(scene, "value", this._typeReferenceBuilder.typeRef(current.getType().getName()));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_2) -> {
            StringConcatenation _builder_1 = new StringConcatenation();
            String _name = current.getName();
            _builder_1.append(_name);
            _builder_1.append(" = value;");
            _builder_1.newLineIfNotEmpty();
            it_2.append(_builder_1);
          };
          this._jvmTypesBuilder.setBody(it_1, _function_7);
        };
        JvmOperation operation = this._jvmTypesBuilder.toMethod(scene, _builder.toString(), this._typeReferenceBuilder.typeRef(Void.TYPE), _function_6);
        operation.setStatic(true);
        EList<JvmMember> _members_2 = type.getMembers();
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, operation);
      };
      IterableExtensions.<GameDisplay>filter(scene.getScore().getDisplays(), _function_4).forEach(_function_5);
    }
  }
  
  public void infer(final EObject gamePkg, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (gamePkg instanceof GamePackage) {
      _infer((GamePackage)gamePkg, acceptor, isPreIndexingPhase);
      return;
    } else if (gamePkg != null) {
      _infer(gamePkg, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(gamePkg, acceptor, isPreIndexingPhase).toString());
    }
  }
}
