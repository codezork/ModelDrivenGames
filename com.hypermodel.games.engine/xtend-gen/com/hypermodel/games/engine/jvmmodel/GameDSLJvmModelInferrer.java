package com.hypermodel.games.engine.jvmmodel;

import android.os.Bundle;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.backends.android.AndroidApplication;
import com.badlogic.gdx.backends.gwt.GwtApplication;
import com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;
import com.badlogic.gdx.backends.iosrobovm.IOSApplication;
import com.google.common.base.Objects;
import com.google.gwt.event.logical.shared.ResizeEvent;
import com.google.gwt.event.logical.shared.ResizeHandler;
import com.hypermodel.games.engine.gameDSL.Game;
import com.hypermodel.games.engine.gameDSL.GamePackage;
import com.hypermodel.games.engine.generator.GameProperties;
import java.util.Arrays;
import java.util.regex.Pattern;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmAnnotationReference;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.moe.natj.general.Pointer;

@SuppressWarnings("all")
public class GameDSLJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  protected void _infer(final GamePackage gamePkg, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EList<Game> _games = gamePkg.getGames();
    for (final Game game : _games) {
      {
        String rootClassName = StringExtensions.toFirstUpper(this.className(game));
        final JvmGenericType rootClass = this._jvmTypesBuilder.toClass(gamePkg, rootClassName);
        rootClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(ApplicationAdapter.class));
        final String pkgName = this._iQualifiedNameProvider.getFullyQualifiedName(gamePkg).toString();
        final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
          this.toFields(it, game);
          this.toOperations(it, game);
          it.setPackageName(pkgName);
          this._jvmTypesBuilder.setDocumentation(it, "generated by hypermodels.com");
        };
        acceptor.<JvmGenericType>accept(rootClass, _function);
        GameProperties.ProjectType[] _values = GameProperties.ProjectType.values();
        for (final GameProperties.ProjectType pType : _values) {
          boolean _notEquals = (!Objects.equal(pType, GameProperties.ProjectType.core));
          if (_notEquals) {
            this.createLauncher(gamePkg, acceptor, game, pkgName, pType);
          }
        }
      }
    }
  }
  
  protected void createLauncher(final GamePackage gamePkg, final IJvmDeclaredTypeAcceptor acceptor, final Game game, final String pkgName, final GameProperties.ProjectType pType) {
    final String doc = "generated by hypermodels.com";
    StringConcatenation _builder = new StringConcatenation();
    String _firstUpper = StringExtensions.toFirstUpper(pType.name());
    _builder.append(_firstUpper);
    _builder.append("Launcher");
    final JvmGenericType launcherClass = this._jvmTypesBuilder.toClass(gamePkg, _builder.toString());
    if (pType != null) {
      switch (pType) {
        case android:
          launcherClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(AndroidApplication.class));
          final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
            final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "savedInstanceState", this._typeReferenceBuilder.typeRef(Bundle.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("super.onCreate(savedInstanceState);");
                _builder_1.newLine();
                _builder_1.append("AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();");
                _builder_1.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_1.append("config.useAccelerometer = true;");
                  }
                }
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("initialize(new ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_1.append(_firstUpper_1);
                _builder_1.append("(), config);");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_2);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "onCreate", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            it.setPackageName(pkgName);
            this._jvmTypesBuilder.setDocumentation(it, doc);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function);
          break;
        case desktop:
          final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
            final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();");
                _builder_1.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_1.append("config.useAccelerometer = true;");
                  }
                }
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("new LwjglApplication(new ");
                _builder_1.append(pkgName);
                _builder_1.append(".");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_1.append(_firstUpper_1);
                _builder_1.append("(), config);");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_3);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
            method.setStatic(true);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(pkgName);
            _builder_1.append(".");
            String _name = pType.name();
            _builder_1.append(_name);
            it.setPackageName(_builder_1.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function_1);
          break;
        case html:
          launcherClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(GwtApplication.class));
          final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(pkgName);
            _builder_1.append(".client");
            it.setPackageName(_builder_1.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
              final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("0");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setInitializer(it_1, _function_4);
            };
            JvmField field = this._jvmTypesBuilder.toField(game, "PADDING", this._typeReferenceBuilder.typeRef(int.class), _function_3);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmField>operator_add(_members, field);
            field = this._jvmTypesBuilder.toField(game, "cfg", this._typeReferenceBuilder.typeRef(GwtApplicationConfiguration.class));
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmField>operator_add(_members_1, field);
            final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_2.append("config.useAccelerometer = true;");
                  }
                }
                _builder_2.newLineIfNotEmpty();
                _builder_2.append("int w = Window.getClientWidth() - PADDING;");
                _builder_2.newLine();
                _builder_2.append("int h = Window.getClientHeight() - PADDING;");
                _builder_2.newLine();
                _builder_2.append("cfg = new GwtApplicationConfiguration(w, h);");
                _builder_2.newLine();
                _builder_2.append("Window.enableScrolling(false);");
                _builder_2.newLine();
                _builder_2.append("Window.setMargin(\"0\");");
                _builder_2.newLine();
                _builder_2.append("Window.addResizeHandler(new ResizeListener());");
                _builder_2.newLine();
                _builder_2.append("cfg.preferFlash = false;");
                _builder_2.newLine();
                _builder_2.append("return cfg;");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_5);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "getConfig", this._typeReferenceBuilder.typeRef(GwtApplicationConfiguration.class), _function_4);
            EList<JvmMember> _members_2 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, method);
            final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("return new ");
                _builder_2.append(pkgName);
                _builder_2.append(".");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_2.append(_firstUpper_1);
                _builder_2.append("();");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            method = this._jvmTypesBuilder.toMethod(game, "createApplicationListener", this._typeReferenceBuilder.typeRef(ApplicationListener.class), _function_5);
            EList<JvmMember> _members_3 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, method);
            final JvmGenericType resizeClass = this._jvmTypesBuilder.toClass(gamePkg, "ResizeListener");
            resizeClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(ResizeHandler.class));
            final Procedure1<JvmGenericType> _function_6 = (JvmGenericType inner) -> {
              final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
                EList<JvmFormalParameter> _parameters = it_1.getParameters();
                JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(it_1, "event", this._typeReferenceBuilder.typeRef(ResizeEvent.class));
                this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
                EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
                JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
                this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
                final Procedure1<ITreeAppendable> _function_8 = (ITreeAppendable it_2) -> {
                  StringConcatenation _builder_2 = new StringConcatenation();
                  _builder_2.append("int width = event.getWidth() - PADDING;");
                  _builder_2.newLine();
                  _builder_2.append("int height = event.getHeight() - PADDING;");
                  _builder_2.newLine();
                  _builder_2.append("getRootPanel().setWidth(\"\" + width + \"px\");");
                  _builder_2.newLine();
                  _builder_2.append("getRootPanel().setHeight(\"\" + height + \"px\");");
                  _builder_2.newLine();
                  _builder_2.append("getApplicationListener().resize(width, height);");
                  _builder_2.newLine();
                  _builder_2.append("Gdx.graphics.setWindowedMode(width, height);");
                  it_2.append(_builder_2);
                };
                this._jvmTypesBuilder.setBody(it_1, _function_8);
              };
              JvmOperation innermethod = this._jvmTypesBuilder.toMethod(it, "onResize", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_7);
              EList<JvmMember> _members_4 = inner.getMembers();
              this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, innermethod);
              it.setPackageName(pkgName);
              this._jvmTypesBuilder.setDocumentation(it, doc);
            };
            acceptor.<JvmGenericType>accept(resizeClass, _function_6);
            EList<JvmMember> _members_4 = it.getMembers();
            this._jvmTypesBuilder.<JvmGenericType>operator_add(_members_4, resizeClass);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function_2);
          break;
        case ios:
          launcherClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(IOSApplication.Delegate.class));
          final Procedure1<JvmGenericType> _function_3 = (JvmGenericType it) -> {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(pkgName);
            it.setPackageName(_builder_1.toString());
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_5 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("\t\t\t\t\t\t        ");
                _builder_2.append("IOSApplicationConfiguration config = new IOSApplicationConfiguration();");
                _builder_2.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_2.append("config.useAccelerometer = true;");
                  }
                }
                _builder_2.newLineIfNotEmpty();
                _builder_2.append("\t\t\t\t\t\t        ");
                _builder_2.append("return new IOSApplication(new ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_2.append(_firstUpper_1, "\t\t\t\t\t\t        ");
                _builder_2.append("(), config);");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_5);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "createApplication", this._typeReferenceBuilder.typeRef(IOSApplication.class), _function_4);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members, method);
            final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append("NSAutoreleasePool pool = new NSAutoreleasePool();");
                _builder_2.newLine();
                _builder_2.append("UIApplication.main(argv, null, ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_2.append(_firstUpper_1);
                _builder_2.append("Launcher.class);");
                _builder_2.newLineIfNotEmpty();
                _builder_2.append("pool.close();");
                it_2.append(_builder_2);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(IOSApplication.class), _function_5);
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, method);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function_3);
          break;
        case iosmoe:
          launcherClass.getSuperTypes().add(this._typeReferenceBuilder.typeRef(IOSApplication.Delegate.class));
          final Procedure1<JvmGenericType> _function_4 = (JvmGenericType it) -> {
            it.setPackageName(pkgName);
            this._jvmTypesBuilder.setDocumentation(it, doc);
            final Procedure1<JvmConstructor> _function_5 = (JvmConstructor it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "peer", this._typeReferenceBuilder.typeRef(Pointer.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              final Procedure1<ITreeAppendable> _function_6 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("super(peer);");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_6);
            };
            JvmConstructor constructor = this._jvmTypesBuilder.toConstructor(game, _function_5);
            constructor.setVisibility(JvmVisibility.PROTECTED);
            EList<JvmMember> _members = it.getMembers();
            this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, constructor);
            final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_7 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("\t\t\t\t\t\t        ");
                _builder_1.append("IOSApplicationConfiguration config = new IOSApplicationConfiguration();");
                _builder_1.newLine();
                {
                  boolean _isUseAccelerometer = gamePkg.getConfig().getAndroid().isUseAccelerometer();
                  if (_isUseAccelerometer) {
                    _builder_1.append("config.useAccelerometer = true;");
                  }
                }
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("\t\t\t\t\t\t        ");
                _builder_1.append("return new IOSApplication(new ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_1.append(_firstUpper_1, "\t\t\t\t\t\t        ");
                _builder_1.append("(), config);");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_7);
            };
            JvmOperation method = this._jvmTypesBuilder.toMethod(game, "createApplication", this._typeReferenceBuilder.typeRef(IOSApplication.class), _function_6);
            EList<JvmMember> _members_1 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, method);
            final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(game, "arg", this._typeReferenceBuilder.typeRef(String[].class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
              JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
              this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
              final Procedure1<ITreeAppendable> _function_8 = (ITreeAppendable it_2) -> {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("UIKit.UIApplicationMain(0, null, null, ");
                String _firstUpper_1 = StringExtensions.toFirstUpper(game.getName());
                _builder_1.append(_firstUpper_1);
                _builder_1.append("Launcher.class.getName());");
                it_2.append(_builder_1);
              };
              this._jvmTypesBuilder.setBody(it_1, _function_8);
            };
            method = this._jvmTypesBuilder.toMethod(game, "main", this._typeReferenceBuilder.typeRef(IOSApplication.class), _function_7);
            EList<JvmMember> _members_2 = it.getMembers();
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, method);
          };
          acceptor.<JvmGenericType>accept(launcherClass, _function_4);
          break;
        default:
          break;
      }
    } else {
    }
  }
  
  public void toFields(final JvmGenericType type, final Game game) {
    JvmField field = null;
    field = this._jvmTypesBuilder.toField(game, "batch", this._typeReferenceBuilder.typeRef("SpriteBatch"));
    EList<JvmMember> _members = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members, field);
    field = this._jvmTypesBuilder.toField(game, "img", this._typeReferenceBuilder.typeRef("Texture"));
    EList<JvmMember> _members_1 = type.getMembers();
    this._jvmTypesBuilder.<JvmField>operator_add(_members_1, field);
  }
  
  public void toOperations(final JvmGenericType type, final Game game) {
    EList<JvmMember> _members = type.getMembers();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("batch = new SpriteBatch();");
        _builder.newLine();
        _builder.append("img = new Texture(\"badlogic.jpg\");");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_1);
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(game, "create", this._typeReferenceBuilder.typeRef(Void.TYPE), _function);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    EList<JvmMember> _members_1 = type.getMembers();
    final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("Gdx.gl.glClearColor(1, 0, 0, 1);");
        _builder.newLine();
        _builder.append("Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);");
        _builder.newLine();
        _builder.append("batch.begin();");
        _builder.newLine();
        _builder.append("batch.draw(img, 0, 0);");
        _builder.newLine();
        _builder.append("batch.end();");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_2);
    };
    JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(game, "render", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_1);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
    EList<JvmMember> _members_2 = type.getMembers();
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      EList<JvmAnnotationReference> _annotations = it.getAnnotations();
      JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
      this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
      final Procedure1<ITreeAppendable> _function_3 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("batch.dispose();");
        _builder.newLine();
        _builder.append("img.dispose();");
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setBody(it, _function_3);
    };
    JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(game, "dispose", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
    this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_2);
  }
  
  public String className(final Game game) {
    String clsName = StringExtensions.toFirstUpper(game.getName().toString());
    String[] parts = clsName.split(Pattern.quote("."));
    int len = parts.length;
    if ((len > 1)) {
      return StringExtensions.toFirstUpper(parts[(len - 1)]);
    }
    return clsName;
  }
  
  public void infer(final EObject gamePkg, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (gamePkg instanceof GamePackage) {
      _infer((GamePackage)gamePkg, acceptor, isPreIndexingPhase);
      return;
    } else if (gamePkg != null) {
      _infer(gamePkg, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(gamePkg, acceptor, isPreIndexingPhase).toString());
    }
  }
}
