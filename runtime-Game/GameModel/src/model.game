import com.badlogic.gdx.physics.box2d.Body
import com.badlogic.gdx.math.Vector2
import com.badlogic.gdx.graphics.g2d.Sprite

package com.hypermodel.games { 
	configuration { 
		android { 
			minAndroidVersion 9
			targetAndroidVersion 25
			SDKApiLevel 19
			orientation landscape 
		}
		ios {     
		}
		iosmoe {   
			useAccelerometer 
		}   
	}
	game MarioBros screenWidth 400 screenHeight 208 title "MarioBros" pixelPerMeter 100 
	timeStep 0.0167 velocityIterations 6 positionIterations 2 worldWidth 240 worldHeight 13 
	tileWidth 16 tileHeight 16 
	layers {
		layer background index 0 type tile
		layer graphic index 1 type tile
		layer ground index 2 type object
		layer pipes index 3 type object
		layer coins index 4 type object
		layer bricks index 5 type object
		layer goombas index 6 type object
		layer turtles index 7 type object
	}
	scenes {
		scene Hud isScore topPadding 10 { 
			display mario valueType number format "%06d" initialValue 0 addValue
			display world valueType text format "%s" initialValue "1-1" setValue 
			display time valueType number format "%03d" initialValue 300 deltaValue -1.0 eachTimePeriod 1.0  
		} 
	}
	regions {
		region marioRunRight name "little_mario" width 16 height 16
		region marioRunLeft name "little_mario" width 16 height 16 flipX
		region marioDead name "little_mario" width 16 height 16   
		region bigMarioRunRight name "big_mario" width 16 height 32 positionOffsetY 10.0  
		region bigMarioRunLeft name "big_mario" width 16 height 32 positionOffsetY 10.0 flipX
		region goomba name "goomba" width 16 height 16
		region mushroom name "mushroom" width 16 height 16
	}
	screens {
		screen PlayScreen 
		atlas "Mario_and_Enemies"
		map "level1.tmx"
		scene Hud
		tiles {
			tile Ground collisionId 0 objectLayer ground
			tile Pipe collisionId 5 objectLayer pipes
			tile Brick collisionId 2 objectLayer bricks tileLayer graphic
			tile Coin collisionId 3 objectLayer coins tileLayer graphic
		}
		sprites {
			sprite Mario collisionId 1 radius 6
			startPosition vector(32.0,32.0) 
			sensor {
				vector(-2.0,6.0)
				vector(2.0,6.0)
			} sensorID 9
			actors {
				sprite Mushroom
				tile Brick at fixture collidesWith sensor atBeginOfContact brickHit 
				tile Coin at fixture collidesWith sensor atBeginOfContact coinHit
				tile Ground
				tile Pipe
			} 
			properties {
				property grows
				property big
				property dead
				property timeToDefineBig onUpdateIfTrue { 
					redefineMario();
					timeToDefineBig = false; 
				}   
				property timeToDefineSmall onUpdateIfTrue {
					redefineMario();
					timeToDefineSmall = false; 
				}   
			}
			states { 
				state standSmall if isTrue notMoving() { 
					return body.linearVelocity.y == 0 && body.linearVelocity.x == 0 && !isBig
				} stand marioStand whichFrame 0 from marioRunRight
				state standSmallBig if isTrue notMovingBig() { 
					return body.linearVelocity.y == 0 && body.linearVelocity.x == 0 && isBig
				} stand bigMarioStand whichFrame 0 from bigMarioRunRight
				state runningSmallLeft if isTrue runningLeft() {
					return body.linearVelocity.y == 0 && body.linearVelocity.x < 0 && !isBig
				} animation marioRunleft duration 0.1 frames 4 startFrame 1 from marioRunLeft
				state runningSmallRight if isTrue runningRight() {
					return body.linearVelocity.y == 0 && body.linearVelocity.x > 0 && !isBig
				} animation marioRunRight duration 0.1 frames 4 startFrame 1 from marioRunRight
				state runningBigLeft if isTrue runningBigLeft() {
					return body.linearVelocity.y == 0 && body.linearVelocity.x < 0 && isBig
				} animation bigMarioRunleft duration 0.1 frames 4 startFrame 1 from bigMarioRunLeft 
				state runningBigRight if isTrue runningBigRight() {
					return body.linearVelocity.y == 0 && body.linearVelocity.x > 0 && isBig
				} animation bigMarioRunRight duration 0.1 frames 4 startFrame 1 from bigMarioRunRight
				state jumpSmallLeft if isTrue jumpSmallLeft() {
					return !isBig && body.linearVelocity.x < 0 && (body.linearVelocity.y > 0 || body.linearVelocity.y < 0  && previousState.equals(State.JUMPSMALLLEFT)) 
				} stand jumpSmallLeft whichFrame 5 from marioRunLeft
				state jumpSmallRight if isTrue jumpSmallRight() {
					return !isBig && body.linearVelocity.x > 0 && (body.linearVelocity.y > 0 || body.linearVelocity.y < 0  && previousState.equals(State.JUMPSMALLRIGHT)) 
				} stand jumpSmallRight whichFrame 5 from marioRunRight 
				state jumpBigLeft if isTrue jumpBigLeft() {
					return isBig && body.linearVelocity.x < 0 && (body.linearVelocity.y > 0 || body.linearVelocity.y < 0  && previousState.equals(State.JUMPBIGLEFT)) 
				} stand jumpBigLeft whichFrame 5 from bigMarioRunLeft 
				state jumpBigRight if isTrue jumpBigRight() {
					return isBig && body.linearVelocity.x > 0 && (body.linearVelocity.y > 0 || body.linearVelocity.y < 0  && previousState.equals(State.JUMPBIGRIGHT)) 
				} stand jumpBigRight whichFrame 5 from bigMarioRunRight
				state growing if isTrue doGrowing() { 
					return grows
				} animation marioGrowing duration 0.2 stands {
					stand grow1 whichFrame 15 from bigMarioRunLeft
					stand grow2 whichFrame 0 from bigMarioRunLeft 
					stand grow3 whichFrame 15 from bigMarioRunLeft
					stand grow4 whichFrame 0 from bigMarioRunLeft 
				} ifFinished setFalse grows
				state dead if isTrue isDead() {
					return dead
				} stand marioDead whichFrame 6 from marioDead
			}
			initialState standSmall gameOverState dead 
			events {
				event grow() {
					if(!isBig) {
						grows = true
						big = true
						timeToDefineBig = true
						setBounds(getX(), getY(), getWidth(), getHeight() * 2)
					}					
				}
				event hit() {
					if(isBig) {
						big = false
						timeToDefineSmall = true 
					} else {
						//Gdx.app.log("MARIO", "-*- DIED -*-")
					}
				}
				event brickHit(Brick brick) {
					if(isBig) {
						brick.categoryFilter = 16;
						brick.cell.setTile(null);
						Hud.addMario(200);
					}
				}
				event coinHit(Coin coin) {
					coin.cell.setTile(coin.getMap().getTileSets().getTileSet("tileset_gutter").getTile(28));
            		Hud.addMario(100);
				}
				event jump() {  
					if(!currentState.equals(State.DEAD) && !currentState.equals(State.JUMPBIGLEFT) && !currentState.equals(State.JUMPBIGRIGHT) && !currentState.equals(State.JUMPSMALLLEFT) && !currentState.equals(State.JUMPSMALLRIGHT)) { 
						body.applyLinearImpulse(new Vector2(0, 4f), body.getWorldCenter(), true)
						currentState = State.JUMPBIGLEFT
					}
				}
				event accelerateRight() {
					if(!currentState.equals(State.DEAD) && body.getLinearVelocity().x <= 1) {
						body.applyLinearImpulse(new Vector2(0.1f, 0), body.getWorldCenter(), true)
					}
				}
				event accelerateLeft() {
					if(!currentState.equals(State.DEAD) && body.getLinearVelocity().x >= -1) {
						body.applyLinearImpulse(new Vector2(-0.1f, 0), body.getWorldCenter(), true)
					}
				}
			}
			inputs {
				input justPressed up jump
				input pressed left accelerateLeft
				input pressed right accelerateRight 
			}
			sprite Goomba collisionId 6 radius 6 layer goombas velocity vector(-1.0,-2.0) 
			sensor {
				vector(-5.0,8.0)
				vector(5.0,8.0)
				vector(-3.0,3.0)
				vector(3.0,3.0)
			} sensorID 7
			activate if isTrue playerNear(Sprite player) {
				return body.position.x < player.getX() + 2.24
			}
			actors {
				sprite Mario at sensor collidesWith fixture atBeginOfContact hitOnHead
				sprite Goomba at fixture collidesWith fixture atBeginOfContact hitByGoomba
				tile Pipe at fixture collidesWith fixture atBeginOfContact reverseVelocityX 
				tile Brick
				tile Coin
				tile Ground 
			}
			properties { 
				property setToDestroyed onUpdateIfTrue {  
					world.destroyBody(body)
            		destroyed = true
            		stateTimer = 0
				}
				property destroyed onUpdateIfFalse {
		            body.setLinearVelocity(^velocity);
		            setPosition(body.getPosition().x - getWidth() / 2, body.getPosition().y - getHeight() / 2);
				}
			}
			states {
				state runningGoomba if isTrue notDestroyed () {
					return !destroyed 
				} animation walkAnimation duration 0.4 frames 2 startFrame 0 from goomba
				state destroyingGoomba if isTrue toBeDestroyed () {
					return setToDestroyed
				} stand isdestroyed whichFrame 2 from goomba
			}
			initialState runningGoomba
			events {
				event reverseVelocityX(Pipe pipe) {
					^velocity.x = -^velocity.x
				}
				event hitOnHead(Mario mario) {
					setToDestroyed = true
				}
				event hitByGoomba(Goomba goomba) { 
					^velocity.x = -^velocity.x
				}
			}

			sprite Mushroom collisionId 8 radius 6 velocity vector(0.7,0.0)
			actors {
				sprite Mario
				tile Brick
				tile Coin
				tile Ground
				tile Pipe
			}
			properties {
				property setToDestroyed onUpdateIfTrue { 
					world.destroyBody(body)
            		destroyed = true;
            		stateTimer = 0
				}
				property destroyed onUpdateIfFalse {
		            setPosition(body.getPosition().x - getWidth() / 2, body.getPosition().y - getHeight() / 2);
		            ^velocity.y = body.getLinearVelocity().y;
		            body.setLinearVelocity(^velocity);
				}
			}
			states {
				state standingMushroom if isTrue notDestroyed () {
					return !destroyed 
				} stand isThere whichFrame 0 from mushroom 
			}
			initialState standingMushroom 
			events {
				event grow(Mario mario) {
					doTrueSetToDestroyed()
					mario.grow()
				}
			}
		}
	}
} 
